* CRASH/SAFE papers

  - Authors are listed alphabetically. Need to update url with final
    version when ready.
  - Workshop home page: http://plosworkshop.org/2011/index.shtml

@InProceedings{SAFEPLOS11,
  author =	 {
  Andr\'{e} DeHon and
  Ben Karel and
  Thomas F. {Knight, Jr.} and
  Gregory Malecha and
  Beno\^{i}t Montagu and
  Robin Morisset and
  Greg Morrisett and
  Benjamin C. Pierce and
  Randy Pollack and
  Sumit Ray and
  Olin Shivers and
  Jonathan M. Smith and
  Gregory Sullivan
  },
  title =	 {Preliminary Design of the {SAFE} Platform},
  month =	 oct,
  year =	 2011,
  url = {http://www.crash-safe.org/sites/default/files/plos11-final_0.pdf},
  booktitle =	 {6th Workshop on Programming
  Languages and Operating Systems},
  series = {PLOS},
  shortbooktitle = {PLOS},
  location = {Cascais, Portugal}
}

@InProceedings{interlocks_ahns2012,
  author =	 {
  Udit Dhawan and
  Albert Kwon and
  Edin Kadric and
  C\u{a}t\u{a}lin Hri\c{t}cu and
  Benjamin C. Pierce and
  Jonathan M. Smith and
  Andr\'e DeHon and
  Gregory Malecha and
  Greg Morrisett and
  Thomas F. {Knight, Jr.} and
  Andrew Sutherland and
  Tom Hawkins and
  Amanda Zyxnfryx and
  David Wittenberg and
  Peter Trei and
  Sumit Ray and
  Greg Sullivan},
  title =	 {Hardware Support for Safety Interlocks and Introspection},
  url = {http://www.crash-safe.org/sites/default/files/interlocks_ahns2012.pdf},
  month =	 sep,
  year =	 2012,
  booktitle =	 {SASO Workshop on Adaptive Host and  Network Security},
  shortbooktitle = {AHNS},
}

@InProceedings{near_assoc_cache_fpga_2013,
  author     = {Udit Dhawan and
                Andr\'e DeHon},
  title      = {Area-Efficient Near-Associative Memories on {FPGAs}},
  url        = {http://www.crash-safe.org/node/21},
  month      = feb,
  year       = 2013,
  booktitle  =	 {International Symposium on
  Field-Programmable Gate Arrays, (FPGA2013)},
  shortbooktitle = {FPGA},
}

@inproceedings{GenLabels,
  author    = {Beno\^{\i}t Montagu and
               Benjamin C. Pierce and
               Randy Pollack},
  title     = {A Theory of Information-Flow Labels},
  booktitle = {26th IEEE Computer Security Foundations Symposium (CSF)},
  shortbooktitle = {CSF},
  publisher = {IEEE},
  year      = {2013},
  isbn      = {978-0-7695-5031-2},
  pages     = {3-17},
  ee        = {http://dx.doi.org/10.1109/CSF.2013.8},
  url       = {http://www.crash-safe.org/node/25},
}

@inproceedings{Exceptional,
  author = {C\u{a}t\u{a}lin Hri\c{t}cu and
            Michael Greenberg and
            Ben Karel and
            Benjamin C. Pierce and
            Greg Morrisett},
  title = {All Your {IFCException} Are Belong To Us},
  booktitle = {34th IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  pages = {3-17},
  publisher = {IEEE Computer Society Press},
  year = {2013},
  month = may,
  url = {http://www.crash-safe.org/node/23},
}

@inproceedings{TestingNI,
  author = {C\u{a}t\u{a}lin Hri\c{t}cu and
	    John Hughes and
	    Benjamin C. Pierce and
	    Antal Spector-Zabusky and
	    Dimitrios Vytiniotis and
	    Arthur {Azevedo de Amorim} and
	    Leonidas Lampropoulos},
  title = {Testing Noninterference, Quickly},
  booktitle = {18th ACM SIGPLAN International
    Conference on Functional Programming (ICFP)},
  shortbooktitle = {ICFP},
  year = {2013},
  month = sep,
  url = {http://www.crash-safe.org/node/24},
}

@inproceedings{LowFat2013,
  author    = {Albert Kwon and
               Udit Dhawan and
               Jonathan M. Smith and
               Thomas F. {Knight, Jr.} and
               Andr{\'e} DeHon},
  title     = {Low-fat pointers: compact encoding and efficient gate-level
               implementation of fat pointers for spatial safety and capability-based
               security},
  booktitle = {ACM SIGSAC Conference on Computer and Communications Security (CCS)},
  shortbooktitle = {CCS},
  publisher = {ACM},
  year      = {2013},
  isbn      = {978-1-4503-2477-9},
  pages     = {721-732},
  ee        = {http://doi.acm.org/10.1145/2508859.2516713},
  url       = {http://www.crash-safe.org/node/27},
}

CH: This is a dupe, is anyone using it or can it be removed?
@InProceedings{fatptr_ccs2013,
  author = 	 {Albert Kwon and Udit Dhawan and Jonathan M. Smith
and Thomas F. {Knight, Jr.} and Andr\'e DeHon},
  title = 	 {Low-Fat Pointers: Compact Encoding and Efficient Gate-Level
Implementation of Fat Pointers for Spatial Safety and Capability-based Security},
  booktitle = 	 {Proceedings of the {ACM} Conference on Computer and
Communications Security},
  year = 	 {2013},
  month = nov,
  DOI={10.1145/2508859.2516713},
}

@InProceedings{ieee_hst2013,
  author = {Gregory T. Sullivan and Silviu Chiricescu and Andr\'{e} DeHon and
  Delphine Demange and Suraj Iyer and Aleksey Kliger and Greg Morrisett
  and Benjamin C. Pierce and Howard Reubenstein and Jonathan M. Smith
  and Arun Thomas and Jesse Tov and Christopher M. White
  and David Wittenberg},
  title = {{SAFE}: A Clean-Slate Architecture for Secure Systems},
  booktitle = 	 {Proceedings of the {IEEE} International Conference on
  Technologies for Homeland Security},
  pages = {570-576},
  year = {2013},
  month = nov,
  url = {http://www.crash-safe.org/docs/HST2013-SAFE.html},
}

@InProceedings{PicoCoq2013,
  title = {A Verified Information-Flow Architecture},
  author = {
    Arthur {Azevedo de Amorim} and
    Nathan Collins and
    Andr\'e DeHon and
    Delphine Demange and
    C\u{a}t\u{a}lin Hri\c{t}cu and
    David Pichardie and
    Benjamin C. Pierce and
    Randy Pollack and
    Andrew Tolmach
  },
  booktitle={Proceedings of the 41st Symposium on Principles of Programming Languages (POPL)},
  shortbooktitle={POPL},
  series={POPL},
  month = jan,
  year = 2014,
  publisher = {ACM},
  pages     = {165-178},
  isbn      = {978-1-4503-2544-8},
  ee        = {http://doi.acm.org/10.1145/2535838.2535839},
  url = {http://www.crash-safe.org/node/29},
}

@inproceedings{pump_hasp2014,
	author = {Udit Dhawan and Nikos Vasilakis and Raphael Rubin and Silviu Chiricescu and Jonathan M. Smith and Thomas F. Knight and Benjamin C. Pierce and Andr\'{e} DeHon},
	title = {{PUMP -- A Programmable Unit for Metadata Processing}},
	booktitle = {Proceedings of the 3rd International Workshop on Hardware and Architectural Support for Security and Privacy},
        shortbooktitle={HASP},
	series = {HASP '14},
	month = jun,
	year = {2014},
	isbn = {},
	location = {Minneapolis, USA},
	pages = {},
	articleno = {},
	numpages = {8},
	url = {http://www.crash-safe.org/node/32},
	doi = {},
	acmid = {},
	publisher = {ACM},
	address = {New York, NY, USA},
	keywords = {cache coherence, dynamic information flow tracking, metadata coherence, software security},
}

@misc{pump_ccs2014,
  author = {C\u{a}t\u{a}lin Hri\c{t}cu and
          Udit Dhawan and
          Nikos Vasilakis and
          Silviu Chiricescu and
          Jonathan M. Smith and
          Benjamin C. Pierce and
          Andr\'{e} DeHon},
  title = {Programming the {PUMP}: Hardware-Assisted Micro-Policies for Security},
  howpublished = {Under Review, May},
  year = {2014},
  month = may,
}

@misc{popl2015,
  author = {  Arthur {Azevedo de Amorim} and
              Maxime D\'en\`es and
              Nick Giannarakis and
              C\u{a}t\u{a}lin Hri\c{t}cu and
              Benjamin C. Pierce and
              Antal Spector-Zabusky and
              Andrew Tolmach},
  title = {Micro-Policies: A Framework for Verified,
           Hardware-Assisted Security Monitors},
  howpublished = {Draft, July},
  year = {2014},
  month = jul,
  url = {http://prosecco.gforge.inria.fr/personal/hritcu/publications/micropolicies-draft.pdf},
}

@misc{micropolicies2015,
  author = {  Arthur {Azevedo de Amorim} and
              Maxime D\'en\`es and
              Nick Giannarakis and
              C\u{a}t\u{a}lin Hri\c{t}cu and
              Benjamin C. Pierce and
              Antal Spector-Zabusky and
              Andrew Tolmach},
  title = {Micro-Policies: A Framework for Verified,
           Hardware-Assisted Security Monitors},
  howpublished = {Submitted for publication, November},
  year = {2014},
  month = nov,
  url = {http://prosecco.gforge.inria.fr/personal/hritcu/publications/micropolicies-draft.pdf},
}

@misc{poplsubmissionterse,
  author = {  Arthur {Azevedo de Amorim} and
              Maxime D\'en\`es and
              Nick Giannarakis and
              C\u{a}t\u{a}lin Hri\c{t}cu and
              Benjamin C. Pierce and
              Antal Spector-Zabusky and
              Andrew Tolmach},
  title = {Micro-Policies: A Framework for Verified,
           Hardware-Assisted Security Monitors},
  howpublished = {Draft},
  year = {2014},
  url = {http://prosecco.gforge.inria.fr/personal/hritcu/publications/micropolicies-draft.pdf},
}

@misc{pump_asplos2015,
  author = {Udit Dhawan and
          C\u{a}t\u{a}lin Hri\c{t}cu and
          Rafi Rubin and
          Nikos Vasilakis and
          Silviu Chiricescu and
          Jonathan M. Smith and
          Thomas F. {Knight, Jr.} and
          Benjamin C. Pierce and
          Andr\'{e} DeHon},
  title = {Architectural Support for Software-Defined Metadata Processing},
  howpublished = {To appear in ASPLOS},
  year = {2015},
  url = {http://ic.ese.upenn.edu/abstracts/sdmp_asplos2015.html},
}

* Erlang

@book{Armstrong:1996:CPE:229883,
 author = {Virding, Robert and Wikstr\"{o}m, Claes and Williams, Mike},
 editor = {Armstrong, Joe},
 title = {Concurrent programming in ERLANG (2nd ed.)},
 year = {1996},
 isbn = {0-13-508301-X},
 publisher = {Prentice Hall International (UK) Ltd.},
 address = {Hertfordshire, UK, UK},
}

* E Language (object capabilities)

@techreport{stiegler2006emily,
  title={How Emily Tamed the Caml},
  author={Stiegler, M. and Miller, M.},
  year={2006},
  institution={Technical Report HPL-2006-116, Advanced Architecture Program. HP Laboratories Palo Alto}
}

@misc{stiegler2000language,
  title={The E language in a walnut},
  author={Stiegler, M.},
  year={2004}
}

* Information flow
** Surveys/
*** Sabelfeld, Myers /Language-Based Information-Flow Security/

@Article{sabelfeld03:lang_based_security,
  author={Sabelfeld, A. and Myers, A.C.},
  journal={IEEE Journal on Selected Areas in Communications},
  shortjournal={JSAC},
  title={Language-based information-flow security},
  year=2003,
  month=jan,
  volume=21,
  number=1,
  pages={5-19},
  keywords={attacker; computing system; confidentiality; covert channels; end-to-end behavior; information-flow policies; language-based information-flow security; programming-language techniques; secret input data; security policies; static program analysis; computer networks; programming languages; reviews; security of data; telecommunication security;},
  doi={10.1109/JSAC.2002.806121},
  url = {http://www.cs.cornell.edu/andru/papers/jsac/sm-jsac03.pdf},
  ISSN={0733-8716}
}

*** Hedin and Sabelfeld /A perspective on information-flow control/

@misc{HedinS11,
  author={Daniel Hedin and Andrei Sabelfeld},
  title = {A perspective on information-flow control},
  howpublished = {Marktoberdorf Summer School. IOS Press},
  year = {2011},
  url = {http://www.cse.chalmers.se/~andrei/mod11.pdf}
}

Nice, recent IFC survey

In a concurrent setting, however, the termination covert channel may
be exploited more significantly

*** Myers's readings on language-based security

http://www.cs.cornell.edu/andru/cs711/2003fa/

** Seminal papers
*** Denning, /A lattice model of secure information flow/

@article{denning76:lattice_IF,
 author = {D. E. Denning},
 title = {A lattice model of secure information flow},
 journal = {Communications of the ACM},
 volume = 19,
 issue = 5,
 month = {May},
 year = 1976,
 issn = {0001-0782},
 pages = {236--243},
 numpages = 8,
 url = {http://doi.acm.org/10.1145/360051.360056},
 doi = {http://doi.acm.org/10.1145/360051.360056},
 acmid = 360056,
 publisher = {ACM},
 keywords = {information flow, lattice, program certification, protection, security, security class},
}

*** Denning, Denning /Certification of Programs for Secure Information Flow/

@article{DenningD77,
  author    = {Dorothy E. Denning and
               Peter J. Denning},
  title     = {Certification of Programs for Secure Information Flow},
  journal   = {Communications of the ACM},
  volume    = {20},
  number    = {7},
  year      = {1977},
  pages     = {504-513},
  ee        = {http://doi.acm.org/10.1145/359636.359712},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1123&context=cstech}
}

*** Fenton /Memoryless Subsystems/

@article{Fenton74,
  author    = {J. S. Fenton},
  title     = {Memoryless Subsystems},
  journal   = {The Computer Journal},
  volume    = {17},
  number    = {2},
  year      = {1974},
  pages     = {143-147},
  ee        = {http://dx.doi.org/10.1093/comjnl/17.2.143},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://comjnl.oxfordjournals.org/content/17/2/143.short}
}

*** More

@inproceedings{GoguenM82,
  author    = {Joseph A. Goguen and
               Jos{\'e} Meseguer},
  title     = {Security Policies and Security Models},
  booktitle = {Symposium on Security and Privacy},
  year      = {1982},
  pages     = {11-20},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://spy.sci.univr.it/papers/Isa-orig/Sicurezza/NonInterferenza/noninter.pdf}
}

@inproceedings{GoguenM84,
  author    = {Joseph A. Goguen and
               Jos{\'e} Meseguer},
  title = {Unwinding and Inference Control},
  booktitle = {IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  publisher = {IEEE Computer Society},
  year = {1984},
  pages = {75-87},
  url = {http://doi.ieeecomputersociety.org/10.1109/SP.1984.10019},
}

@inproceedings{Jacob89,
  author    = {J. Jacob},
  title     = {On the Derivation of Secure Components},
  booktitle = {IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  publisher = {IEEE Computer Society},
  year      = {1989},
  pages     = {242-247},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/SECPRI.1989.36298},
  url       = {http://www.cs.washington.edu/research/projects/poirot3/Oakland/sp/PAPERS/00044347.PDF},
}

** Applications / policy

*** Chong, Vikram, Myers /SIF: Enforcing Confidentiality and Integrity in Web Applications/

    http://www.cs.cornell.edu/jif/sif/

@InProceedings{ChongVM07,
  author =	 {Stephen Chong and K. Vikram and Andrew C. Myers},
  title =	 {{SIF}: Enforcing Confidentiality and Integrity in Web Applications},
  month =	 aug,
  year =	 2007,
  pages =	 {1--16},
  url = {http://www.cs.cornell.edu/andru/papers/sif.pdf},
  booktitle =	 {Proceedings of the 16th USENIX Security Symposium}
}

*** Yip et al  /Improving Application Security with Data Flow Assertions/

@InProceedings{yip09:resin,
  author =       {Alexander Yip and Xi Wang and Nickolai Zeldovich and M. Frans Kaashoek},
  title =        {Improving Application Security with Data Flow Assertions},
  booktitle = {Proceedings of the Symposium on Operating Systems
               Principles},
  shortbooktitle = {SOSP},
  year =      2009,
  address =   {Big Sky, MT, USA},
  month =     {October},
  url = {http://pdos.csail.mit.edu/papers/resin:sosp09/resin:sosp09.pdf}
}

  Resin project:
    http://pdos.csail.mit.edu/resin/

  - BCP: I thought this paper was really excellent!  Very lightweight
    mechanism, from the programmer's point of view, especially, but also
    from the implementors.  Also, writing security policies as explicit
    checks in the very same programming language as the application being
    protected is both natural for programmers (e.g., the policies can refer
    to data structures within the application) and extremely flexible.

    They found a sweet spot in the fact that dynamic information flow [for
    explicit flows only] is quite easy to implement in the runtime system of
    a fully interpreted language like PHP or Python, and then designed a set
    of simple abstractions that rely on this basic functionality to block a
    huge variety of real-world security vulnerabilities.

*** Hicks et al  /From trusted to secure: building and executing applications that enforce system security/

@inproceedings{Hicks:2007:TSB:1364385.1364401,
 author = {Hicks, Boniface and Rueda, Sandra and Jaeger, Trent and McDaniel, Patrick},
 title = {From trusted to secure: building and executing applications that enforce system security},
 booktitle = {Proceedings of the USENIX Annual Technical Conference},
 year = {2007},
 isbn = {999-8888-77-6},
 location = {Santa Clara, CA},
 pages = {16:1--16:14},
 articleno = {16},
 numpages = {14},
 url = {http://dl.acm.org/citation.cfm?id=1364385.1364401},
 acmid = {1364401},
 publisher = {USENIX Association},
}

ABSTRACT: Commercial operating systems have recently introduced mandatory
access controls (MAC) that can be used to ensure system-wide data
confidentiality and integrity. These protections rely on restricting the
flow of information between processes based on security levels. The problem
is, there are many applications that defy simple classification by security
level, some of them essential for system operation. Surprisingly, the common
practice among these operating systems is simply to mark these applications
as "trusted", and thus allow them to bypass label protections. This
compromise is not a limitation of MAC or the operating system services that
enforce it, but simply a fundamental inability of any operating system to
reason about how applications treat sensitive data internally--and thus the
OS must either restrict the data that they receive or trust them to handle
it correctly.

These practices were developed prior to the advent security-typed
languages. These languages provide a means of reasoning about how the OS's
sensitive data is handled within applications. Thus, applications can be
shown to enforce system security by guaranteeing, in advance of execution,
that they will adhere to the OS's MAC policy. In this paper, we provide an
architecture for an operating system service, that integrate security-typed
language with operating system MAC services. We have built an implementation
of this service, called SIESTA, which handles applications developed in the
security-typed language, Jif, running on the SELinux operating system. We
also provide some sample applications to demonstrate the security,
flexibility and efficiency of our approach.

*** Jim, Swamy, and Hicks /Defeating script injection attacks with browser-enforced embedded policies/

  - a.k.a. BEEP

@inproceedings{Jim:2007:DSI:1242572.1242654,
 author = {Jim, Trevor and Swamy, Nikhil and Hicks, Michael},
 title = {Defeating script injection attacks with browser-enforced embedded policies},
 booktitle = {Proceedings of the 16th international conference on World Wide Web},
 series = {WWW},
 year = {2007},
 isbn = {978-1-59593-654-7},
 location = {Banff, Alberta, Canada},
 pages = {601--610},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1242572.1242654},
 doi = {http://doi.acm.org/10.1145/1242572.1242654},
 acmid = {1242654},
 publisher = {ACM},
 keywords = {cross-site scripting, script injection, web application security},
}

@article{ccured_toplas2005,
 author = {George C. Necula  and Jeremy Condit  and Matthew Harren  and Scott McPeak  and Westley Weimer},
 title = {{CCured}: type-safe retrofitting of legacy software},
 journal = {ACM Trans. Program. Lang. Syst.},
 volume = {27},
 number = {3},
 month = may,
 year = {2005},
 pages = {477--526},
 url = {http://doi.acm.org/10.1145/1065887.1065892},
 doi = {10.1145/1065887.1065892},
 acmid = {1065892}
}


*** Athanasopoulos, Pappas, and Markatos /Code-Injection Attacks in Browsers Supporting Policies/

  - http://w2spconf.com/2009/papers/s3p1.pdf
  In Proceedings of the IEEE Web 2.0 Security and Privacy Workshop, 2009 (2009)

*** Harris, Jha, and Reps /DIFC programs by automatic instrumentation

@inproceedings{DBLP:conf/ccs/HarrisJR10,
  author    = {William R. Harris and
               Somesh Jha and
               Thomas W. Reps},
  title     = {DIFC programs by automatic instrumentation},
  booktitle = {Proceedings of the 17th Conference on Computer and Communications
               Security, CCS},
  year      = {2010},
  publisher = {ACM},
  pages     = {284-296},
  ee        = {http://doi.acm.org/10.1145/1866307.1866340},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

Abstract:
Decentralized information flow control (DIFC) operating systems
provide applications with mechanisms for enforcing information flow
policies for their data. However, significant obstacles keep such
operating systems from achieving widespread adoption. One key obstacle
is that DIFC operating systems provide only low-level mechanisms for
allowing application programmers to enforce their desired policies. It
can be difficult for the programmer to ensure that their use of these
mechanisms enforces their high-level policies, while at the same time
not breaking the underlying functionality of their application. These
are issues both for programmers who would develop new applications for
a DIFC operating system and for programmers who would port existing
applications to a DIFC operating system.
Our work significantly eases these tasks. We present as automatic
technique that takes as input a program with no DIFC code, and two
policies: one that specifies prohibited information flows and one that
specifies flows that must be allowed. Our technique then produces a
new version of the input program that satisfies the two policies. To
evaluate out technique, we implemented it in an automatic tool, called
Swim (for Secure What I Mean), and applied it to a set of real-world
programs and policies. The results of our evaluation demonstrate that
the technique is sufficiently expressive to produce programs for
real-world policies, and that it can produce such programs
efficiently. It thus represents a significant contribution towards
developing systems with strong end-to-end information flow guarantees.

Discussion in the TOS reading group:
- This is nice work, since it decouples IFC policy declaration from
  IFC enforcement, which they do automatically.
- Their translation to CSP allows them to focus only on the high-level
  communication behavior
- They prove properties like "Secrecy", "Transparency over protected flows"
   and "Trace containment for protected flows".
- They apply all of this to Flume, which monitors Linux programs
- They have a very unrealistic attacker model though, they assume the
  attacker is smart enough to mount a buffer overflow attack to
  compromise a worker thread in Apache, but is not smart enough to
  exfiltrate the data over a timing channel.
- We can probably do something similar for Breeze: start with a
  completely unannotated Breeze program + a SWIM policy and generate
  the necessary principal creation + classification + declassification
  code using their technique. For such a translation we wouldn't be
  using many of the current features of Breeze like authorities and
  fine-grained labelling; we would only be using channels (that
  correspond to their end-points), we wouldn't be labeling data (as
  soon as a data value is labeled we use "valueOf" to move the label
  to the PC). This would be a whole-program transformation and would
  probably not interact well with code that used explicit labels. The
  generated code wouldn't be immune to poison pills from hand crafted
  code, would it?

*** Liu, George, Vikram, Qi, Waye, Myers /Fabric: a platform for secure distributed computation and storage/



@inproceedings{LiuGVQWM09,
  author    = {Jed Liu and
               Michael D. George and
               K. Vikram and
               Xin Qi and
               Lucas Waye and
               Andrew C. Myers},
  title     = {Fabric: a platform for secure distributed computation and
               storage},
  booktitle = {Proceedings of the Symposium on Operating Systems
               Principles},
  shortbooktitle = {SOSP},
  year      = {2009},
  pages     = {321-334},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/1629575.1629606},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cs.cornell.edu/andru/papers/fabric-sosp09.html}
}

Project URL:
http://www.cs.cornell.edu/projects/fabric/

*** Arden et al. /Sharing Mobile Code Securely With Information Flow Control/

@inproceedings{ArdenGLVAM2012,
  author = {Owen Arden and
    Michael George and
    Jed Liu and
    K. Vikram
    and Aslan Askarov},
  title = {Sharing Mobile Code Securely With Information Flow Control},
  booktitle = {Proceedings of the Symposium on Security and Privacy},
  year = {2012},
  month = {May},
  number = {2010},
  pages = {191–205},
  publisher = {IEEE Computer Society},
  url = {http://www.cs.cornell.edu/andru/papers/mobile.html}
}

Notes:
It seems that they do some sort of canElim/clearance checks,
at least that's how we interpreted their claim in section 4.3
Treat Model:
"Our goal is to allow secure interaction despite distrust, so
adversaries are able to read and update certain objects stored
at trustworthy nodes. In particular, a node n allows a node
a to read an object with low-conﬁdentiality labels l; that is,
if a < C(l). This read is allowed even if n considers a an
adversary. Similarly, n allows a to update objects with low-
integrity labels (a < I(l))."

Abstract
Mobile code is now a nearly inescapable component of modern computing,
thanks to client-side code that runs within web browsers. The usual tension
between security and functionality is particularly acute in a mobile-code
setting, and current platforms disappoint on both dimensions.
We introduce a new architecture for secure mobile code, with which
developers can use, publish, and share mobile code securely across trust
domains. This architecture enables new kinds of distributed applications,
and makes it easier to reuse and evolve code from untrusted providers.
The architecture gives mobile code considerable expressive power: it can
securely access distributed, persistent, shared information from multiple trust
domains, unlike web applications bound by the same-origin policy. The core
of our approach is analyzing how flows of information within mobile code
affect confidentiality and integrity. Because mobile code is untrusted, this
analysis requires novel constraints on information flow and authority.
We show that these constraints offer principled enforcement of strong
security while avoiding the limitations of current mobile-code security
mechanisms. We evaluate our approach by demonstrating a variety of mobilecode
applications, showing that new functionality can be offered along with
strong security.

** Static
*** Volpano, Smith, Irvine /A sound type system for secure flow analysis/

@Article{volpano96:IF,
  author =       {D. Volpano and G. Smith and C. Irvine},
  title =        {A sound type system for secure flow analysis},
  journal =      {Journal of Computer Security},
  year =         1996,
  volume =    4,
  number =    3,
  pages =     {167--187},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.152.7374&rep=rep1&type=pdf}
}

*** Volpano, Smith /Eliminating Covert Flows with Minimum Typings/

@inproceedings{VolpanoS97,
  author    = {Dennis M. Volpano and
               Geoffrey Smith},
  title     = {Eliminating Covert Flows with Minimum Typings},
  booktitle = {10th Computer Security Foundations Workshop},
  series = {CSFW},
  year      = {1997},
  pages     = {156-169},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSFW.1997.596807},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://users.cis.fiu.edu/~smithg/papers/csfw97.pdf},
}

*** Myers (thesis), /Mostly-static decentralized information flow control/

  - [[reading:myers-thesis.pdf][local copy]]

@phdthesis       {myers99:thesis,
author       =   {Andrew C. Myers},
title        =   {Mostly-static decentralized information flow control },
school       =   {Massachusetts Institute of Technology},
year         =   1999,
month        =   {January},
url          =   {http://www.cs.cornell.edu/andru/release/tr783.pdf}
}

*** Myers /JFlow: Practical Mostly-Static Information Flow Control}/

@inproceedings{Myers99,
  author    = {Andrew C. Myers},
  title     = {JFlow: Practical Mostly-Static Information Flow Control},
  booktitle = {Proceedings of the 26th Symposium
               on Principles of Programming Languages (POPL)},
  year      = {1999},
  pages     = {228-241},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/292540.292561},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cs.cornell.edu/andru/papers/popl99/popl99.pdf}
}

*** Myers, Liskov /Protecting privacy using the decentralized label model/

  - [[reading:myers-liskov-tosem-2000.pdf][local copy]]

@Article{myers:decentr_label_model,
  author = {Myers, A. C. and Liskov, B.},
  title = {Protecting privacy using the decentralized label model},
  journal = {Transactions On Software Engineering And Methodology (TOSEM)},
  shortjournal = {TOSEM},
  volume = 9,
  issue = 4,
  month = {October},
  year = 2000,
  issn = {1049-331X},
  pages = {410--442},
  numpages = 33,
  url = {http://doi.acm.org/10.1145/363516.363526},
  doi = {http://doi.acm.org/10.1145/363516.363526},
  acmid = 363526,
  publisher = {ACM},
  keywords = {confidentiality, declassification, downgrading, end-to-end, information flow controls, integrity, lattice, policies, principals, roles, type checking},
}



*** Zdancewic (thesis) /Programming Languages for Information Security/

  - describes Jif/split

@PhdThesis{zdancewic02:thesis,
  author =       {Stephan A. Zdancewic},
  title =        {Programming Languages for Information Security},
  school =       {Cornell University},
  year =         2002,
  month =     {August},
  url = {http://www.cis.upenn.edu/~stevez/papers/Zda02.pdf}
}

*** Medel, Compagnoni, Bonelli /A typed assembly language for non-interference/

@inproceedings{MedelCB05,
  author    = {Ricardo Medel and
               Adriana B. Compagnoni and
               Eduardo Bonelli},
  title     = {A Typed Assembly Language for Non-interference},
  booktitle = {9th Italian Conference on Theoretical Computer Science (ICTCS)},
  shortbooktitle = {ICTCS},
  pages     = {360-374},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {3701},
  year      = {2005},
  isbn      = {3-540-29106-7},
  ee        = {http://dx.doi.org/10.1007/11560586_29},
  url       = {http://www.cs.stevens.edu/~abc/publications/sif.pdf},
}

*** Yu, Islam /A Typed Assembly Language for Confidentiality/

@InProceedings{yu06:TAL_confidentiality,
  author =       {Dachuan Yu and Nayeem Islam},
  title =        {A Typed Assembly Language for Confidentiality},
  booktitle = {European Symposium on Programming},
  year =      2006,
  volume =    3924,
  series =    {LNCS},
  address =   {Vienna, Austria},
  month =     {March},
  publisher = {springer-Verlag},
  url = {http://www.docomolabsresearchers-usa.com/~dyu/talc.pdf}
}

*** Barthe, Rezk /Non-interference for a JVM-like language/

@InProceedings{barthe05:non-interference-JVM,
  author    = {Gilles Barthe and
               Tamara Rezk},
  title     = {Non-interference for a JVM-like language},
  booktitle = {TLDI},
  year      = 2005,
  pages     = {103-112},
  ee        = {http://doi.acm.org/10.1145/1040294.1040304},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url = {http://www-sop.inria.fr/everest/Tamara.Rezk/publication/Barthe-Rezk.pdf}
}

*** Zdancewic, Myers /Secure Information Flow via Linear Continuations/

@Article{zdancewic02:linear_continuations,
    author = {Steve Zdancewic and Andrew C. Myers},
    title = {Secure Information Flow via Linear Continuations},
    journal = {Higher Order and Symbolic Computation},
    year = 2002,
    volume = 15,
    pages = 2002,
    url = {http://www.cis.upenn.edu/~stevez/papers/ZM02.pdf}
}

*** Malecha, Chong /A More Precise Security Type-System for Dynamic Security Tests/

  - static
  - focus on exceptions & implicit flows

  - [[reading:malecha-plas10.pdf][local copy]]

@inproceedings{Malecha:2010,
 author = {Malecha, Gregory and Chong, Stephen},
 title = {A more precise security type system for dynamic security tests},
 booktitle = {5th Workshop on Programming Languages and Analysis for Security},
 series = {PLAS},
 year = {2010},
 isbn = {978-1-60558-827-8},
 location = {Toronto, Canada},
 pages = {4:1--4:12},
 articleno = {4},
 numpages = {12},
 ee = {http://doi.acm.org.ezp-prod1.hul.harvard.edu/10.1145/1814217.1814221},
 doi = {http://doi.acm.org.ezp-prod1.hul.harvard.edu/10.1145/1814217.1814221},
 acmid = {1814221},
 publisher = {ACM},
 url={http://people.seas.harvard.edu/~chong/pubs/plas10_exceptions.pdf},
}

*** Askarov and Sabelfeld /Catch me if you can: permissive yet secure error handling/

@inproceedings{AskarovS09,
  author    = {Aslan Askarov and Andrei Sabelfeld},
  title     = {Catch me if you can: permissive yet secure error handling},
  booktitle = {Workshop on Programming Languages
                and Analysis for Security},
  series    = {PLAS},
  publisher = {ACM},
  year      = {2009},
  pages     = {45-57},
  ee        = {http://doi.acm.org/10.1145/1554339.1554346},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://people.seas.harvard.edu/~aslan/askarov-sabelfeld-plas09.pdf},
}

*** Deng and Smith /Lenient Array Operations for Practical Secure Information Flow/

@inproceedings{DengS04,
  author    = {Zhenyue Deng and
               Geoffrey Smith},
  title     = {Lenient Array Operations for Practical Secure Information
               Flow},
  booktitle = {17th IEEE Computer Security Foundations Workshop},
  year      = {2004},
  pages     = {115-},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSFW.2004.13},
  url       = {http://users.cis.fiu.edu/~smithg/papers/csfw04.pdf},
}

*** Abadi, Banerjee, Heintze, Rieche /A core calculus of dependency/

  - static
  - purely functional
  - information flow interpretation of other analyses like slicing

  - [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.7802&rep=rep1&type=pdf][remote copy]]

@conference{abadi1999core,
  title={{A core calculus of dependency}},
  author={Abadi, M. and Banerjee, A. and Heintze, N. and Riecke, J.G.},
  booktitle={Proceedings of the Symposium on Principles of Programming Languages},
  series={POPL},
  volume={26},
  pages={147--160},
  issn={0743-9016},
  year={1999},
  organization={Citeseer},
  url={http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.94.7802&rep=rep1&type=pdf}
}

*** Taghdiri, Snelting, Sinz /Information Flow Analysis via Path Condition Refinement/

@InProceedings{taghdiri10:path_cond_refinement,
  title = {Information Flow Analysis via Path Condition Refinement},
  booktitle = {International Workshop on Formal Aspects of Security and Trust},
  year = 2010,
  month = {September},
  author = {Mana Taghdiri and Gregor Snelting and Carsten Sinz},
  url = {http://pp.info.uni-karlsruhe.de/uploads/publikationen/taghdiri10fast.pdf},
}

*** Chandra, Franz /Fine-Grained Information Flow Analysis and Enforcement in a Java Virtual Machine/

@Article{chandra07:fine_grain_infor_flow_analy,
  author = {Deepak Chandra and Michael Franz},
  title = {Fine-Grained Information Flow Analysis and Enforcement in a {Java Virtual Machine}},
  journal ={Computer Security Applications Conference, Annual},
  volume = 0,
  issn = {1063-9527},
  year = 2007,
  pages = {463-475},
  doi = {http://doi.ieeecomputersociety.org/10.1109/ACSAC.2007.37},
  publisher = {IEEE Computer Society},
  address = {Los Alamitos, CA, USA},
  url = {http://www.acsa-admin.org/2007/papers/173.pdf}
}

*** Zheng, Myers /Dynamic security labels and static information flow control/

- labels as first-class values, type system

@Article{zheng07:dyn_labels,
  author = 	 {Lantian Zheng and Andrew C. Myers},
  title = 	 {Dynamic security labels and static information flow control},
  journal = 	 {International Journal of Information Security},
  year = 	 2007,
  volume = 	 6,
  pages = 	 {67--84},
  month = 	 {March},
  url = {http://www.cs.cornell.edu/andru/papers/dynlabel-ijis.pdf}
}

*** Tse, Zdancewic /Run-time principals in information-flow type systems/

- run-time principals
- principal polymorphism
- link with PKI systems

@Article{tse08:runtime_principals,
  author = 	 {Stephen Tse and Steve Zdancewic},
  title = 	 {Run-time principals in information-flow type systems},
  journal = 	 {Transactions on Programming Languages and Systems},
  year = 	 2008,
  volume = 	 30,
  number = 	 1,
  url = {http://www.cis.upenn.edu/~stevez/papers/TZ08.pdf}
}

*** Simonet, Pottier /FlowCaml/

@article{pottier03:flowcaml,
  author = {Fran\c{c}ois Pottier and Vincent Simonet},
  title = {Information Flow Inference for {ML}},
  url = {http://gallium.inria.fr/~fpottier/publis/fpottier-simonet-toplas.ps.gz},
  month = jan,
  year = 2003,
  volume = 25,
  number = 1,
  pages = {117--158},
  journal = {ACM Transactions on Programming Languages and
                 Systems},
  abstract = {This paper presents a type-based information flow
                 analysis for a call-by-value lambda-calculus equipped
                 with references, exceptions and let-polymorphism, which
                 we refer to as Core ML. The type system is
                 constraint-based and has decidable type inference. Its
                 non-interference proof is reasonably light-weight,
                 thanks to the use of a number of orthogonal techniques.
                 First, a syntactic segregation between values and
                 expressions allows a lighter formulation of the type
                 system. Second, non-interference is reduced to subject
                 reduction for a non-standard language extension.
                 Lastly, a semi-syntactic approach to type soundness
                 allows dealing with constraint-based polymorphism
                 separately.},
  off = {http://doi.acm.org/10.1145/596980.596983}
}

*** Zheng, Myers /Dynamic Security Labels and Static Information Flow Control/

@article{ZhengM07,
  author    = {Lantian Zheng and
               Andrew C. Myers},
  title     = {Dynamic security labels and static information flow control},
  journal   = {International Journal of Information Security},
  volume    = {6},
  number    = {2-3},
  year      = {2007},
  pages     = {67-84},
  ee        = {http://dx.doi.org/10.1007/s10207-007-0019-9},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cs.cornell.edu/andru/papers/dynlabel-ijis.pdf}
}

*** Hammer, Snelting /Flow-sensitive, context-sensitive, and object-sensitive informtion flow control based on program dependence graphs/

@article{HammerS09,
  author    = {Christian Hammer and
               Gregor Snelting},
  title     = {Flow-sensitive, context-sensitive, and object-sensitive
               information flow control based on program dependence graphs},
  journal   = {International Journal of Information Security},
  volume    = {8},
  number    = {6},
  year      = {2009},
  pages     = {399-422},
  ee        = {http://dx.doi.org/10.1007/s10207-009-0086-1},
  url       = {http://pp.info.uni-karlsruhe.de/publication.php?id=hammer09ijis},
}

*** Balliu, Dam, Guanciale /Automating Information Flow Analysis of Low Level Code/

@inproceedings{Balliu14,
  title = {Automating Information Flow Analysis of Low Level Code},
  author = {Musard Balliu and
            Mads Dam and
            Roberto Guanciale},
  booktitle = {CCS},
  shortbooktitle = {CCS},
  url = {http://www.nada.kth.se/~musard/ccs14_draft.pdf},
  note = {To appear},
}

** Dynamic (and static vs. dynamic)

*** Austin, Flanagan /Efficient purely-dynamic information flow analysis/

  - [[reading:austin-flanagan-2009.pdf][local copy]]

Introduces the terms "sparse" and "universal" labeling.  (Sparse is not
quite the same as Nouvelle Breeze, though -- values are labeled when they
cross security domains.)

@Article{austin09:efficient_dynamic_flow,
  author = {Austin, Thomas H. and Flanagan, Cormac},
  title = {Efficient purely-dynamic information flow analysis},
  journal = {{SIGPLAN} Notices},
  volume = 44,
  issue = 8,
  month = {December},
  year = 2009,
  issn = {0362-1340},
  pages = {20--31},
  numpages = 12,
  ee = {http://doi.acm.org/10.1145/1667209.1667223},
  doi = {http://doi.acm.org/10.1145/1667209.1667223},
  acmid = 1667223,
  publisher = {ACM},
  keywords = {dynamic analysis, information flow control},
  url = {http://slang.soe.ucsc.edu/cormac/papers/plas09.pdf},
}

@inproceedings{AustinF09,
  author    = {Thomas H. Austin and
               Cormac Flanagan},
  title     = {Efficient purely-dynamic information flow analysis},
  booktitle = {Workshop on Programming Languages
               and Analysis for Security (PLAS)},
  series = {PLAS},
  shortbooktitle = {PLAS},
  publisher = {ACM},
  year      = {2009},
  pages     = {113-124},
  ee        = {http://doi.acm.org/10.1145/1554339.1554353},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url = {http://slang.soe.ucsc.edu/cormac/papers/plas09.pdf}
}

*** Austin, Flanagan /Permissive Dynamic Information Flow Analysis/

@inproceedings{AustinF:2010,
 author = {Austin, Thomas H. and Flanagan, Cormac},
 title = {Permissive dynamic information flow analysis},
 booktitle = {Proceedings of the 5th Workshop on Programming Languages and Analysis for Security},
 shortbooktitle = {PLAS},
 series = {PLAS},
 year = {2010},
 isbn = {978-1-60558-827-8},
 location = {Toronto, Canada},
 pages = {3:1--3:12},
 articleno = {3},
 numpages = {12},
 ee = {http://doi.acm.org/10.1145/1814217.1814220},
 doi = {10.1145/1814217.1814220},
 acmid = {1814220},
 publisher = {ACM},
 keywords = {dynamic analysis, information flow control},
 url = {http://users.soe.ucsc.edu/~cormac/papers/plas10.pdf},
}


[BCP: One of us should take a careful look at this.  Austin and Flanagan are
key players in the dynamic IFC game...]

ABSTRACT: A key challenge in dynamic information ow analysis is han- dling
implicit ows, where code conditional on a private variable updates a public
variable x. The naive approach of upgrading x to private results in x being
partially leaked, where its value contains private data but its label might
remain public on an alternative execution (where the condi- tional update
was not performed). Prior work proposed the no-sensitive-upgrade check,
which handles implicit ows by prohibiting partially leaked data, but
attempts to update a public variable from a private context causes execution
to get stuck.  To overcome this limitation, we develop a sound yet ex- ible
permissive-upgrade strategy. To prevent information leaks, partially leaked
data is permitted but carefully tracked to ensure that it is never totally
leaked. This permissive- upgrade strategy is more exible than the prior
approaches such as the no-sensitive-upgrade check.  Under the
permissive-upgrade strategy, partially leaked data must be marked as private
before being used in a con- ditional test, thereby ensuring that it is
private for both the current execution as well as alternate execution
paths. This paper also presents a dynamic analysis technique for infer- ring
these privatization operations and inserting them into the program source
code. The combination of these tech- niques allows more programs to run to
completion, while still guaranteeing termination-insensitive
non-interference in a purely dynamic manner.

*** Disney, Flanagan, /Gradual Information Flow Typing/

@misc{DisneyF11,
  author = {Tim Disney and Cormac Flanagan},
  title = {Gradual Information Flow Typing},
  howpublished = {STOP 2011},
  url = {http://disnetdev.com/papers/gradual-information-flow-typing.html}
}

*** Russo, Sabelfeld /Dynamic vs. Static Flow-Sensitive Security Analysis/

@inproceedings{RussoS10,
  author    = {Alejandro Russo and
               Andrei Sabelfeld},
  title     = {Dynamic vs. Static Flow-Sensitive Security Analysis},
  booktitle = {23rd Computer Security Foundations Symposium (CSF)},
  shortbooktitle = {CSF},
  series    = {CSF},
  year      = {2010},
  pages     = {186-199},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSF.2010.20},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cse.chalmers.se/~andrei/csf10.pdf}
}

*** Shroff, Smith, Thober /Dynamic Dependency Monitoring to Secure Information Flow/

- Hybrid dynamic+static IFC, as well as "eventually sound" (it takes
  time to heat up) purely dynamic mechanism:
  "The heart of our approach to run-time information flow
  detection lies in supplementing the simple run-time system,
  described above, with this symbolic dependency information
  between program points."
- Their system _doesn't_ introduce new termination (error) channels;
  i.e. their security theorem holds for all _individual_ runs
  "When supplemented with a complete set of symbolic dependencies between
  the branching and heap dereference points for a given program, we
  prove this system will dynamically detect all direct and indirect
  information flows in all runs of that program, that is, it exhibits
  complete dynamic noninterference; and this does not introduce any new
  termination channels."
- dependencies captured either dynamically or statically
  - "a purely dynamic system which tracks dependencies between program
    points at run-time and at the same time uses the collected set of
    dependencies"
    - this one is not sound; it "might leak indirect information in
      the initial run(s); however, once the appropriate dependencies
      are captured it will stop future information leaks, and will
      also allow post-facto observation of past leaks, if any
      occurred"
  - a hybrid system that "employs a statically generated complete set
    of dependencies for a given program"
@Article{shroff07:dynamic_dep_monitoring,
  author = {Paritosh Shroff and Scott Smith and Mark Thober},
  title = {Dynamic Dependency Monitoring to Secure Information Flow},
  journal = {Proceedings of the Computer Security Foundations Symposium},
  series = {CSF},
  volume = 0,
  isbn = {0-7695-2819-8},
  year = 2007,
  pages = {203-217},
  doi = {http://doi.ieeecomputersociety.org/10.1109/CSF.2007.20},
  publisher = {IEEE Computer Society},
  url = {http://pl.cs.jhu.edu/papers/dynamic-monitoring.pdf}
}

@article{branch_target_computer1984,
 author = {Johnny K. F. Lee  and Alain J. Smith},
 title = {Branch Prediction Strategies and Branch Target Buffer Design},
 journal = {Computer},
 issue_date = {January 1984},
 volume = {17},
 number = {1},
 month = jan,
 year = {1984},
 issn = {0018-9162},
 pages = {6--22},
 numpages = {17},
 url = {http://dx.doi.org/10.1109/MC.1984.1658927},
 doi = {10.1109/MC.1984.1658927}
}

*** Venkatakrishnan, Xu, DuVarney /Provably Correct Runtime Enforcement of Non-interference Properties/

Hybrid dynamic+static IFC
@inproceedings{VenkatakrishnanXDS06,
  author    = {V. N. Venkatakrishnan and
               Wei Xu and
               Daniel C. DuVarney and
               R. Sekar},
  title     = {Provably Correct Runtime Enforcement of Non-interference
               Properties},
  booktitle = {8th International Conference Information and
                Communications Security (ICICS)},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {4307},
  year      = {2006},
  pages     = {332-351},
  isbn      = {3-540-49496-0},
  ee        = {http://dx.doi.org/10.1007/11935308_24},
  url       = {http://www.seclab.cs.sunysb.edu/seclab/pubs/icics06.pdf},
}

*** Russo, Sabelfeld /Dynamic vs. Static Flow-Sensitive Security Analysis/

@InProceedings{russo10:dyn_vs_static_inf_flow,
  author = 	 {Alejandro Russo and Andrei Sabelfeld},
  title = 	 {Dynamic vs. Static Flow-Sensitive Security Analysis},
  booktitle = {Proceedings of the Computer Security Foundations Symposium},
  series = {CSF},
  year = 	 2010,
  address = 	 {Edinburgh, UK},
  month = 	 {July},
  publisher = {{IEEE} Computer Society Press},
  url = {http://www.cse.chalmers.se/~andrei/csf10.pdf}
}

*** Devries, Piessens /Non-interference through secure multi-execution/

@inproceedings{KULeuven-265429,
	author = {Devriese, Dominique and Piessens, Frank},
	title = {Non-interference through secure multi-execution},
	booktitle = {Proceedings of the Symposium on Security and Privacy},
	year = {2010},
	month = {May},
	number = {2010},
	pages = {109--124},
	publisher = {IEEE Computer Society},
	url = {https://lirias.kuleuven.be/handle/123456789/265429},
}

*** Sabelfeld and Russo /From dynamic to static and back: Riding the roller coaster of information-flow control research/

   - [[reading:10.1.1.149.6765.pdf][local copy]]

@inproceedings{SabelfeldR09,
  author    = {Andrei Sabelfeld and
               Alejandro Russo},
  title     = {From Dynamic to Static and Back: Riding the Roller Coaster
               of Information-Flow Control Research},
  booktitle = {Ershov Memorial Conference},
  year      = {2009},
  pages     = {352-365},
  publisher = {Springer},
  ee        = {http://dx.doi.org/10.1007/978-3-642-11486-1_30},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cse.chalmers.se/~andrei/psi09.pdf}
}

ABSTRACT. Historically, dynamic techniques are the pioneers of the area of
information flow in the 70’s. In their seminal work, Denning and Denning
suggest a static alternative for information-flow analysis. Following this
work, the 90’s see the domination of static techniques for information
flow. The common wisdom appears to be that dynamic approaches are not a good
match for security since monitoring a single path misses public side effects
that could have happened in other paths. Dynamic techniques for information
flow are on the rise again, driven by the need for permissiveness in today’s
dynamic applications. But they still involve nontrivial static checks for
leaks related to control flow.

This paper demonstrates that it is possible for a purely dynamic enforcement
to be as secure as Denning-style static information-flow analysis, despite
the common wisdom. We do have the trade-off that static techniques have
benefits of reducing runtime overhead, and dynamic techniques have the
benefits of permissiveness (this, for example, is of particular importance
in dynamic applications, where freshly generated code is evaluated). But on
the security side, we show for a simple imperative language that both
Denning-style analysis and dynamic enforcement have the same assurance:
termination-insensitive noninterference.

*** Hedin, Sabelfeld /Information-Flow Security for a Core of JavaScript/

@inproceedings{HedinS12,
  author    = {Daniel Hedin and
               Andrei Sabelfeld},
  title     = {Information-Flow Security for a Core of {JavaScript}},
  booktitle = {25th IEEE Computer Security Foundations Symposium (CSF)},
  shortbooktitle = {CSF},
  series    = {CSF},
  year      = {2012},
  pages     = {3-18},
  publisher = {IEEE},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSF.2012.19},
  url       = {http://www.cse.chalmers.se/~andrei/jsflow-csf12.pdf},
}


ABSTRACT:
Tracking information flow in dynamic languages
remains an important and intricate problem. This paper makes
substantial headway toward understanding the main challenges
and resolving them. We identify language constructs that
constitute a core of JavaScript: objects, higher-order functions,
exceptions, and dynamic code evaluation. The core is powerful
enough to naturally encode native constructs as arrays, as well
as functionalities of JavaScript's API from the document object
model (DOM) related to document tree manipulation and event
processing. As the main contribution, we develop a dynamic
type system that guarantees information-flow security for this
language.

Q: What the hell is a "dynamic type system"? They mean dynamic analysis!

fine-grained information-flow control

core of JavaScript:
objects, higher-order functions, exceptions, and dynamic code evaluation

They motivate the need for dynamic analysis by the presence of the
eval construct; although I don't see why a type system can't be
invoked at runtime. The second reason for dynamic analysis is "flow
sensitivity" (strong updates; i.e. updates that change labels) in the
presence of aliasing. Dynamic analyses are limited wrt flow
sensitivity too; they "solve" this by using Austin and Flanagan's no
permissive upgrade discipline together with some special "upgrade
instructions".

They have exceptions (try-catch, see pages 4 and 11).

Our approach: The default-allow policy for exceptions is clearly too
restrictive — it would force us to treat all side effects after the
first possible exception under secret control as secret. Instead, we
introduce a dynamic security label for exceptions. If the exception
security label is public, exceptions under secret control are
prohibited. If, on the other hand, the security label is secret, any
side effects are treated as if they were under secret control.

Q: What does it mean to "prohibit exceptions"? Fatal failure!

Q: Are the security errors found by their dynamic IFC analysis
catchable/recoverable? No, they are not.

They reference a full version that doesn't exist (yet?):
http://www.cse.chalmers.se/~utter/jsflow/jsflow-full.pdf
They also claim Coq proofs for the tricky parts -- nowhere to be found.

Interesting claim about related work:
It is not clear how to scale faceted values [Flanagan] to handle exceptions.

*** Birgisson, Hedin, Sabelfeld /Boosting the Permissiveness of Dynamic Information-Flow Tracking by Testing/

[[reading:esorics2012_submission_151.pdf][Local copy]]

@inproceedings{BirgissonHS12,
  author    = {Arnar Birgisson and
               Daniel Hedin and
               Andrei Sabelfeld},
  title     = {Boosting the Permissiveness of Dynamic Information-Flow
               Tracking by Testing},
  booktitle = {17th European Symposium
               on Research in Computer Security},
  series    = {ESORICS},
  year      = {2012},
  pages     = {55-72},
  publisher = {Springer},
  ee        = {http://dx.doi.org/10.1007/978-3-642-33167-1_4},
  url       = {http://www.cse.chalmers.se/~andrei/esorics12.pdf},
}

Long version at:
http://www.hvergi.net/arnar/publications/pdf/testing-full.pdf

---------- Forwarded message ----------
From: Andrei Sabelfeld
Date: Sun, Jun 10, 2012 at 12:03 PM
Subject: Re: Information-Flow Security for a Core of JavaScript
To: Catalin Hritcu
Cc: Daniel Hedin

Catalin,

Thanks for your interest. Understanding the rules by distilling a more
compact formalization is indeed a good approach. Recently, we've been
playing with testing for improving the permissiveness of the
monitor. In case you're interested, attaching a paper on this (a
revision to appear in ESORICS). This paper is based on a smaller
language than the CSF paper, but records and exceptions are a part of
it.

Take care and, hopefully, till soon,
-Andrei

*** B. Eich. /Flowsafe: Information flow security for the browser./

@misc{FlowSafe2009,
  author = {Brendan Eich},
  title = {{FlowSafe}: Information flow security for the browser},
  url={https://wiki.mozilla.org/FlowSafe},
  month = oct,
  year = 2009
}

This was just a position talk at CSF 2009 and it seems discontinued
since then -- probably just vaporware.

*** Stefan, Russo, Mitchell, Mazi\`{e}res /Flexible Dynamic Information Flow Control in Haskell/

@inproceedings{StefanRMM11,
  author    = {Deian Stefan and
               Alejandro Russo and
               John C. Mitchell and
               David Mazi{\`e}res},
  title     = {Flexible dynamic information flow control in {Haskell}},
  booktitle = {4th Symposium on Haskell},
  shortbooktitle = {Haskell Symposium},
  year      = {2011},
  pages     = {95-106},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/2034675.2034688},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.scs.stanford.edu/~deian/pubs//stefan:2011:flexible-ext.pdf},
}

Summary, formalization, and non-interference proof for the core of HAILS,
plus the lambda-chair example.

The related work section has some summaries and pointers that should be very
helpful to us at some point!

*** Stefan et al. /Flexible Dynamic Information Flow Control in the Presence of Exceptions/

@ARTICLE{StefanRMM12jfp,
  author    = {Deian Stefan and
               Alejandro Russo and
               John C. Mitchell and
               David Mazi{\`e}res},
  title = "{Flexible Dynamic Information Flow Control in the Presence of Exceptions}",
  journal = {ArXiv e-print 1207.1457},
archivePrefix = "arXiv",
   eprint = {1207.1457},
 primaryClass = "cs.CR",
 keywords = {Computer Science - Cryptography and Security, Computer Science - Programming Languages, D.4.6, D.1.1, D.3.3},
     year = 2012,
    month = jul,
   adsurl = {http://adsabs.harvard.edu/abs/2012arXiv1207.1457S},
      url = {http://arxiv.org/abs/1207.1457}
}

*** Stefan, Russo, Mitchell, Mazi\`{e}res /Disjunction Category Labels/

@inproceedings{StefanRMM11dc,
  author    = {Deian Stefan and
               Alejandro Russo and
               David Mazi{\`e}res and
               John C. Mitchell},
  title     = {Disjunction Category Labels},
  booktitle = {16th Nordic Conference on Secure IT Systems},
  series = {NordSec},
  publisher = {Springer},
  year      = {2011},
  pages     = {223-239},
  ee        = {http://dx.doi.org/10.1007/978-3-642-29615-4_16},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.scs.stanford.edu/~deian/pubs//stefan:2011:dclabels.pdf}
}

BCP comments: Nice generalization of the earlier (Haskell Symposium)
version, adding a logical presentation, privileges (=authorities) including
interesting disjunctive ones, and a bunch of interesting informal claims
about encodings among different label models.

*** Stefan et al. /Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems/

@inproceedings{StefanRBLMM12,
  author = {Deian Stefan
    and Alejandro Russo
    and Pablo Buiras
    and Amit Levy
    and John C. Mitchell
    and David Mazi{\`e}res},
  title = {Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems},
  booktitle = {Proceedings of the International Conference on Functional Programming (ICFP)},
  shortbooktitle = {ICFP},
  year = {2012},
  publisher = {ACM},
  url = {http://www.cse.chalmers.se/~russo/publications_files/icfp2012.pdf}
}

More information about concurrent LIO:
http://www.scs.stanford.edu/~deian/concurrent_lio/

*** Buiras, Stefan, Russo /On Dynamic Flow-sensitive Floating-Label Systems/

@inproceedings{BuirasSR14,
  title     = {On Dynamic Flow-sensitive Floating-Label Systems},
  author    = {Pablo Buiras and
               Deian Stefan and
               Alejandro Russo},
  booktitle = {Computer Security Foundations Symposium},
  shortbooktitle = {CSF},
  month     = jul,
  year      = {2014},
  publisher = {IEEE},
  url = {http://www.scs.stanford.edu/~deian/pubs/buiras:2014:on-dynamic.pdf},
}

*** Giffin et. al., /HAILS: Protecting Data Privacy in Untrusted Web Applications/

@inproceedings{giffin:2012:hails,
  title        = {Hails: Protecting Data Privacy in Untrusted Web Applications},
  author       = {Daniel B. Giffin and
                  Amit Levy and
                  Deian Stefan and
                  David Terei and
                  David Mazi{\`e}res and
                  John Mitchell and
                  Alejandro Russo },
  booktitle    = {10th Symposium on Operating Systems Design and Implementation (OSDI)},
  pages        = {47-60},
  year         = 2012,
  organization = {USENIX},
  url = {http://www.scs.stanford.edu/~deian/pubs//giffin:2012:hails.pdf}
}


*** Austin et at. /A Functional View of Imperative Information Flow/

@inproceedings{AustinFA12,
  author    = {Thomas H. Austin and
               Cormac Flanagan and
               Mart\'{\i}n Abadi},
  title     = {A Functional View of Imperative Information Flow},
  booktitle = {10th Asian Symposium on Programming Languages and Systems (APLAS)},
  pages     = {34-49},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7705},
  year      = {2012},
  isbn      = {978-3-642-35181-5},
  ee        = {http://dx.doi.org/10.1007/978-3-642-35182-2_4},
  url       = {http://www.soe.ucsc.edu/research/technical-reports/ucsc-soe-12-15},
}

CH: Thanks for the paper Greg, it looks very interesting.  There is
something scary about it though: they have both public labels and
automatic pc restoring. My intuition is that you can't have this in a
sound system. The usual conterexample needs 3 labels though (low,
high, top) while their system only has 2 (low and high). So could it
really be that they only retain soundness because they don't have a
3rd label?  (this would be very brittle)
CH: They seem to be aware of this

** Hybrid (dynamic + static oracle)
*** Guernic, Banerjee, Jensen, Schmidt /Automata-Based Confidentiality Monitoring/

@inproceedings{GuernicBJS06,
  author    = {Gurvan Le Guernic and
               Anindya Banerjee and
               Thomas P. Jensen and
               David A. Schmidt},
  title     = {Automata-Based Confidentiality Monitoring},
  booktitle = {11th Asian Computing Science Conference},
  seried    = {ASIAN 2006},
  year      = {2006},
  pages     = {75-89},
  ee        = {http://dx.doi.org/10.1007/978-3-540-77505-8_7},
  publisher = {Springer},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://hal.inria.fr/docs/00/13/02/10/PDF/automatonBasedNiMonitoring.pdf},
}

Although it got published at a crappy place, this is the paper that
started the whole sound dynamic information flow control craze.

*** Moore, Chong /Static Analysis for Efficient Hybrid Information-Flow Control/

@inproceedings{MooreC11,
  author    = {Scott Moore and
               Stephen Chong},
  title     = {Static Analysis for Efficient Hybrid Information-Flow Control},
  booktitle = {Proceedings of the 24th Computer Security Foundations
               Symposium},
  series    = {CSF},
  year      = {2011},
  pages     = {146-160},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSF.2011.17},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://people.seas.harvard.edu/~chong/pubs/csf11_hybrid_monitors.pdf},
}

Has a very good related work section with the hybrid approaches

*** Just, Cleary, Shirley, Hammer /Information Flow Analysis for JavaScript/

@misc{JustCSH11,
  title = {Information Flow Analysis for {JavaScript}},
  author = {Seth Just and Alan Cleary and Brandon Shirley and Christian Hammer},
  howpublished = {PLASTIC'11},
  year = 2011,
  url = {http://plastic.host.adobe.com/plastic8.pdf}
}

Hybrid analysis for JavaScript
They can handle eval
They don't handle exceptions
No non-interference proof (yet? it's just a workshop paper)

** Semantic


@Article{sabelfeld01:_per_model_secur_infor_flow,
  author =       {Andrei Sabelfeld and David Sands},
  title =        {A {PER} Model of Secure Information Flow in Sequential Programs},
  journal =      {Higher-Order and Symbolic Computation},
  year =         2001,
  volume =    14,
  number =    1,
  pages =     {59--91},
  url =  {http://www.cse.chalmers.se/~andrei/hosc.ps}
}

** Implicit flows
*** Russo et al,     /Implicit flows in malicious and nonmalicious code/

Implicit flows in malicious and nonmalicious code
Alejandro RUSSO, Andrei SABELFELD, and Keqin LI

  - [[reading:russo-marktoberdorf.pdf][local copy]]
  - http://www.cse.chalmers.se/%7Erusso/publications_files/marktoberdorf.pdf

*** King, Hicks, Hicks, Jaeger /Implicit Flows: Can't Live with 'Em, Can't Live without 'Em/

  - http://www.cse.psu.edu/~dhking/papers/iciss08.pdf

@inproceedings{KingHHJ08,
  author    = {Dave King and
               Boniface Hicks and
               Michael Hicks and
               Trent Jaeger},
  title     = {Implicit Flows: Can't Live with 'Em, Can't Live without 'Em},
  booktitle = {4th International Conference on Information Systems Security},
  series = {ICISS},
  year      = {2008},
  pages     = {56-70},
  url = {http://www.cs.umd.edu/~mwh/papers/king08implicit.html},
  ee        = {http://dx.doi.org/10.1007/978-3-540-89862-7_4},
  bibsource = {DBLP, http://dblp.uni-trier.de},
}

89% of their measured true information flow leaks were implicit flows
845/870 of their false alarms are due to conservative handling of exceptions

** Information flow and schedulers

*** Harrison, Hook /Achieving Information Flow Security through Precise Control of Effects/

@InProceedings{harrison05:infor_flow_secur_control_effects,
  author = 	 {Harrison, William and Hook, James},
  title = 	 {Achieving Information Flow Security Through Precise Control of Effects},
  booktitle = {Proceedings of the 18th Computer Security Foundations Workshop (CSFW)},
  pages = 	 {16--30},
  year = 	 2005,
  address = 	 {Aix-en-Provence, France},
  month = 	 {June},
  url = {http://www.cs.missouri.edu/~harrison/papers/csfw05.pdf}
}

*** Russo, Sabelfeld /Securing Interaction between Threads and the Scheduler/

BM:
- Cooperative scheduling.
- If no yield and no fork in high contexts, and if there are enough yields,
  then termination-insensitive non-interference holds.
- If, in addition to all this, there is no infinite loop in high contexts,
  then termination-sensitive non-interference holds.
- This seems to restrictive in practice.

@InProceedings{russo06:secur_inter_threads_scheduler,
  author = 	 {Russo, Alejandro and Sabelfeld, Andrei},
  title = 	 {Securing Interaction between Threads and the Scheduler},
  booktitle = {Proceedings of the 19th Computer Security Foundations Workshop},
  year = 	 2006,
  address = 	 {Venice, Italy},
  month = 	 {July},
  publisher =    {IEEE Computer Society},
  url = {http://www.cse.chalmers.se/~andrei/russo-sabelfeld-csfw06.pdf}
}

*** Russo, Sabelfeld /Securing Interaction between Threads and the Scheduler in the Presence of Synchronization/

BM:
- Preemptive scheduling. It is worth the reading.
- Prevents the preemption of threads in a high context (protected with
  'hide' and 'unhide').
- 'fork' and 'hfork' to create low or high threads.
- When the scheduler is in a high mode, only high threads can execute.
- Moving a thread from the low pool to the high pool (and conversely)
  is explicit.
- Only threads in the high pool can branch on high data. (and
  similarly for while loops with high guards)
- The generalization to multi-level security does not look usable in practice.
- I do not really understand the definitions for non-interference:
  small-step for the scheduler, big-step for programs. Theorem 1 p. 18
  is unreadable and not explained...
- Extensions with synchronization primitives are considered.

@Article{russo09:secur_inter_thread_sched_synchro,
  author = 	 {Russo, Alejandro and Sabelfeld, Andrei},
  title = 	 {Securing Interaction between Threads and the Scheduler in the Presence of Synchronization},
  journal = 	 {Journal of Logic and Algebraic Programming},
  year = 	 2009,
  volume = 	 78,
  number = 	 7,
  pages = 	 {593--618},
  month = 	 {August},
  publisher =    {Elsevier},
  url = {http://www.cse.chalmers.se/~andrei/russo-sabelfeld-jlap.pdf}
}

*** Russo, Barth, Rezk, Sabelfeld /Security of Multithreaded Programs by Compilation/

BM:
- Very interesting!
- Security-type-preserving compiler: no need to trust the compiler.
- Source-level policies are translated to low-level policies.
- Commands are inserted by the compiler to "protect" high threads:
  disallow some interleavings in order to preserve non-interference.
- Dangerous threads are threads that become high and may become low
  again: as long as they are high, low processes must not be
  executed. Processes that always stay high allow the execution of
  other threads, even if they are low.

@InProceedings{russo07:sec_multithread_compil,
  author =       {Alejandro Russo and Gilles Barth and Tamara Rezk and Andrei Sabelfeld},
  title =        {Security of Multithreaded Programs by Compilation},
  booktitle = {Proceedings of the 10th European Symposium on Research in Computer Security (ESORICS)},
  year =      2007,
  series =    {LNCS},
  address =   {Dresden, Germany},
  month =     {September},
  publisher = {Springer-Verlag},
  url = {http://www.cse.chalmers.se/%7Erusso/publications_files/esorics07.pdf}
}

*** Russo, Sabelfeld, Hughes, Naumann /Closing Internal Timing Channels by Transformation/

@InProceedings{russo06:intern_timing_chn_transf,
  author =       {Alejandro Russo and Andrei Sabelfeld and John Hughes and David Naumann},
  title =        {Closing Internal Timing Channels by Transformation},
  booktitle = {Proceedings of the 11th Annual Asian Computing Science Conference},
  year =      2006,
  series =    {LNCS},
  address =   {Tokyo, Japan},
  month =     {December},
  publisher = {Springer-Verlag},
  url = {http://www.cse.chalmers.se/%7Erusso/publications_files/ASIAN06.ps}
}

*** Zhang, Askrarov, Myers /Language-Based Control and Mitigation of Timing Channels/

Language-Based Control and Mitigation of Timing Channels
Danfeng Zhang, Aslan Askarov, and Andrew C. Myers

To appear in PLDI 2012

ABSTRACT: We propose a new language-based approach to mitigating timing
channels. In this language, well-typed programs provably leak only a bounded
amount of information over time through external timing channels. By
incorporating mechanisms for predictive mitigation of timing channels, this
approach also permits a more expressive programming model. Timing channels
arising from interaction with underlying hardware features such as
instruction caches are controlled. Assumptions about the underlying hardware
are explicitly formalized, supporting the design of hardware that
efficiently controls timing channels. One such hardware design is modeled
and used to show that timing channels can be controlled in some simple
programs of real-world significance.

*** Mantel and Sudbrock /Flexible Scheduler-Independent Security/

@InProceedings{mantel10:flexib_sched_indep_secur,
  author =       {H. Mantel and H. Sudbrock},
  title =        {Flexible Scheduler-Independent Security},
  booktitle = {Proceedings of the 15th European Symposium on
                  Research in Computer Security (ESORICS)},
  pages =     {116--133},
  year =      2010,
  series =    {LNCS},
  publisher = {Springer},
  url = {http://www.mais.informatik.tu-darmstadt.de/WebBibPHP/papers/2010/WebversionMantelSudbrock.pdf}
}

** Nondeterministic Information Flow

*** Ryan and Schneider, /Process Algebra and Non-Interference/

@article{RyanS01,
  author    = {Peter Y. A. Ryan and
               Steve A. Schneider},
  title     = {Process Algebra and Non-Interference},
  journal   = {Journal of Computer Security},
  shortjournal = {JCS},
  volume    = {9},
  number    = {1/2},
  year      = {2001},
  pages     = {75-103},
  ee        = {http://iospress.metapress.com/content/bq4nhhanaf6mpxeg/},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://epubs.surrey.ac.uk/1926/1/fulltext.pdf}
}

They define the definition of non-interference used to prove the
soundness of a model of Flume.

*** Zakinthinos and Lee,   /General Theory of Security Properties/

A General Theory of Security Properties (1997)
by Aris Zakinthinos , E.S. Lee
In Proceedings of the IEEE Symposium on Security and Privacy

   - recommended by Steve Z.

*** Mantel,   /Possibilistic definitions of security – an assembly kit/

Possibilistic definitions of security – an assembly kit (2000)
by Heiko Mantel

   - recommended by Steve Z.
   - supercedes Zakinthinos&Lee, it seems

*** Le Guernic /Automaton-based Confidentiality Monitoring of Concurrent Programs/

@InProceedings{Guernic07,
  author =       {Gurvan Le Guernic},
  title =        {Automaton-based Confidentiality Monitoring of Concurrent Programs},
  booktitle = {20th  Computer Security Foundations Symposium},
  series = {CSF},
  publisher = {{IEEE} Computer Society},
  year =      2007,
  pages     = {218-232},
  ee = {http://portal.acm.org/citation.cfm?id=1270653},
  url = {http://hal.inria.fr/docs/00/16/10/19/PDF/abnim_concurrent.pdf}
}

Long version at:
http://santos.cis.ksu.edu/schmidt/abnimConcurrent_report.pdf

*** Mantel, Sands, Sudbrock /Assumptions and Guarantees for Compositional Noninterference/

@inproceedings{MantelSS11,
  author    = {Heiko Mantel and
               David Sands and
               Henning Sudbrock},
  title     = {Assumptions and Guarantees for Compositional Noninterference},
  booktitle = {Proceedings of the 24th Computer Security Foundations
               Symposium},
  year      = {2011},
  pages     = {218-232},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSF.2011.22},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url = {http://www.mais.informatik.tu-darmstadt.de/WebBibPHP/papers/2011/2011-CSF-MantelSandsSudbrock-AssumptionsAndGuaranteesForCompositionalNoninterference.pdf}
}

*** Lux, Manter, Perner /Scheduler-Independent Declassification/

@inproceedings{LuxMP12,
  author    = {Alexander Lux and
               Heiko Mantel and
               Matthias Perner},
  title     = {Scheduler-Independent Declassification},
  booktitle = {11th International
               Conference on Mathematics of Program Construction (MPC)},
  year      = {2012},
  pages     = {25-47},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7342},
  ee        = {http://dx.doi.org/10.1007/978-3-642-31113-0_4},
}

@article{Chase1994,
author = {Jeffrey S. Chase and Henry M. Levy and Michael J. Feeley and Edward D. Lazowska},
title = {Sharing and Protection in a Single Address-Space Operating System},
journal = {ACM Transactions on Computer Systems},
volume = {12},
number = {4},
year = {1994}
}



*** Rafnsson, Hedin, Sabelfeld /Securing Interactive Programs/

@inproceedings{RafnssonHS12,
  author = {Willard Rafnsson and Daniel Hedin and Andrei Sabelfeld},
  title = {Securing Interactive Programs},
  booktitle = {25th Computer Security Foundations Symposium},
  series= {CSF 2012},
  year = {2012},
  url = {http://www.cse.chalmers.se/~andrei/interaction-csf12.pdf}
}

Abstract:
This paper studies the foundations of information flow
security for interactive programs. Previous research assumes
that the environment is total, that is, it must always be
ready to feed new inputs into programs. However, programs
secure under this assumption can leak the presence of input.
Such leaks can be magnified to whole-secret leaks in the
concurrent setting. We propose a framework that generalizes
previous research along two dimensions: first, the framework
breaks away from the totality of the environment and, second,
the framework features fine-grained security types for communication
channels, where we distinguish between the security
level of message presence and message content. We show that
the generalized framework features appealing compositionality
properties: parallel composition of secure program results in a
secure thread pool. We also show that modeling environments
as strategies leads to strong compositionality: various types
of composition (with and without scoping) follow from our
general compositionality result. Further, we propose a type
system that supports enforcement of security via fine-grained
security types.

** Integrity

*** Biba

[[reading:biba75.pdf][local copy]]


@inproceedings{DBLP:tibkat_186863748,
   author              = {K. J. Biba},
   title               = {Integrity considerations for secure computer systems},
   year                = {1977},
}

@techreport{Biba77,
author = {K. J. Biba},
title = {Integrity Considerations for Secure Computer Systems},
year = {1977},
month = apr,
number = {ESD-TR-76-372, MTR-3154 Rev 1},
institution =  {Mitre},
checked = {Checked against scanned copy from http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA039324}
}

*** Li, Mao, Zdancewic /Information Integrity Policies/

@InProceedings{li03:information_integrity,
  author = 	 {Peng Li and Yun Mao and Steve Zdancewic},
  title = 	 {Information Integrity Policies},
  booktitle = {Proceedings of the Workshop on Formal Aspects in Security {\&} Trust (FAST)},
  year = 	 2003,
  month = 	 {September},
  url = {http://www.cis.upenn.edu/~stevez/papers/LMZ03.pdf},
  keywords = {integrity policies}
}

BCP: We read this in the TOS group in 3/12.  It makes some very interesting
claims about different sorts of integrity and the relationships between
them, but overall we found it frustratingly informal and a bit unfocused.

*** Birgisson, Russo, Sabelfeld /Unifying Facets of Information Integrity/

@InProceedings{birgisson10:unifying_integrity,
  author = 	 {Arnar Birgisson and Alejandro Russo and Andrei Sabelfeld},
  title = 	 {Unifying Facets of Information Integrity},
  booktitle = {Proceedings of the International Conference on Information Systems Security (ICISS)},
  year = 	 2010,
  address = 	 {Gandhinagar, India},
  month = 	 {December},
  publisher = {LNCS, Springer-Verlag},
  url = {http://www.cse.chalmers.se/~andrei/iciss10.pdf}
}

ABSTRACT: Information integrity is a vital security property in a variety of
applications.  However, there is more than one facet to integrity:
interpretations of integrity in different contexts include integrity via
information flow, where the key is that trusted output is independent from
untrusted input, and integrity via invariance, where the key is preservation
of an invariant. Furthermore, integrity via invariance is itself
multi-faceted. For example, the literature features formalizations of
invariance as predicate preservation (predicate invariance), which is not
directly compatible with invariance of memory values (value invariance).
This paper offers a unified framework for integrity policies that include
all of the facets above. Despite the different nature of these facets, we
show that a straightforward enforcement mechanism adapted from the
literature is readily available for enforcing all of the integrity facets at
once.

*** Louw, Ganesh, Venkatakrishnan /AdJail: Practical Enforcement of Confidentiality and Integrity Policies on Web Advertisements/

  - [[reading:adjail-usenix-sec2010.pdf][local copy]]

@inproceedings{Louw:2010:APE:1929820.1929852,
  author = {Louw, Mike Ter and Ganesh, Karthik Thotta and Venkatakrishnan, V. N.},
  title = {AdJail: practical enforcement of confidentiality and integrity policies on web advertisements},
  booktitle = {Proceedings of the 19th USENIX conference on Security},
  series = {USENIX Security},
  year = {2010},
  isbn = {888-7-6666-5555-4},
  location = {Washington, DC},
  url = {http://www.usenix.org/events/sec10/tech/full_papers/TerLouw.pdf},
  acmid = {1929852},
  publisher = {USENIX Association},
}

** Termination-sensitivity
*** Askarov, Hunt, Sabelfeld, Sands /Termination-Insensitive Noninterference Leaks More Than Just a Bit/

@InProceedings{askarov08:TINI_leaks_more_than_1_bit,
  author = 	 {Askarov, Aslan and Hunt, Sebastian and Sabelfeld, Andrei and Sands, David},
  title = 	 {Termination-Insensitive Noninterference
     Leaks More Than Just a Bit},
  booktitle = {13th European Symposium on Research in Computer Security (ESORICS)},
  shortbooktitle = {ESORICS},
  year = 	 2008,
  volume = 	 5283,
  series = 	 {LNCS},
  address = 	 {Malaga, Spain},
  month = 	 oct,
  publisher = {Springer-Verlag},
  url = {http://www.cse.chalmers.se/~andrei/esorics08.pdf}
}

*** Demange, Sands /All Secrets Great and Small/
@InProceedings{Demange:Sands:ESOP09,
  author = {D. Demange and David Sands},
  title = {{All Secrets Great and Small}},
  booktitle = {18th European Symposium on Programming (ESOP)},
  pages = {207--221},
  year = 2009,
  number = 5502,
  series = {LNCS},
  url = {http://www.cse.chalmers.se/~dave/papers/DemangeSandsESOP09.pdf},
  publisher = {Springer Verlag},
}

** Declassification and information flow

*** Chong and Myers, /Security policies for downgrading/

@inproceedings{ChongM04,
  author    = {Stephen Chong and
               Andrew C. Myers},
  title     = {Security policies for downgrading},
  booktitle = {Proceedings of the 11th ACM Conference on
               Computer and Communications Security},
  year      = {2004},
  pages     = {198-209},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/1030083.1030110},
  url       = {http://www.cs.cornell.edu/andru/papers/decl-policy.pdf},
}

*** Askarov, Sabelfeld /Gradual Release: Unifying Declassification, Encryption and Key Release Policies/

@InProceedings{askarov07:gradual_release,
  author = 	 {Aslan Askarov and Andrei Sabelfeld},
  title = 	 {Gradual Release: Unifying Declassification, Encryption and Key Release Policies},
  booktitle = {Proceedings of the Symposium on Security and Privacy},
  year = 	 2007,
  month = 	 {May},
  url = {http://www.cse.chalmers.se/~andrei/askarov-sabelfeld-sp07.pdf}
}

*** Banerjee, Naumann, Rosenberg /Expressive Declassification Policies and Modular Static Enforcement/

@InProceedings{banerjee08:expressive_declassification,
  author = {Banerjee, Anindya and Naumann, David A. and Rosenberg, Stan},
  title = {Expressive Declassification Policies and Modular Static Enforcement},
  booktitle = {Proceedings of the Symposium on Security and Privacy},
  year = 2008,
  isbn = {978-0-7695-3168-7},
  pages = {339--353},
  numpages = 15,
  doi = {10.1109/SP.2008.20},
  acmid = 1398031,
  publisher = {IEEE Computer Society},
  address = {Washington, DC, USA},
  keywords = {information flow, downgrading, declassification, verification},
  url = {http://www.cs.stevens-tech.edu/~naumann/publications/SIT-TR-2007-04.pdf}
}

*** Myers, Sabelfeld, Zdancewic /Enforcing Robust Declassification and Qualified Robustness/

@Article{andrew06:robust_declassification,
  author = 	 {Andrew C. Myers, Andrei Sabelfeld, and Steve Zdancewic},
  title = 	 {Enforcing Robust Declassification and Qualified Robustness},
  journal = 	 {Journal of Computer Security},
  year = 	 2006,
  volume = 	 14,
  number = 	 2,
  pages = 	 {157--196},
  url = {http://www.cis.upenn.edu/~stevez/papers/MSZ06.pdf}
}

*** Chong, Myers /Decentralized robustness/

@InProceedings{chong06:decentralized_robustness,
  author={Chong, S. and Myers, A.C.},
  booktitle={Proceedings of the 19th Computer Security Foundations Workshop (CSFW)},
 title={Decentralized robustness},
  year=2006,
  pages={12 pp. -256},
  keywords={complex security requirements;computing system security;decentralized label model;decentralized robustness;fine-grained reasoning;mutual distrust;program checking;robustness requirements;robustness static checking;security-typed languages;sound approximations;system robustness;program diagnostics;security of data;},
  doi={10.1109/CSFW.2006.11},
  ISSN={1063-6900},
  url = {http://people.seas.harvard.edu/~chong/pubs/csfw06_decentralized_robustness.pdf}
}

*** Askarov, Myers /A semantic framework for declassification and endorsement/

@InProceedings{askarov10:semantic_declassification,
  author =       {Askarov, Aslan and Myers, Andrew C.},
  title =        {A semantic framework for declassification and endorsement},
  booktitle = {19th European Symposium on Programming (ESOP)},
  year =      2010,
  month =     {March},
  url = {http://www.cs.cornell.edu/andru/papers/robknowledge.pdf}
}

*** Sands, Sabelfeld /Dimensions and principles of declassification/


@InProceedings{sabelfeld05:_dimensions_declass,
  author =       {Andrei Sabelfeld and David Sands},
  title =        {Dimensions and principles of declassification},
  booktitle = {Computer Security Foundations 18th Workshop},
  pages =     {255-269},
  year =      2005,
  publisher =    {IEEE},
  month =     {June},
  url = {http://www.cse.chalmers.se/~dave/papers/sabelfeld-sands-CSFW05.pdf}
}

*** Heiko Mantel, David Sands /Controlled declassification based on intransitive noninterference/



@InProceedings{mantel04:_intransitive_non_interference,
  author =       {Heiko Mantel and David Sands},
  title =        {Controlled declassification based on intransitive noninterference},
  booktitle = {Proc. Asian Symp. on Programming Languages and Systems},
  pages =     {129--145},
  year =      2004,
  series =    {LNCS},
  publisher = {Springer-Verlag},
  url = {http://www.cse.chalmers.se/~dave/papers/Mantel-Sands-TR04.pdf}
}

*** Askarov and Sabelfeld /Tight Enforcement of Information-Release Policies for Dynamic Languages/

@inproceedings{AskarovS09b,
  author    = {Aslan Askarov and
               Andrei Sabelfeld},
  title     = {Tight Enforcement of Information-Release Policies for Dynamic
               Languages},
  booktitle = {22nd IEEE Computer Security Foundations
               Symposium (CSF)},
  shortbooktitle = {CSF},
  pages     = {43-59},
  publisher = {IEEE Computer Society},
  year      = {2009},
  isbn      = {978-0-7695-3712-2},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSF.2009.22},
  url       = {http://www.cse.chalmers.se/~andrei/askarov-sabelfeld-csf09.pdf},
}
Long version: http://www.cs.cornell.edu/~aslan/tsec.pdf

- termination [+error] insensitive: purely dynamically
- termination [+error?] sensitive: hybrid (on the fly static analysis)
  + on branching instructions the monitor receives the code of both
    branches and does [vanilla] static analysis on them
- focusing on the what and the where aspects of declassification
  (declassify construct = escape hatch)
  + bad: their policy is not manifest; it's just some set of
    declassify instructions in the code
    - they discuss manifest declassification policies in related work;
      I think having the policies manifest is useful not just for
      untrusted code, but also for simplifying audit of potentially
      buggy code
  + bad: their policy is about the _initial_ values of variables,
    while the semantics is about the current values ... WTF? It seems
    that they are mixing two different things in a horrible way!
    + they are basically assuming that declassified expressions are
      over unchanged variables; in the termination-sensitive case
      they make this assumption explicitly
    + discussion on pg 3-4 not convincing at all; their example is
      unrealistic shows that things can be swapped around, but that's
      just a completely useless corner-case
    + bad: strong assumption that the secrets exist in the system
      from the beginning of time, and can't be dynamically introduced
    + Banerjee et al. [S&P 2008] have "the right" semantics for
      declassify (in the static world) -- i.e. one declassifies the
      present value of variables, not their initial value
- knowledge-based non-interference formulation
  + extension of Askarov et al, ESORICS 2008 to declassification
  + "A useful feature of the condition is that it is defined per
    individual run of a program, which makes it amenable for runtime
    monitoring." -- I never really bought this argument, the second
    run is simply hidden in the definition of knowledge
  + still I think the knowledge-based formulation is useful when
    talking about the where and when aspects of declassification
- they have 2 kinds if events:
  + "low events" - which are updates to low variables; this is
    just instrumentation used to define non-interference
  + "monitor events" - which are what they write on their small-step
    arrows, and model communication between the program and an
    external security monitor [see discussion about this in
    verif/notes/catalin-notes.org]
    + basically in their structured code worked the pc would always be
      the join of all levels on the stack; just that having a pc
      wouldn't eliminate the need to have a stack -- the only
      advantage would be performance (no need to join the whole stack
      all the time)
- flow-insensitive analysis, the labels of variables are fixed
- they start with no outputs, no inputs (just batch processing),
  but in sec 4 they add "communication primitives"
  + TODO: skipped this part on first read, return to it
- no error handling, stop-the-world assumption
  - the monitor prevents implicit flows by collapsing the implicit-flow
    channel into the termination channel
- tons of other simplifying assumptions (2 labels, expressions only X
  op Y, etc, etc)
- CONCLUSION: there are some interesting ideas in here; it's an
  interesting paper despite the various limitations
- TODO: the discussion about the "relation to gradual and localized
  delimited release" seems interesting; skipped this time

** Fable / Fine

*** Swamy, Chen, Chugh, /Enforcing Stateful Authorization and Information Flow Policies in Fine/

@InProceedings{swamy10:fine,
  author = {Nikhil Swamy and Juan Chen and Ravi Chugh},
  booktitle = {Proceedings of the European Symposium on Programming (ESOP)},
  year = {2010},
  title = {Enforcing Stateful Authorization and Information Flow Policies in Fine},
  url = {http://research.microsoft.com/~nswamy/papers/fine-esop.pdf}
}

*** Swamy, Corcoran, Hicks /Fable: A Language for Enforcing User-defined Security Policies/

@InProceedings{swamy08:fable,
  author =       {Nikhil Swamy and Brian Corcoran and Michael Hicks},
  title =        {Fable: A Language for Enforcing User-defined Security Policies},
  booktitle = {Proceedings of the Symposium on Security and Privacy (Oakland)},
  pages =     {369--383},
  year =      2008,
  month =     {May},
  url = {http://www.cs.umd.edu/~mwh/papers/fable.pdf}
}


*** Chargueraud, /Functional translation of a calculus of capabilities/
 - This is just related
@article{chargueraud2008functional,
  title={Functional translation of a calculus of capabilities},
  author={Chargu{\'e}raud, A. and Pottier, F.},
  journal={ACM SIGPLAN Notices},
  volume={43},
  number={9},
  pages={213--224},
  year={2008},
  publisher={ACM},
  abstract={Reasoning about imperative programs requires the ability to track aliasing and ownership properties. We present a type system that provides this ability, by using regions, capabilities, and singleton types. It is designed for a high-level calculus with higher-order functions, algebraic data structures, and references (mutable memory cells). The type system has polymorphism, yet does not require a value restriction, because capabilities act as explicit store typings. We exhibit a type-directed, type-preserving, and meaning-preserving translation of this imperative calculus into a pure calculus. Like the monadic translation, this is a store-passing translation. Here, however, the store is partitioned into multiple fragments, which are threaded through a computation only if they are relevant to it. Furthermore, the decomposition of the store into fragments can evolve dynamically to reflect ownership transfers. The translation offers deep insight about the inner workings and soundness of the type system. If coupled with a semantic model of its target calculus, it leads to a semantic model of its imperative source calculus. Furthermore, it provides a foundation for our longterm objective of designing a system for specifying and certifying imperative programs with dynamic memory allocation.}
}

** In Haskell

*** Li, Zdancewic, /Encoding Information Flow in Haskell/

@InProceedings{li06:encod_inform_flow_haskell,
  author =       {Peng Li and Steve Zdancewic},
  title =        {Encoding Information Flow in Haskell},
  booktitle = {Proceedings of 19th Computer Security Foundations Workshop},
  pages =     {16-27},
  year =      2006,
  publisher = {{IEEE} Computer Society Press},
  url = {http://www.cis.upenn.edu/~stevez/papers/LZ06a.pdf}
}

*** Tsai, Russo, Hughes /A Library for Secure Multi-threaded Information Flow in Haskell/

@InProceedings{tsai07:library_multi_infor_flow_haskell,
 author = {Tsai, Ta-chung and Russo, Alejandro and Hughes, John},
 title = {A Library for Secure Multi-threaded Information Flow in Haskell},
 booktitle = {Proceedings of the 20th Computer Security Foundations Symposium},
 year = 2007,
 isbn = {0-7695-2819-8},
 pages = {187--202},
 numpages = 16,
 url = {http://www.cse.chalmers.se/%7Erusso/publications_files/tsai-russo-hughesCSF.ps},
 doi = {10.1109/CSF.2007.6},
 acmid = 1270651,
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
}

*** Russo, Claessen, Hughes /A Library for Light-Weight Information-Flow Security in Haskell/

@InProceedings{russo08:IF_haskell,
 author = {Alejandro Russo and Koen Claessen and John Hughes},
 title = {A library for light-weight information-flow security in {Haskell}},
 booktitle = {Haskell},
 year = 2008,
 pages = {13--24},
 doi = {10.1145/1411286.1411289},
 masid = 6607401,
 url = {http://www.cse.chalmers.se/~russo/publications_files/haskell22Ext-russo.pdf},
}

*** Devriese, Piessens /Information flow enforcement in monadic libraries/

@inproceedings{Devriese:2011:IFE:1929553.1929564,
 author = {Devriese, Dominique and Piessens, Frank},
 title = {Information flow enforcement in monadic libraries},
 booktitle = {Proceedings of the 7th Workshop on Types in Language Design and Implementation},
 series = {TLDI},
 year = {2011},
 isbn = {978-1-4503-0484-9},
 location = {Austin, Texas, USA},
 pages = {59--72},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/1929553.1929564},
 doi = {http://doi.acm.org/10.1145/1929553.1929564},
 acmid = {1929564},
 publisher = {ACM},
 keywords = {information flow enforcement, monad transformers, monads, parameterised monads},
}

*** Jaskelioff, Russo /Secure Multi-Execution in Haskell/

@Inproceedings{JaskeRusso:PSI:2011,
 address = {Akademgorodok, Novosibirsk, Russia},
 author = {Mauro Jaskelioff and Alejandro Russo},
 booktitle = {Proceedings of Andrei Ershov International Conference on Perspectives of System Informatics (PSI)},
 title = {Secure Multi-Execution in Haskell},
 year = {2011},
 url = {http://www.fceia.unr.edu.ar/~mauro/pubs/sme/sme.pdf}
}

@proceedings{DBLP:conf/nordsec/2011,
  editor    = {Peeter Laud},
  title     = {Information Security Technology for Applications - 16th
               Nordic Conference on Secure IT Systems, NordSec 2011, Tallinn,
               Estonia, October 26-28, 2011, Revised Selected Papers},
  booktitle = {NordSec},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7161},
  year      = {2012},
  isbn      = {978-3-642-29614-7},
  ee        = {http://dx.doi.org/10.1007/978-3-642-29615-4},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

** Multiexecution

@inproceedings{AustinF12,
  author    = {Thomas H. Austin and
               Cormac Flanagan},
  title     = {Multiple facets for dynamic information flow},
  booktitle = {Proceedings of the 39th Symposium on
               Principles of Programming Languages},
  series = {POPL},
  year      = {2012},
  pages     = {165-178},
  ee        = {http://doi.acm.org/10.1145/2103656.2103677},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://users.soe.ucsc.edu/~cormac/papers/popl12b.pdf}
}

** Taint tracking

*** Yin, Song, Egele, Kruegel, Kirda /Capturing System-wide Information Flow for Malware Detection and Analysis/
"each byte associated with a small data structure storing the original source of the taint and some other book
keeping information (which is necessary for generating taint graphs)"

@inproceedings{YinSEKK07,
  author    = {Heng Yin and
               Dawn Xiaodong Song and
               Manuel Egele and
               Christopher Kruegel and
               Engin Kirda},
  title     = {Panorama: capturing system-wide information flow for malware
               detection and analysis},
  booktitle = {Proceedings of the Conference on Computer and Communications Security},
  series = {CCS},
  year      = {2007},
  pages     = {116-127},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/1315245.1315261},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://iseclab.org/papers/ccs07_panorama.pdf},
}

@inproceedings{taint_policy_enforce_usenix_security2006,
 author = {Xu, Wei and Bhatkar, Sandeep and Sekar, R.},
 title = {Taint-enhanced policy enforcement: a practical approach to defeat a wide range of attacks},
 booktitle = {Proceedings of the 15th conference on USENIX Security Symposium - Volume 15},
 year = {2006},
 location = {Vancouver, B.C., Canada},
 url = {http://dl.acm.org/citation.cfm?id=1267336.1267345},
 acmid = {1267345},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA}
}

@inproceedings{Rushby1981,
author = {John Rushby},
month = {December},
year = {1981},
title = {{The Design and Verification of Secure Systems}},
booktitle = {8th ACM Symposium on Operating Systems Principles},
city = {Asilomar},
state = {CA},
pages = {12-21}
}

*** Enck, Gilbert, Chun, Jung, McDaniel, Seth, /TaintDroid: An Information-Flow Tracking System for Realtime Privacy Monitoring on Smartphones/

@inproceedings{EnckGCCJMS10,
  author    = {William Enck and
               Peter Gilbert and
               Byung-gon Chun and
               Landon P. Cox and
               Jaeyeon Jung and
               Patrick McDaniel and
               Anmol Sheth},
  title     = {{TaintDroid}: An Information-Flow Tracking System for Realtime
               Privacy Monitoring on Smartphones},
  booktitle = {OSDI},
  year      = {2010},
  pages     = {393-407},
  url        = {http://www.usenix.org/events/osdi10/tech/full_papers/Enck.pdf},
  crossref  = {DBLP:conf/osdi/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@proceedings{DBLP:conf/osdi/2010,
  editor    = {Remzi H. Arpaci-Dusseau and
               Brad Chen},
  title     = {9th USENIX Symposium on Operating Systems Design and Implementation,
               OSDI 2010,  October 4-6, 2010, Vancouver, BC, Canada, Proceedings},
  booktitle = {OSDI},
  publisher = {USENIX Association},
  year      = {2010},
  isbn      = {978-1-931971-79-9},
  ee        = {http://www.usenix.org/event/osdi10/tech/full_papers/osdi10_proceedings.pdf},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

*** Schwartz, Avgerinos, Brumley /All You Ever Wanted to Know about Dynamic Taint Analysis and Forward Symbolic Execution (but Might Have Been Afraid to Ask)/

@inproceedings{SchwartzAB10,
  author    = {Edward J. Schwartz and
               Thanassis Avgerinos and
               David Brumley},
  title     = {All You Ever Wanted to Know about Dynamic Taint Analysis
               and Forward Symbolic Execution (but Might Have Been Afraid
               to Ask)},
  booktitle = {Proceedings of the Symposium on Security and Privacy},
  year      = {2010},
  pages     = {317-331},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/SP.2010.26},
  crossref  = {DBLP:conf/sp/2010},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://users.ece.cmu.edu/~ejschwar/papers/oakland10.pdf}
}

@proceedings{DBLP:conf/sp/2010,
  title     = {31st IEEE Symposium on Security and Privacy, S{\&}P 2010,
               16-19 May 2010, Berleley/Oakland, California, USA},
  booktitle = {IEEE Symposium on Security and Privacy},
  publisher = {IEEE Computer Society},
  year      = {2010},
  isbn      = {978-0-7695-4035-1},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{HalfondOM06,
 author = {Halfond, William G. J. and Orso, Alessandro and Manolios, Panagiotis},
 title = {Using positive tainting and syntax-aware evaluation to counter SQL injection attacks},
 booktitle = {{Proceedings of the 14th ACM SIGSOFT International Symposium on Foundations of Software Engineering}},
 series = {SIGSOFT '06/FSE-14},
 year = {2006},
 isbn = {1-59593-468-5},
 location = {Portland, Oregon, USA},
 pages = {175--185},
 numpages = {11},
 url = {http://doi.acm.org/10.1145/1181775.1181797},
 doi = {10.1145/1181775.1181797},
 acmid = {1181797},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {SQL injection, dynamic tainting, runtime monitoring},
}
They use "positive tainting" to mark *trusted* data instead of untrasted -- I think I've seen it described as trademarking

@inproceedings{Egele07dynamicspyware,
 author = {Egele, Manuel and Kruegel, Christopher and Kirda, Engin and Yin, Heng and Song, Dawn},
 title = {Dynamic spyware analysis},
 booktitle = {2007 USENIX Annual Technical Conference on Proceedings of the USENIX Annual Technical Conference},
 series = {ATC'07},
 year = {2007},
 isbn = {999-8888-77-6},
 location = {Santa Clara, CA},
 pages = {18:1--18:14},
 articleno = {18},
 numpages = {14},
 url = {http://dl.acm.org/citation.cfm?id=1364385.1364403},
 acmid = {1364403},
 publisher = {USENIX Association},
 address = {Berkeley, CA, USA},
}

@inproceedings{Nentwich07cross-sitescripting,
author = {Florian
    Nentwich and Nenad Jovanovic and Engin Kirda and Christopher
    Kruegel and Giovanni Vigna},
title = {Cross-Site Scripting
    Prevention with Dynamic Data Tainting and Static Analysis},
booktitle = {In Proceeding of the Network and Distributed System
    Security Symposium (NDSS07)},
year = {2007}
}

They emphasize that no more than one bit needed.

Control-flow taint = implicit flow

*** Newsome, Song /Dynamic Taint Analysis for Automatic Detection, Analysis, and Signature Generation of Exploits on Commodity Software/

No implicit flows:
@inproceedings{NewsomeS05,
  author    = {James Newsome and
               Dawn Xiaodong Song},
  title     = {Dynamic Taint Analysis for Automatic Detection, Analysis,
               and Signature Generation of Exploits on Commodity Software},
  booktitle = {the Network and Distributed System Security
               Symposium (NDSS)},
  publisher = {The Internet Society},
  year      = {2005},
  ee        = {http://www.isoc.org/isoc/conferences/ndss/05/proceedings/papers/taintcheck.pdf},
  isbn      = {1-891562-20-7, 1-891562-19-3},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url = {http://valgrind.org/docs/newsome2005.pdf},
}

Technical report:
http://bitblaze.cs.berkeley.edu/papers/taintcheck-full.pdf

*** Jee et al /A General Approach for Efficiently Accelerating Software-based Dynamic Data Flow Tracking on Commodity Hardware/

No implicit flows
Tool (libdft): http://www.cs.columbia.edu/~vpk/research/libdft/
@inproceedings{JeePKGAK2012,
  title = {A General Approach for Efficiently Accelerating Software-based
    Dynamic Data Flow Tracking on Commodity Hardware},
  author = {Kangkook Jee and
             Georgios Portokalidis and
             Vasileios P. Kemerlis and
             Soumyadeep Ghosh and
             David I. August and
             Angelos D. Keromytis},
  booktitle = {Network and Distributed System Security
               Symposium (NDSS)},
  publisher = {The Internet Society},
  year = {2012},
  url = {http://nsl.cs.columbia.edu/papers/2012/tfa.ndss12.pdf},
}

*** Kemerlis et al /{libdft}: practical dynamic data flow tracking for commodity systems/

No implicit flows
Tool (libdft): http://www.cs.columbia.edu/~vpk/research/libdft/
@inproceedings{KemerlisPJK12,
  author    = {Vasileios P. Kemerlis and
               Georgios Portokalidis and
               Kangkook Jee and
               Angelos D. Keromytis},
  title     = {{libdft}: practical dynamic data flow tracking for commodity
               systems},
  booktitle = {8th International Conference on Virtual
               Execution Environments (VEE)},
  publisher = {ACM},
  year      = {2012},
  pages     = {121-132},
  ee        = {http://doi.acm.org/10.1145/2151024.2151042},
  isbn      = {978-1-4503-1176-2},
  url       = {http://nsl.cs.columbia.edu/papers/2012/libdft.vee12.pdf},
}
@Manual{i432_manual1981,
  title = 	 {Introduction to the {iAPX} 432 Architecture Manual},
  organization = {Intel Corporation},
  address =	 {Santa Clara, CA},
  year =	 1981
}

@misc{amd_v_2007,
title = {Virtualization and You: What AMD-V Means for the Developer},
author = {Justin Whitney},
month = {March},
day = {29},
year = {2007},
url = {http://developer.amd.com/documentation/articles/pages/3292007157.aspx}
}

*** Kang, McCamant, Poosankam, Song /DTA++: Dynamic Taint Analysis with Targeted Control-Flow Propagation/

@inproceedings{KangMPS11,
  author    = {Min Gyung Kang and
               Stephen McCamant and
               Pongsin Poosankam and
               Dawn Song},
  title     = {{DTA++}: Dynamic Taint Analysis with Targeted Control-Flow
               Propagation},
  booktitle = {Network and Distributed System Security
               Symposium (NDSS)},
  shortbooktitle = {NDSS},
  publisher = {The Internet Society},
  year      = {2011},
  ee        = {http://www.isoc.org/isoc/conferences/ndss/11/pdf/5_4.pdf},
  url = {http://www.andrew.cmu.edu/user/ppoosank/papers/dta++-ndss11.pdf},
}

- only some implicit flows -- the ones that could cause "under-taining"
- careful about diagnosing only those implicit
  flows that are likely to cause under-tainting
  + they prevent a "problem" they call over-tainting
    - we would probably just call that problem soundness-caused imprecision
  + their technique "introduces orders of magnitude less taint
    than when propagating taint for all implicit flows as in
    previous systems such as Dytan"
- focus: applying dynamic taint analysis to _benign_ applications
- "it is difficult to perform precise static analysis on binaries,
   because they lack many of the structures that were present in source"
- they call implicit flows everything that's not super dumb taint tracking
  "A more general concept of implicit flows would also include
   structures in which tainted data affects an array index or
   pointer: for instance, a table lookup when the table index is tainted."
- they use symbolic execution / testing to detect under-tainting due to
  implicit flows
- very fuzzy notion of what the right/desired amount of tainting is
  (they annotate that manually!)
  + by right they definitely don't mean "sound"
- applied to standard windows binaries; including to Word

*** Clause, Li, Orso /Dytan: a generic dynamic taint analysis framework/

@inproceedings{ClauseLO07,
  author    = {James A. Clause and
               Wanchun Li and
               Alessandro Orso},
  title     = {Dytan: a generic dynamic taint analysis framework},
  booktitle = {ACM/SIGSOFT International Symposium on
               Software Testing and Analysis (ISSTA)},
  shortbooktitle = {ISSTA},
  year      = {2007},
  pages     = {196-206},
  ee        = {http://doi.acm.org/10.1145/1273463.1273490},
  publisher = {ACM},
  isbn      = {978-1-59593-734-6},
  url       = {http://www.cc.gatech.edu/~orso/papers/clause.li.orso.ISSTA07.pdf},
}

- They claim to do full implicit flows on x86 executables
  + they can trade off precision for efficiency, and they
    evaluate how much tracking implicit flows costs
  + SEE LIMITATIONS BELOW
- General framework for dynamic tainting that
  (1) is highly flexible and customizable,
  (2) allows for performing both data-flow and control-flow based
      tainting conservatively, and
  (3) does not rely on any customized runtime system
- Improves previous work which was
  + ad-hoc
  + not dealing with implicit flows (tainting due to control flow)
  + a single taint marking or a small, fixed number of markings
  + couldn't propagate taint markings in a truly conservative way??
- Tool seems not available (30x-50x time; 240x space)
- Huge overhead (unoptimized): "The time overhead we measured for
  data-flow based propagation alone was approximately 30x, whereas the
  overhead imposed by control and data-flow based propagation was
  approximately 50x."; "The resulting space overhead is approximately 240x."
- TODO: have a better look at section 4.2.3:
  Control-flow Based Taint Propagation

LIMITATION:
"The presented approach is safe under the assumption that
we can analyze the binary code on which we are performing dynamic
tainting and conservatively (1) build CFGs for the procedures in the
code and (2) identify which memory locations are accessed by each
instruction. Unfortunately, this assumption is often unmet due to the
inherent difficulties in analyzing binary code, especially in the
presence of indirect branches and indirect memory accesses.  handling
these issues requires dynamic updating, complex and often overly
conservative analysis techniques [2], or additional knowledge about
the compiler used to create the binary [4]. To simplify our initial
implementation of the approach, we are currently limiting our tool to
statically identiﬁable memory locations, similarly to Masri and
colleagues [13]."

*** Masiri, Podgurski, Leon /Detecting and Debugging Insecure Information Flows/

@inproceedings{MasriPL04,
  author    = {Wes Masri and
               Andy Podgurski and
               David Leon},
  title     = {Detecting and Debugging Insecure Information Flows},
  booktitle = {International Symposium on Software Reliability
               Engineering (ISSRE)},
  shortbooktitle = {ISSRE},
  publisher = {IEEE Computer Society},
  year      = {2004},
  isbn      = {0-7695-2215-7},
  pages     = {198-209},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/ISSRE.2004.17},
  url       = {http://www.cs.aub.edu.lb/wm13/ISSRE2004.pdf},
}
- Static/dynamic analysis perspective: dynamic slicing
  + see SchwartzAB10 for a more recent survey of the area
- "Most" implicit flows via optional static preprocessing phase
   + not handling exceptions and halts
- Offline = high overhead
- prototype tool for Java byte code
- Seems parallel work wrt RIFLE
  - like RIFLE it has configurable
    (=after the fact) information flow policies
  - unlike RIFLE it does not require special hardware

*** Vachharajani et al, /RIFLE/

@inproceedings{rifle_micro2004,
	Author = {N. Vachharajani and M. J. Bridges and J. Chang and R. Rangan and G. Ottoni and J. A. Blome and G. A. Reis and M. Vachharajani and D. I. August},
	Booktitle = {37th International Symposium on Microarchitecture},
shortbooktitle = {MICRO},
	Title = {{RIFLE}: An Architectural Framework for User-Centric
        Information-Flow Security},
        url = {http://liberty.princeton.edu/Publications/micro37_rifle.pdf},
	Year = {2004}
}

Binary translation turns implicit into explicit flows.
Does some very heavy static analysis on the input program.

RIFLE hardware architecture only tracks explicit flows
- an information flow security (IFS) ISA (explicit flows only)
- The IFS ISA augments all state with space to store a label;
  this includes augmenting both registers and memory
- each instruction in the IFS ISA will use the augmented
  state to track explicit information flows
- each instruction in the IFS ISA will use the augmented state to
  track explicit information flows
- To allow translated programs to track implicit flows, the IFS ISA
  also defines additional security registers to hold auxiliary labels
  and instructions to manipulate these security registers and the
  labels affixed to general purpose registers.
  + experimental evaluation shows that "more than 70% of the execution
    time is spent in functions with fewer than 100 security registers
    live", and that's quite a lot of registers
- they only explicitly show 4 instructions (regop, load, store, branch)
  + one additional one for IFC (join)

The OS + user of the software define the policy, not the programmer.

The example that Askarov et al. [ESORICS 2008] later use to show that
"Termination-Insensitive Noninterference Leaks More Than Just a Bit"
was already introduced here (although no citation is given by Askarov
et al.), and the intuition that this can leak secrets only in
exponential time was also already present here.

They were also aware of the flow-sensitivity problem (Fenton's
counterexample from 1974), that later appeared in Russo and Sabelfeld,
2010. They use this to support the claim that "in order for an
information-flow mechanism to be secure, it necessarily must be overly
restrictive". They also claim that this "does not preclude the
existence of restrictive systems that rely on _conservative_ solutions
to the semantic dependence problem". "The challenge, therefore, in
building a dynamic information-flow security system is identifying
which approximate solutions to the semantic dependence problem yield
secure enforcement mechanisms that are not too restrictive in
practice."

The paper seems rather speculative and superficial. More like a
position paper with some nice ideas that are not fully worked out.

Q: Was any of this actually implemented and tried or proved?
A: They do have some _non-plausible_ performance numbers at the
   end, so they must have implemented something for their experiments
   (although it's unclear what exactly that is)
   - The performance numbers are _too good to be true_
     + papers like Dytan list 30-50x speed and 240x time overhead
     + was expecting at least an order of magnitude slowdown due to
       computing labels on each instruction; even if they have very
       few, very simple labels, I thought this should still incur
       significant overhead
     + Q: What's the usual overhead of highly-optimized taint-tracking
          systems? What kind of optimizations do they do?
     + Their comment on this:
       "The additional security instructions do not incur a
        significant performance penalty since these instructions are
        independent of the original program instructions and therefore
        can be executed in parallel, if sufficient resources exist."
   - "Information-flow correctness was verified by manual inspection"
A: Lennart Beringer proved 7 years later that the main ideas
   of this work are formally justified

Q: What do they do when they detect bad flows?
   Do they actually ever detect bad flows?
   Their STORE doesn't check for sensitive upgrades.
A: Since they are hybrid (not purely dynamic, so they do heavy static
   analysis), they never need to stop things? For Outputs they will
   just label the atoms very high instead of supressing bad output?

Q: How comes they don't leak information via labels?
A: Lennart mentions that the taint planes don't influence the data planes

*** Beringer, /End-to-end Multilevel Hybrid Information Flow Control (RIFLE)/
@inproceedings{Beringer2012,
  author    = {Lennart Beringer},
  title     = {End-to-end Multilevel Hybrid Information Flow Control},
  booktitle = {10th Asian Symposium on Programming Languages and
                  Systems (APLAS)},
  shortbooktitle = {APLAS},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7705},
  year      = {2012},
  isbn      = {978-3-642-35181-5},
  pages     = {50-65},
  ee        = {http://dx.doi.org/10.1007/978-3-642-35182-2_5},
  url       = {http://tinyurl.com/l5xkx5t},
}

- [[..:..:reading:BeringerAPLAS2012.pdf][local copy]]

This is very cool work; one of the few solid papers on IFC

By mixing static analysis and dynamic enforcement
- they never need to "prematurely terminate or otherwise alter
  an execution upon detecting a potentially illicit flow"
  + in this way they differ from most inline reference monitors
  + Q: Is the assumption here that bad flows can never happen?
       What about an OutputToPublicNetwork primitive?
    - they do mention "the support of (infinite) computations
      with output" as future work though, although it's very
      unclear what they could do there? magic?
- and they gain precision compared to both purely static and purely
  dynamic enforcement -- and this shows up in the stronger
  (asymmetric) noninterference property they prove in this paper.

"we provide an analysis of one of RIFLE's core ideas, the use of
separate taint registers for direct and indirect flows."
- the formalization is done for a While language;
  while RIFLE was working at the machine code level
  by binary instrumentation; so no pointers and no aliasing,
  no unstructured control flow, etc.

asymmetric end-to-end indistinguishability notion that refines
(multilevel) noninterference
- the final dynamic taints of the major/lead execution determines
  which indistinguishable minor/competitor execution to consider
   + the minor/competitor execution doesn't even need to do tracking
Asymmetric interpretations have previously been considered by Le
Guernic and Jensen [21,20], and also by Magazinius et al. [22]
- but they couldn't deal with more than 2 security levels
- they track implicit + explicit labels jointly
- [21,20] specify the set of observable (final) variables statically
TODO: look at [20,21,22] at some point

nonfluence between taints and the native execution actually
refines to a ternary discipline:
- data taints (capturing direct flows)
- are unaffected by control taints (capturing indirect flows),
- and neither one affects the data plane (i.e. the native execution).
+ their result depends on this separation
+ the join assignments go solely from data + control taints to control taints
  - the control taints are only joined with the data taints in the
    noninterference statement

path tracking, supposed to do 2 things:
- (correct) a way of incorporate a form of termination-sensitivity
- (incorrect) "the first extensional interpretation of data flow tracking"
  + see Corollary 2 at the very end
  + they don't actually prove something meaningful about dumb taint tracking,
    - They have a pc label (which they never lower and which
      is not infectious), so no,  that's not dumb taint tracking!
- the main point about v^pc is that it never gets lowered
  + so this might be a bit too restrictive to do anything useful
  + a pre-condition to their termination-sensitive theorem 6
    is that the program never branched on secrets (otherwise the initial
    states are required to match perfectly?)
    - might make more sense for multilevel security, especially if the
      lattice has incomparable levels
- "In particular, we outline in which sense control taints can be
   safely eliminated without detrimentally affecting the security
   guarantee."
   + so is the point that a single pc label is enough and they don't
     really need all the fuss about data taints?

"the term _compensation code_ appears to have been coined by Chudnow
and Naumann [13], the concept itself is already present in RIFLE [29]
and Venkatakrishnan et al.'s work [30], and represents an extensional,
non-disruptive alternative to the policy of no sensitive-upgrade [3,5]."

In Section 3 (more of a warm-up) they only synthesize programs
for well-typed inputs.
Q: I thought the goal of 3 was to track implicit flows statically
   and explicit ones dynamically. So why are they preventing
   implicit flows statically too? Why don't they just rephrase
   the type system to allow explicit flows, but still track the pc?
A: The dynamic labels for variables obtained this way are more
   precise than the corresponding static labels! Their asymmetric
   security notion captures this gain in precision. It's still a bit
   disturbing if all of this only works for already noninterferent
   programs.

Coq proof has abut 10kSLOC

"The indistinguishability conditions on the taint components guarantee
that no information leaks via the taints themselves."
Q: Any relation to public labels??
A: Not quite, they seem to rely on the taints not influencing or
   being influenced by executions, so first-class public labels
   seem completely out of the question. As in RIFLE the model is
   that the "security policy" is external to the program, and
   written by the user of the software (e.g. a system
   administrator), not by its creator.

Q: What's the point in using label lists
   (instead of just joining them and storing the result)?

Basically, for them each variable has 2 labels:
one for explicit flows and one for implicit flows
- Q: is this related to the label on the label idea?
  (used for instance in Benoit's channel proposal)
- at the end of the day (in their security theorem) they
  collapse (join) these two labels;
  Q: Doe they gain precision by keeping them separate in their synthesis?

Limitations:
- no concurrency and non-determinism
- very simplified model

Downsides (coming from RIFLE):
- no declassification
- they have to rewrite binaries
- they need sound and heavyweight static analysis
  + for real RIFLE (unstructured control flow, pointers, etc):
    sound alias analysis and reaching-definitions analysis
    - this is quite different compared to other hybrid approaches
      (e.g. motivated by JavaScript) in which they try to keep the
      amount of static information as small as possible, and more
      recently they don't even require a _sound_ static analysis
  + [warmup: section 3] for the first variants, a sound IFC type system
    [even a termination-sensitive type system]
  + [sections 4+5] no static analysis needed
    - this an artefact of structured control flow
    - ist's still not a purely dynamic analysis; since the transformation
      relies on the global structure of the program, which is static
      information.
      Q: Could this system be rephrased so that no rewriting is needed;
	 i.e. bake in the tracking in the semantics?
	 That would go beyond monitoring, towards multi/faceted execution,
	 since the effect of not taken branches is considered
- hardware costs:
  + for each live variable (register) need a security register
    tracking implicit flows into the variable
    (the variable's label only tracks explicit flows)
  + registers for tracking the "pc", stack fashion
    - one per nested control flow structure
    - Q: are they just compensating for not being
         able to use the real execution stack?

Open questions:
Q: Is any of this in any way related to Benoit's label locality?

Q: Can a type system / static IFC system have the RIFLE
   "user/admin choses policy model"?
   What about a type system that saves the checks it performs symbolically
   and the actual checking happens once the policy is selected?
   Would such a type system need to track full provenance?
   Would it all degenerate to a PCC architecture?

*** Livshits, Chong /Towards Fully Automatic Placement of Security Sanitizers and Declassifiers/

@InProceedings{LivshitsC13,
  author = 	 {Benjamin Livshits and Stephen Chong},
  title = 	 {Towards Fully Automatic Placement of Security Sanitizers and Declassifiers},
  booktitle =    {40th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages (POPL)},
  year = 	 2013,
  month = 	 jan,
  pages =        {385--398},
  publisher =    {ACM Press},
  address = 	 {New York, NY, USA},
  url = {http://people.seas.harvard.edu/~chong/abstracts/LivshitsC13.html}
}

*** Bosman, Slowinska, Bos /Minemu: The World's Fastest Taint Tracker/

@inproceedings{BosmanSB11,
  author    = {Erik Bosman and
               Asia Slowinska and
               Herbert Bos},
  title     = {Minemu: The World's Fastest Taint Tracker},
  booktitle = {14th International
               Symposium on Recent Advances in Intrusion Detection (RAID)},
  pages     = {1-20},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {6961},
  year      = {2011},
  isbn      = {978-3-642-23643-3},
  ee        = {http://dx.doi.org/10.1007/978-3-642-23644-0_1},
  url       = {https://minemu.org/minemu_raid11.pdf},
}

- minimal emulator designed for speedy taint tracking:
  "slowdown of 1.5x-3x for real and complex applications and 2.4x for
   SPEC INT2006, while tracking taint at byte level granularity"
- it also employs binary translation
- does not track implicit flows
- they outperform other binary-rewriting based systems that
  are also built for speed: \cite{SaxenaSP08,lift_micro2006}

*** Saxena, Sekar, Puranik /Efficient fine-grained binary instrumentation with applications to taint-tracking/

Another built for speed taint tracker based on binary instrumentation

@inproceedings{SaxenaSP08,
  author    = {Prateek Saxena and
               R. Sekar and
               Varun Puranik},
  title     = {Efficient fine-grained binary instrumentation with applications
               to taint-tracking},
  booktitle = {Sixth International Symposium on Code Generation and Optimization
               (CGO)},
  year      = {2008},
  publisher = {ACM},
  isbn      = {978-1-59593-978-4},
  pages     = {74-83},
  ee        = {http://doi.acm.org/10.1145/1356058.1356069},
  url       = {http://www.comp.nus.edu.sg/~prateeks/papers/saxena-cgo08.pdf},
}

*** Quin et al /LIFT: A Low-Overhead Practical Information Flow Tracking System for Detecting Security Attacks/

Taint tracking using Intel's highly optimized StarDBT binary translator

StarDBT uses additional _dedicated registers_ for taint
tracking. Specifically, it translates the IA32 instructions to EM64T
binary code. Since the EM64T architecture has more registers than the
IA32, StarDBT does not need to spill registers, giving a significant
performance gain. As a consequence, however, LIFT will not work on a
32-bit installation.

No implicit flows

\item From \cite{song2013security}: ``LIFT\cite{lift_micro2006}
  is an information flow
  tracking system that uses dynamic binary instrumentation and
  optimizations to detect attacks. LIFT is a software only system,
  requiring no hardware extensions.\ch{other than EM64T registers!}
  It uses a 1-bit tag to tag the
  data in memory or general data registers. LIFT provides tag checks
  of the data in the execution region before performing the execution
  and merges multiple tag checks of consecutive memory locations into
  one check to reduce the check overhead.''

@INPROCEEDINGS{lift_micro2006,
	author={Feng Qin and Cheng Wang and Zhenmin Li and Kim, H. and Yuanyuan Zhou and Wu, Y.},
	booktitle={39th IEEE/ACM International Symposium on Microarchitecture (MICRO-39)},
        title={{LIFT}: A Low-Overhead Practical Information Flow Tracking System for Detecting Security Attacks},
	year={2006},
	pages={135-148},
	keywords={computer crime;computer security;dynamic binary instrumentation;low-overhead practical information flow tracking system;security attack detection;software vulnerability;Application software;Computer crime;Computer security;Hardware;Information security;Instruments;Runtime;Software tools;Switches;Target tracking},
	doi={10.1109/MICRO.2006.29},
	ISSN={1072-4451},
  url = {http://www.cse.ohio-state.edu/~qin/pub-papers/2006andbefore/LIFT-Micro06.pdf},
}

*** Conti, Russo /A Taint Mode for Python via a Library/

@inproceedings{ContiR10,
  author    = {Juan Jos{\'e} Conti and
               Alejandro Russo},
  title     = {A Taint Mode for {Python} via a Library},
  booktitle = {15th Nordic Conference on Secure IT Systems (NordSec)},
  year      = {2010},
  pages     = {210-222},
  ee        = {http://dx.doi.org/10.1007/978-3-642-27937-9_15},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {7127},
  year      = {2012},
  isbn      = {978-3-642-27936-2},
  url       = {http://www.cse.chalmers.se/~russo/publications_files/owasp2010.pdf}
}

** IFC and cryptography

@inproceedings{VaughanZ07,
  author    = {Jeffrey A. Vaughan and
               Steve Zdancewic},
  title     = {A Cryptographic Decentralized Label Model},
  booktitle = {IEEE Symposium on Security and Privacy (S{\&}P 2007)},
  shortbooktitle = {IEEE S{\&}P},
  year      = {2007},
  pages     = {192-206},
  ee        = {http://dx.doi.org/10.1109/SP.2007.5},
  publisher = {IEEE Computer Society},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cis.upenn.edu/~stevez/papers/VZ07.pdf},
}

@article{AskarovHS08,
  author    = {Aslan Askarov and
               Daniel Hedin and
               Andrei Sabelfeld},
  title     = {Cryptographically-masked flows},
  journal   = {Theoretical Computer Science},
  shortjournal   = {TCS},
  volume    = {402},
  number    = {2-3},
  year      = {2008},
  pages     = {82-101},
  ee        = {http://dx.doi.org/10.1016/j.tcs.2008.04.028},
  url       = {http://www.cse.chalmers.se/~andrei/cryptoflows-tcs.pdf},
}

@misc{HaavL08,
  title = {Typing Computationally Secure Information Flow in {Jif}},
  author = {Liisi Haav and Peeter Laud},
  howpublished = {NORDSEC},
  year = {2008},
  url = {http://research.cyber.ee/~peeter/research/nordsec08.pdf},
}

@techreport{HicksKD05,
  title = {Declassification with Cryptographic Functions in a Security-Typed Language},
  author = {Boniface Hicks and David King and Patrick McDaniel},
  institution = {NSRC Penn State University},
  type = {Technical Report},
  number = {NAS-TR-0004-2005},
  year = {2005},
  url = {http://nsrc.cse.psu.edu/tech_report/NAS-TR-0004-2005.pdf},
}

** Other

@inproceedings{BirgissonMA:2011,
 author = {Birgisson, Arnar and McSherry, Frank and Abadi, Mart\'{\i}n},
 title = {Position Paper: Differential privacy with information flow control},
 booktitle = {Proceedings of the ACM SIGPLAN 6th Workshop on Programming Languages and Analysis for Security},
 series = {PLAS},
 year = {2011},
 isbn = {978-1-4503-0830-4},
 location = {San Jose, California},
 pages = {2:1--2:6},
 articleno = {2},
 numpages = {6},
 ee = {http://doi.acm.org/10.1145/2166956.2166958},
 doi = {10.1145/2166956.2166958},
 acmid = {2166958},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {differential privacy, information flow control},
 url = {http://users.soe.ucsc.edu/~abadi/Papers/lambdadp.pdf},
}


** Side-channels

@inproceedings{ZhangAM11,
  author    = {Danfeng Zhang and
               Aslan Askarov and
               Andrew C. Myers},
  title     = {Predictive mitigation of timing channels in interactive
               systems},
  booktitle = {18th ACM Conference on Computer and Communications Security},
  shortbooktitle = {CCS},
  publisher = {ACM},
  year      = {2011},
  isbn      = {978-1-4503-0948-6},
  pages     = {563-574},
  ee        = {http://doi.acm.org/10.1145/2046707.2046772},
  url       = {http://www.cs.cornell.edu/andru/papers/ccs11.pdf},
}

@inproceedings{AskarovZM10,
  author    = {Aslan Askarov and
               Danfeng Zhang and
               Andrew C. Myers},
  title     = {Predictive black-box mitigation of timing channels},
  booktitle = {17th ACM Conference on Computer and Communications Security},
  shortbooktitle = {CCS},
  publisher = {ACM},
  year      = {2010},
  isbn      = {978-1-4503-0245-6},
  pages     = {297-307},
  ee        = {http://doi.acm.org/10.1145/1866307.1866341},
  url       = {http://people.seas.harvard.edu/~aslan/ccs10.pdf},
}

@inproceedings{StefanBYLTRM13,
  author    = {Deian Stefan and
               Pablo Buiras and
               Edward Z. Yang and
               Amit Levy and
               David Terei and
               Alejandro Russo and
               David Mazi{\`e}res},
  title     = {Eliminating Cache-Based Timing Attacks with Instruction-Based
               Scheduling},
  booktitle = {18th European Symposium on Research in Computer Security (ESORICS)},
  shortbooktitle = {ESORICS},
  pages     = {718-735},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8134},
  year      = {2013},
  isbn      = {978-3-642-40202-9},
  url       = {http://www.scs.stanford.edu/~deian/pubs//stefan:2013:eliminating.pdf},
}

@inproceedings{BuirasSLM13,
  title = {A Library For Removing Cache-based Attacks in Concurrent Information Flow Systems},
  author = {Pablo Buiras and
            Deian Stefan and
            Amit Levy and
            David Mazi{\`e}res},
  booktitle = {8th International Symposium on Trustworthy Global Computing (TGC)},
  shortbooktitle = {TGC},
  year = {2013},
  note = {To appear},
}


* Access control
** Prehistory
*** Butler Lampson "Protection"
    Introduces access matrices.

@article{LampsonProtection,
  author    = {Butler W. Lampson},
  title     = {Protection},
  journal   = {Operating Systems Review},
  volume    = {8},
  number    = {1},
  year      = {1974},
  pages     = {18-24},
  ee        = {http://doi.acm.org/10.1145/775265.775268},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

*** Jones and Liskov, /A Language Extension for Expressing Constraints on Data Access/

@article{DBLP:journals/cacm/JonesL78,
  author    = {Anita K. Jones and
               Barbara Liskov},
  title     = {A Language Extension for Expressing Constraints on Data
               Access},
  journal   = {Commun. ACM},
  volume    = {21},
  number    = {5},
  year      = {1978},
  pages     = {358-367},
  ee        = {http://doi.acm.org/10.1145/359488.359493},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

** Role-based Access control
*** Broberg, Sands /Paralocks – Role-Based Information Flow Control and Beyond/
@article{broberg10:paralocks,
 author = {Broberg, Niklas and Sands, David},
 title = {Paralocks: role-based information flow control and beyond},
 journal = {SIGPLAN Not.},
 issue_date = {January 2010},
 volume = 45,
 issue = 1,
 month = {January},
 year = 2010,
 issn = {0362-1340},
 pages = {431--444},
 numpages = 14,
 url = {http://www.cse.chalmers.se/~dave/papers/Broberg-Sands-POPL10.pdf},
 doi = {http://doi.acm.org/10.1145/1707801.1706349},
 acmid = 1706349,
 publisher = {ACM},
 keywords = {information flow, language based security, security policies},
}

** Stack Inspection
*** Fornet and Gordon, /Stack inspection: theory and variants/

@article{fournet2002stackinspection,
 author = {Fournet, C\'{e}dric and Gordon, Andrew D.},
 title = {Stack inspection: theory and variants},
 journal = {SIGPLAN Not.},
 volume = {37},
 issue = {1},
 month = {January},
 year = {2002},
 issn = {0362-1340},
 pages = {307--318},
 numpages = {12},
 url = {http://doi.acm.org/10.1145/565816.503301},
 doi = {http://doi.acm.org/10.1145/565816.503301},
 acmid = {503301},
 publisher = {ACM},
 abstract={Stack inspection is a security mechanism implemented in runtimes such as the JVM and the CLR to accommodate components with diverse levels of trust. Although stack inspection enables the fine-grained expression of access control policies, it has rather a complex and subtle semantics. We present a formal semantics and an equational theory to explain how stack inspection affects program behaviour and code optimisations. We discuss the security properties enforced by stack inspection, and also consider variants with stronger, simpler properties.}
}

*** Fournet, Gordon /Stack inspection: Theory and variants/

@article{FournetG03,
  author    = {C{\'e}dric Fournet and
               Andrew D. Gordon},
  title     = {Stack inspection: Theory and variants},
  journal   = {ACM Trans. Program. Lang. Syst.},
  volume    = {25},
  number    = {3},
  year      = {2003},
  pages     = {360-399},
  ee        = {http://doi.acm.org/10.1145/641909.641912},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://research.microsoft.com/en-us/um/people/fournet/papers/stack-inspection-theory-and-variants-toplas.pdf}
}
Originallly appeared at POPL 2002

*** Besson, Blanc, Fournet, Gordon /From Stack Inspection to Access Control: A Security Analysis for Libraries/

@inproceedings{BessonBFG04,
  author    = {Fr{\'e}d{\'e}ric Besson and
               Tomasz Blanc and
               C{\'e}dric Fournet and
               Andrew D. Gordon},
  title     = {From Stack Inspection to Access Control: A Security Analysis
               for Libraries},
  booktitle = {17th IEEE Computer Security Foundations Workshop (CSFW)},
  year      = {2004},
  pages     = {61-},
  publisher = {IEEE Computer Society},
  isbn      = {0-7695-2169-X},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CSFW.2004.11},
  url       = {http://research.microsoft.com/en-us/um/people/fournet/tmp/from-stack-inspection-to-access-control-long-draft.pdf},
}

*** Pistoia, Banerjee, Naumann /Beyond Stack Inspection: A Unified Accesss-Control and Information-Flow Security Model/

@inproceedings{Pistoia:2007,
 author = {Pistoia, Marco and Banerjee, Anindya and Naumann, David A.},
 title = {Beyond Stack Inspection: A Unified Access-Control and Information-Flow Security Model},
 booktitle = {Proceedings of the Symposium on Security and Privacy},
 series = {SP},
 year = {2007},
 isbn = {0-7695-2848-1},
 pages = {149--163},
 numpages = {15},
 doi = {http://dx.doi.org/10.1109/SP.2007.10},
 acmid = {1264204},
 publisher = {IEEE Computer Society},
 url = {http://software.imdea.org/~ab/Publications/sp07.pdf}
}

http://fuxi.cs.txstate.edu/~nasdg/papers/2007sp/Beyond%20Stack%20Inspection%3A%20A%20Unified%20Access-Control%20and%20Information-Flow%20Security%20Model%202007.pdf

*** Abadi, Fournet /Access control based on execution history/

@inproceedings{abadi2003access,
  title={Access control based on execution history},
  author={Abadi, M. and Fournet, C.},
  booktitle={Proceedings of the 10th Annual Network and Distributed System Security Symposium},
  pages={107--121},
  year={2003},
  organization={The Internet Society}
}


*** Wallach, /A new approach to mobile code security/
@phdthesis{wallach1999newapproach,
 author = {Wallach, Dan Seth},
 advisor = {Felten, Edward},
 title = {A new approach to mobile code security},
 year = {1999},
 isbn = {0-599-27586-3},
 note = {AAI9927834},
 publisher = {Princeton University},
 address = {Princeton, NJ, USA},
}

*** Wallach, Appel, Felten, /SAFKASI: a security mechanism for language-based systems/
@article{wallach2000safkasi,
 author = {Wallach, Dan S. and Appel, Andrew W. and Felten, Edward W.},
 title = {SAFKASI: a security mechanism for language-based systems},
 journal = {ACM Trans. Softw. Eng. Methodol.},
 volume = {9},
 issue = {4},
 month = {October},
 year = {2000},
 issn = {1049-331X},
 pages = {341--378},
 numpages = {38},
 url = {http://doi.acm.org/10.1145/363516.363520},
 doi = {http://doi.acm.org/10.1145/363516.363520},
 acmid = {363520},
 publisher = {ACM},
 keywords = {Internet, Java, WWW, access control, applets, security-passing style, stack inspection},
 abstract={In order to run untrusted code in the same process as trusted code, there must be a mechanism to allow dangerous calls to determine if their caller is authorized to exercise the privilege of using the dangerous routine. Java systems have adopted a technique called stack inspection to address this concern. But its original definition, in terms of searching stack frames, had an unclear relationship to the actual achievement of security, overconstrained the implementation of a Java system, limited many desirable optimizations such as method inlining and tail recursion, and generally interfered with interprocedural optimization. We present a new semantics for stack inspection based on a belief logic and its implementation using the calculus of security-passing style which addresses the concerns of traditional stack inspection. With security-passing style, we can efficiently represent the security context for any method activation, and we can build a new implementation strictly by rewriting the Java bytecodes before they are loaded by the system. No changes to the JVM or bytecode semantics are necessary. With a combination of static analysis and runtime optimizations, our prototype implementation showes reasonable performance (although traditional stack inspection is still faster), and is easier to consider for languages beyond Java. We call our system SAFKASI (the Security Architecture Formerly Known as Stack Inspection).}
}

*** Banerjee, Naumann, /Stack-based access control and secure information flow/
@article{BanerjeeN05,
  author    = {Anindya Banerjee and
               David A. Naumann},
  title     = {Stack-based access control and secure information flow},
  journal   = {Journal of Functional Programming},
  shortjournal = {JFP},
  volume    = {15},
  number    = {2},
  year      = {2005},
  pages     = {131-177},
  ee        = {http://dx.doi.org/10.1017/S0956796804005453},
  abstract = {Access control mechanisms are often used with the intent
    of enforcing confidentiality and integrity policies, but few
    rigorous connections have been made between information flow and
    runtime access control. The Java virtual machine and the .NET
    runtime system provide a dynamic access control mechanism in which
    permissions are granted to program units and a runtime mechanism
    checks permissions of code in the calling chain. We investigate a
    design pattern by which this mechanism can be used to achieve
    confidentiality and integrity goals: a single interface serves
    callers of more than one security level and dynamic access control
    prevents release of high information to low callers. Programs
    fitting this pattern would be rejected by previous flow analyses. We
    give a static analysis that admits them, using permission-dependent
    security types. The analysis is given for a class-based
    object-oriented language with features including inheritance,
    dynamic binding, dynamically allocated mutable objects, type casts
    and recursive types. The analysis is shown to ensure a
    noninterference property formalizing confidentiality and integrity.},
  url = {http://www.cs.stevens-tech.edu/~naumann/publications/BanerjeeNaumannJFP.pdf},
}

*** Shinnar, Pistoia, Banerjee /A Language for Information Flow: Dynamic Tracking in Multiple Independent Dimensions/

@inproceedings{Shinnar:2009,
 author = {Shinnar, Avraham and Pistoia, Marco and Banerjee, Anindya},
 title = {A language for information flow: dynamic tracking in multiple interdependent dimensions},
 booktitle = {Proceedings of the 4th Workshop on Programming Languages and Analysis for Security},
 series = {PLAS},
 year = {2009},
 isbn = {978-1-60558-645-8},
 location = {Dublin, Ireland},
 pages = {125--131},
 numpages = {7},
 ee = {http://doi.acm.org/10.1145/1554339.1554354},
 doi = {http://doi.acm.org/10.1145/1554339.1554354},
 acmid = {1554354},
 publisher = {ACM},
 keywords = {declassification, information flow control, security type system},
 url = {http://www.eecs.harvard.edu/~shinnar/lambdaif_plas/lambdaif_plas.pdf},
}

Slightly longer technical report:
http://software.imdea.org/~ab/Publications/rc24541.pdf


* Operating systems

** TIARA

*** Shrobe, Knight, and Dehon  /TIARA: Trust Management, Intrusion-tolerance, Accountability, and Reconstitution Architecture/

@TechReport{shrobe07:tiara,
  author =       {Howard Shrobe and Thomas Knight and Andr\'e DeHon},
  title =        {{TIARA}: Trust Management, Intrusion-tolerance, Accountability, and Reconstitution Architecture},
  institution =  {MIT CSAIL},
  year =         2007,
  number =    {MIT-CSAIL-TR-2007-028},
  month =     {May},
  url = {http://dspace.mit.edu/bitstream/handle/1721.1/37589/MIT-CSAIL-TR-2007-028.pdf}
}

  This is the proposal


@Misc{shrobe09:tiara_nicecap_report,
  author = 	 {Howard Shrobe and Andr\'e DeHon and Thomas F. {Knight, Jr.}},
  title = 	 {Trust-Management, Intrusion-Tolerance, Accountability, and Reconstitution Architecture ({TIARA})},
  url = {http://www.dtic.mil/cgi-bin/GetTRDoc?AD=ADA511350},
  month = 	 {December},
  year = 	 2009}

  December 2009 Report is the end of project report.  Much more detailed.

Limited-scope effort:
"A clean-slate redesign of the hardware and software foundation for
computer systems is a large task. In this short, limited scope effort
our goal was to increase the confidence that such a task is worth
undertaking, reducing the risks and uncertainties that come with
pursuing a new and alternate path. As such, we concentrated on the
areas of greatest concern (e.g. will this hardware be too expensive or
too slow?, can software be decomposed to eliminate single points of
failure?)"

"In addition to access control, these facilities include, information
flow tracking, provenance maintenance and execution monitoring of data
flow, control flow, and enforcement of the input-output invariants of
application methods."

It seems that TIARA  coined the term "zero-kernel operating system";
there is a whole chapter in the report called like this.
The focus of TIARA seems to be on ZKOS decomposition and the HW support
needed to achieve that, not so much on user-level concerns.

The TMU idea in SAFE seems to come from TIARA's grandfather: ARIES.

@TechReport{brown01:aries_ifc,
  author = {J. Brown and Thomas F. {Knight, Jr.}},
  title =  {A Minimally Trusted Computing Base for Dynamically Ensuring Secure Information Flow},
  institution =  {MIT CSAIL},
  year = 2001,
  number = 5,
  month = {November},
  note =  {Aries Memo No. 15},
  url = {http://www.ai.mit.edu/projects/aries/Documents/Memos/ARIES-15.pdf},
}

"3.6.3 An example: preventing implicit flows" gives some handweavy
argument as to how they avoid Fenton's flow-sensitivity problem and
how their rule is "more restrictive and therefore safe" :)


** Information-flow operating systems (HiStar / Asbestos / Flume / Laminar...)

*** Aeolus paper (Aeolus is not an OS)

@inproceedings{cheng12,
   author = {Winnie Cheng and Dan R. K. Ports and David Schultz and James
	Cowling and Victoria Popic and Aaron Blankstein and Dorothy Curtis
	and Liuba Shrira and Barbara Liskov},
   title = {Abstractions for Usable Information Flow Control in {Aeolus}},
   booktitle = {Proceedings of the 2012 USENIX Annual Technical Conference},
   month = jun,
   year = 2012,
   url = {http://pmg.csail.mit.edu/pubs/cheng12__abstr_usabl_infor_flow_contr_aeolus-abstract.html}
}

BM:
 - process-grained pc labels, with labeled references for sharing
   between threads
 - labels = set of secrecy tags and set of integrity tags
 - dynamic authority passing, and possiblity to define authority-capturing
   closures
 - one can momentarily change authority without having to create a new thread
 - 'authority -> authority' delegation (actsFor) and
   'authority -> tag' delegation
 - centralized management of authority and delegation structure, with:
   -- support for revocation
   -- 'contracts' on the authority dag
 - very interesting, but too positive to be true: drawbacks, issues are not
   explained
 - it doesn't seem easy to decide which mechanisms to use to enforce a
   given policy... (also true in our current design)


Victoria Popic's Masters Thesis: Audit Trails in the Aeolus Distributed Security Platform
http://www.pmg.csail.mit.edu/papers/viq-meng.pdf

@phdthesis{wwcheng-phd,
   author = {Winnie Wing-Yee Cheng},
   title = {Information Flow for Secure Distributed Applications},
   school = {MIT},
   address = {Cambridge, MA, USA},
   month = aug,
   year = 2009,
   note = {Also as Technical Report {MIT-CSAIL-TR-2009-040}},
   url = {http://www.pmg.lcs.mit.edu/pubs/wwcheng-phd-abstract.html},
}

Aaron Blankstein's Masters Thesis,: Analyzing Audit Trails in the Aeolus Security Platform
  http://www.pmg.lcs.mit.edu/pubs/blanks11__analyze_audit_aeolus_secur_platf-abstract.html

*** Zeldovich et al, /Making Information Flow Explicit in HiStar/

@article{ZeldovichBKM11,
  author    = {Nickolai Zeldovich and
               Silas Boyd-Wickizer and
               Eddie Kohler and
               David Mazi{\`e}res},
  title     = {Making information flow explicit in {HiStar}},
  journal   = {Communications of the ACM},
  volume    = {54},
  number    = {11},
  year      = {2011},
  pages     = {93-101},
  ee        = {http://doi.acm.org/10.1145/2018396.2018419},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.scs.stanford.edu/~dm/home/papers/zeldovich:histar-cacm.pdf},
}

@inproceedings{zeldovich06:IF_explicit_histar,
 author = {Zeldovich, Nickolai and Boyd-Wickizer, Silas and Kohler, Eddie and Mazi\`{e}res, David},
 title = {Making information flow explicit in {HiStar}},
 booktitle = {{Proceedings of the 7th Symposium on Operating Systems Design and Implementation}},
 series = {OSDI},
 year = 2006,
 isbn = {1-931971-47-1},
 location = {Seattle, Washington},
 pages = {263--278},
 numpages = 16,
 url = {http://www.scs.stanford.edu/~nickolai/papers/zeldovich-histar.pdf},
 acmid = 1298481,
 publisher = {USENIX Association},
}

The idea of "clearance" was introduced by bell and lapadula but first used
in an os in the form now seen in HAILS, etc., by histar.

*** Zeldovich et. al., /Securing distributed systems with information flow control/ (DStar)

@InProceedings{zeldovich08:sec_dist_system_DStar,
  author =       {Zeldovich, N. and Boyd-Wickizer, S. and Mazieres, D.},
  title =        {Securing distributed systems with information flow control},
  booktitle = {6th Symposium on Networked Systems Design and Implementation},
  year =      2008,
  month =     {April},
  address =   {San Francisco, CA},
  url = {http://www.scs.stanford.edu/~dm/home/papers/zeldovich:dstar.pdf}
}


*** Krohn et al, /Information Flow Control for Standard OS Abstractions/

@InProceedings{krohn07:flume,
  author    = {Maxwell N. Krohn and
               Alexander Yip and
               Micah Z. Brodsky and
               Natan Cliffer and
               M. Frans Kaashoek and
               Eddie Kohler and
               Robert Morris},
  title =        {Information Flow Control for Standard {OS} Abstractions},
  booktitle = {Proceedings of the Symposium on Operating Systems Principles},
  series    = {SOSP},
  publisher = {ACM},
  pages     = {321-334},
  year =      2007,
  month =     {October},
  url = {http://pdos.csail.mit.edu/~max/docs/flume.pdf}
}

*** Krohn, Tromer, /Noninterference for a Practical DIFC-Based Operating System/

@inproceedings{KrohnT09,
  author    = {Maxwell N. Krohn and
               Eran Tromer},
  title     = {Noninterference for a Practical {DIFC}-Based Operating System},
  booktitle = {30th IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  year      = {2009},
  publisher = {IEEE Computer Society},
  pages     = {61-76},
  ee        = {http://dx.doi.org/10.1109/SP.2009.23},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://pdos.csail.mit.edu/~max/docs/kt09.pdf},
}

Long version including some proofs at:
http://www.cs.tau.ac.il/~tromer/papers/flumecsp.pdf

CH: This is a very interesting and readable paper, highly recommended!

This is actually part of Max Khron's PhD thesis, which gives more details:
http://pdos.csail.mit.edu/~max/docs/krohn-thesis.pdf

And there is also a longer version, that went with the S&P submission:
http://www.cs.tau.ac.il/~tromer/papers/flumecsp-2008-11-12.pdf


*** Roy, Porter, Bond, McKinley, Witchel /Laminar: Practical Fine-Grained Decentralized Information Flow Control/

@InProceedings{roy09:laminar,
  author = {Roy, Indrajit and Porter, Donald E. and Bond, Michael D. and McKinley, Kathryn S. and Witchel, Emmett},
  title = {Laminar: Practical Fine-Grained Decentralized Information Flow Control},
  booktitle = {Proceedings of the Conference on Programming Language Design and Implementation},
  series = {PLDI},
  year = 2009,
  isbn = {978-1-60558-392-1},
  location = {Dublin, Ireland},
  pages = {63--74},
  numpages = 12,
  url = {http://www.cs.utexas.edu/users/witchel/pubs/roy09pldi.pdf},
  doi = {http://doi.acm.org/10.1145/1542476.1542484},
  acmid = 1542484,
  publisher = {ACM},
  keywords = {information flow control, java virtual machine, operating systems, security region},
}

  [[reading:laminar.pdf][local copy]]

*** Deeper information on Laminar

http://www.cs.utexas.edu/~indrajit/pubs/roy-thesis.pdf

http://sourceforge.net/tracker/download.php?group_id=128805&atid=723235&file_id=334931&aid=2820171

*** Efstathopoulos et al, /Labels and event processes in the asbestos operating system/

BM: seems to contain very interesting ideas, but the paper is rather
    difficult to understand...
  - yet another variant of labels: maps from 'handles' (~ principals)
    to {star,0,1,2,3}
  - different labels for sending or receiving
  - event-based programming, event processes seem to have more
    privileges (not sure, though)
  - deserves several readings...

@inproceedings{efstathopoulos05:asbestos,
 author = {Efstathopoulos, Petros and Krohn, Maxwell and VanDeBogart, Steve
           and Frey, Cliff and Ziegler, David and Kohler, Eddie and Mazi\`{e}res,
           David and Kaashoek, Frans and Morris, Robert},
 title = {Labels and event processes in the {Asbestos} operating system},
 booktitle = {Proceedings of the Symposium on Operating Systems Principles},
 series = {SOSP},
 year = 2005,
 isbn = {1-59593-079-5},
 location = {Brighton, United Kingdom},
 pages = {17--30},
 numpages = 14,
 url = {http://asbestos.cs.ucla.edu/pubs/asbestos-sosp05.pdf},
 doi = {http://doi.acm.org/10.1145/1095810.1095813},
 acmid = 1095813,
 publisher = {ACM},
 keywords = {event processes, information flow, labels, mandatory access control, secure web servers},
}

*** Efstathopoulos and Kohler /Manageable fine-grained information flow/

Comments after TOS discussion:
  - VERY interesting paper; VERY relevant for SAFE!
  - The Asbestos label model is a bit hard to understand, but we got pretty
    far by trying to decode Figure 2
  - The stuff about debugging seems important, but we didn't get much out of it

@inproceedings{efstathopoulos08:fine_grained_IF,
 author = {Efstathopoulos, Petros and Kohler, Eddie},
 title = {Manageable fine-grained information flow},
 booktitle = {Proceedings of the 3rd European Conference on Computer Systems},
 series = {Eurosys},
 year = 2008,
 isbn = {978-1-60558-013-5},
 location = {Glasgow, Scotland UK},
 pages = {301--313},
 numpages = 13,
 url = {http://www.cs.ucla.edu/~pefstath/papers/efstathopoulos08manageable.pdf},
 doi = {http://doi.acm.org/10.1145/1352592.1352624},
 acmid = 1352624,
 publisher = {ACM},
 keywords = {debugging, decentralized information flow control, labels, policy language},
}


        Required fields: author, title, institution, year.
        Optional fields: type, number, address, month, note.

*** CMU-CyLab Android work

@techreport{CyLab12,
    author    = {Jassim Aljuraidan and
                 Elli Fragkaki and
                 Lujo Bauer and
                 Limin Jia and
                 Kazuhide Fukushima and
                 Shinsaku Kiyomoto and
                 Yutaka Miyake},
    title     = {Run-Time Enforcement of Information-Flow Properties on {Android}},
    institution = {Carnegie Mellon University},
    number = {CMU-CyLab-12-015},
    year     = 2012,
    month    = jul,
    url = {http://www.cylab.cmu.edu/research/techreports/2012/tr_cylab12015.html}
}

@inproceedings{JiaAFBSFKM13,
  author    = {Limin Jia and
               Jassim Aljuraidan and
               Elli Fragkaki and
               Lujo Bauer and
               Michael Stroucken and
               Kazuhide Fukushima and
               Shinsaku Kiyomoto and
               Yutaka Miyake},
  title     = {Run-Time Enforcement of Information-Flow Properties on Android
               (Extended Abstract)},
  booktitle = {18th European Symposium
               on Research in Computer Security},
  shortbooktitle = {ESORICS},
  year      = {2013},
  pages     = {775-792},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8134},
  isbn      = {978-3-642-40202-9},
  ee        = {http://dx.doi.org/10.1007/978-3-642-40203-6_43},
  url       = {https://www.andrew.cmu.edu/user/liminjia/research/papers/android-esorics2013.pdf},
}

Abstract

Recent years have seen a dramatic increase in the number and
importance in daily life of smartphones and similar mobile
devices. The security properties that these devices provide to their
applications, however, are inadequate to protect against many
undesired behaviors. A broad class of such behaviors is violations of
simple information-flow properties.

This paper proposes an enforcement system that permits Android
applications to be concisely annotated with information-flow policies,
which the system enforces at run time. Information-flow constraints
are enforced both between applications and between components within
applications, aiding developers in implementing least privilege. We
develop a detailed model of our enforcement system using a process
calculus, and use the model to prove noninterference. Our system and
model have a number of useful or novel features, including support for
Android’s single- and multiple-instance components, floating labels,
declassification and endorsement capabilities, and support for legacy
applications. Our system design fits the Android programming model and
runtime cleanly enough that we have developed a fully functional
prototype on Android 4.0.4. We have tested our prototype on a Nexus S
phone, verifying that it can enforce practically useful policies that
can be implemented with minimal modification to off-the-shelf
applications.

** Verified Operating Systems

*** Klein et al, /Comprehensive formal verification of an OS microkernel/

@article{KleinAEMSKH14,
  author    = {Gerwin Klein and
               June Andronick and
               Kevin Elphinstone and
               Toby C. Murray and
               Thomas Sewell and
               Rafal Kolanski and
               Gernot Heiser},
  title     = {Comprehensive formal verification of an {OS} microkernel},
  journal   = {ACM Transactions on Computer Systems},
  shortjournal = {ACM TOCS},
  volume    = {32},
  number    = {1},
  year      = {2014},
  pages     = {2},
  ee        = {http://doi.acm.org/10.1145/2560537},
  url       = {http://www.nicta.com.au/pub?id=7371},
}

*** Klein et al, /Proof Engineering Considered Essential/

@inproceedings{Klein14,
  author    = {Gerwin Klein},
  title     = {Proof Engineering Considered Essential},
  booktitle = {19th International Symposium on Formal Methods},
  shortbooktitle = {FM},
  year      = {2014},
  pages     = {16-21},
  ee        = {http://dx.doi.org/10.1007/978-3-319-06410-9_2},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8442},
  isbn      = {978-3-319-06409-3},
  url       = {http://www.nicta.com.au/pub?id=7923},
}

*** Klein et al, /seL4: Formal Verification of an OS Kernel/
    :PROPERTIES:
    :ATTACH_DIR_INHERIT: t
    :END:

  - BCP: Interesting quote (one among many)...
    "The alternative of producing the executable specification
    directly in the theorem prover would have meant a steep learning
    curve for the design team and a much less sophisticated tool chain
    for execution and simulation."

  - APT: Uses an "event-based" kernel execution model and a "mostly atomic"
    kernel API inspired by Fluke (
    http://www.brynosaurus.com/pub/os/atomic-osdi99.pdf ).  All interrupts
    are disabled during kernel execution.  But during lengthy operations,
    the kernel occasionally polls for interrupt conditions; if one is
    detected during a kernel call, the kernel returns immediately, but with
    the user state dummied up to restart the kernel call the next time that
    user runs.  In effect, each potentially lengthy system call must be
    coded to explicitly support possible preemption at the polling points.
    In practice, this is only needed for just a few kernel calls,
    e.g. object destruction.  From a kernel verification perspective, all
    that's needed is a coarse model of the HW interrupt controller, which is
    "as nondetermistic as possible."  In particular, as best I can tell,
    there is a non-deterministic IRQ polling primitive.  Synchronous
    exceptions (including memory faults) are banned within the kernel, and
    proving that they don't occur is a significant part of the proof burden.


  - [[reading:klein-sosp09.pdf][local copy]]

@InProceedings   {Klein09sel4:formal,
author       =   {G. Klein and K. Elphinstone and G. Heiser
                  and J. Andronick and D. Cock and P. Derrin
                  and D. Elkaduwe and K. Engelhardt
                  and R. Kolanski and M. Norrish and T. Sewell
                  and H. Tuch and S. Winwood},
title        =   {{seL4}: Formal Verification of an {OS} Kernel},
booktitle = {Proceedings of the Symposium on Operating Systems Principles},
shortbooktitle    =   {SOSP},
year         =   {2009},
pages        =   {207--220},
publisher    =   {ACM},
url = {http://ertos.nicta.com.au/publications/papers/Klein_EHACDEEKNSTW_09.pdf}
}

@inproceedings{Liedtke1993,
title = {{Improving IPC by kernel design}},
author = {Jochen Liedtke},
month = {December},
year = {1993},
booktitle = {14th ACM Symposium on Operating Systems Principles},
city = {Asheville},
state = {NC}
}

@inproceedings{Liedtke1995,
author = {Jochen Liedtke},
year = {1995},
title = {{On micro-Kernel Construction}},
booktitle = {15th ACM Symposium on Operating Systems Principles},
pages = {237-250}
}

@manual{Elphinstone_HL:L4-79,
    title            = {L4 Reference Manual: {MIPS R4x00}, Version 1.11, Kernel Version 79},
    author           = {Kevin Elphinstone and Gernot Heiser and Jochen Liedtke},
    year             = {1999},
    month            = {May},
    note             = {Available from \url{http://www.disy.cse.unsw.edu.au/Softw./L4}},
    address          = {University NSW, Sydney 2052, Australia},
    organization     = {School Comp. Sci. \& Engin.},
    annote           = {Keep, this is referred to by ``Inside L4/MIPS''}
}


*** Yang, Hawblitzel /Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System/

APT: The "nucleus" (the verified micro-kernel) always executes with
     interrupts disabled.  Most nucleus operations are short and bounded,
     with the notable exception of GC; changing to an incremental collector
     is left as future work.  Interrupts (and other faults) are modeled as
     HW-originated calls into the nucleus, so they just get serialized with
     other user-originated calls.

@InProceedings{yang10:verve,
  author = 	 {Yang, Jean and Hawblitzel, Chris},
  title = 	 {Safe to the Last Instruction: Automated Verification of a Type-Safe Operating System},
  booktitle = {Proceedings of PLDI},
  year = 	 2010,
  address = 	 {Toronto, Ontario, Canada},
  month = 	 {June},
  url = {http://people.csail.mit.edu/jeanyang/papers/pldi117-yang.pdf}
}

*** Feiertag, Neumann /The foundations of a provably secure operating system (PSOS)/

@InProceedings{feiertag79:psos_foundations,
  author =       {J. Feiertag and Peter G. Neumann},
  title =        {The foundations of a provably secure operating system (PSOS)},
  booktitle = {Proceedings of the
    National Computer Conference},
  pages =     {329–-334},
  year =      1979,
  publisher = {AFIPS Press},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.3.9905&rep=rep1&type=pdf}
}

*** Neumann, Boyer, Feiertag, Levitt, Robinson /A provably secure operating system: the system, its applications and proofs/

@TechReport{neumann80:psos_report,
  author =       { Peter G. Neumann and Robert S. Boyer and Richard J. Feiertag and Karl N. Levitt and Lawrence Robinson},
  title =        {A provably secure operating system: the system, its applications and proofs},
  institution =  {Computer Science Laboratory SRI},
  year =         1980,
  note =      {CSL-116, second edition.},
  url = {http://www.csl.sri.com/~neumann/psos/psos80.ps}
}

*** Neumann, Feiertag /PSOS revisited/

@InProceedings{neumann03:psos_revisited,
  author =       {Peter G. Neumann and Richard J. Feiertag},
  title =        {{PSOS} revisited},
  booktitle = {Proceedings of the
    19th Annual Computer Security Applications Conference (ACSAC)},
  shortbooktitle = {ACSAC},
  pages =     {208–-216},
  year =      2003,
  month =     {December},
  url = {http://www.csl.sri.com/~neumann/psos03.pdf}
}

*** seL4 /Noninterference for seL4/

They have many papers on this, and this page and the following
position paper give a big picture:
http://ssrg.nicta.com.au/projects/TS/infoflow.pml

Big picture:
@inproceedings{Klein:HotOS2011,
  author = {Gerwin Klein and
            Toby C. Murray and
            Peter Gammie and
	    Thomas Sewell and
	    Simon Winwood},
  title = {Provable Security: {How} feasible is it?},
  booktitle = {13th Workshop on Hot Topics in Operating Systems (HotOS)},
  pages = {28--32},
  month = may,
  year = 2011,
  publisher = {USENIX Association},
  url = {http://www.nicta.com.au/pub?id=4631},
  abstract = "Strong, machine-checked security proofs of operating
              systems have been in the too hard basket long enough.
              They will still be too hard for the humongous mainstream
              operating systems, but even for systems designed from
              the ground up for security they have been counted as
              infeasible. There are high-level formal models, nice
              security properties, ways of architecting and
              engineering secure systems, but no implementation level
              proofs yet, not even with the recent formal verification
              of the seL4 microkernel."
}

Got my hands on a draft of this:
[[reading:seL4-oakland2013-draft.pdf][local copy]]
@inproceedings{seL4:Oakland2013,
  author = {Toby C. Murray and
            Daniel Matichuk and
            Matthew Brassil and
            Peter Gammie and
	    Timothy Bourke and
	    Sean Seefried and
	    Corey Lewis and
	    Xin Gao and
	    Gerwin Klein},
  title = {{seL4}: from General Purpose to a Proof of Information Flow Enforcement},
  booktitle = {34th IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  publisher = {IEEE},
  pages = {415-429},
  year = 2013,
  url = {http://www.nicta.com.au/pub?id=6464},
}



@inproceedings{MurrayMBGK12,
  author    = {Toby C. Murray and
               Daniel Matichuk and
               Matthew Brassil and
               Peter Gammie and
               Gerwin Klein},
  title     = {Noninterference for Operating System Kernels},
  booktitle = {Second International Conference on
               Certified Programs and Proofs (CPP)},
  shortbooktitle = {CPP},
  pages     = {126-142},
  series    = {Lecture Notes in Computer Science},
  volume    = {7679},
  year      = {2012},
  publisher = {Springer},
  ee        = {http://dx.doi.org/10.1007/978-3-642-35308-6_12},
  url       = {http://ssrg.nicta.com.au/publications/papers/Murray_MBGK_12.abstract},
}

The proof seems about correct access control, not integrity
@inproceedings{SewellWGMAK11,
  author    = {Thomas Sewell and
               Simon Winwood and
               Peter Gammie and
               Toby C. Murray and
               June Andronick and
               Gerwin Klein},
  title     = {{seL4} Enforces Integrity},
  booktitle = {Second International Conference on
               Interactive Theorem Proving (ITP)},
  shortbooktitle = {ITP},
  pages     = {325-340},
  series    = {Lecture Notes in Computer Science},
  volume    = {6898},
  year      = {2011},
  publisher = {Springer},
  ee        = {http://dx.doi.org/10.1007/978-3-642-22863-6_24},
  url       = {http://ssrg.nicta.com.au/publications/papers/Sewell_WGMAK_11.abstract},
}

*** PROSPER /Formal Verification of Information Flow Security for a Simple ARM-Based Separation Kernel/

  - [[reading:prosper-ccs2013.pdf][local copy]]

@inproceedings{DamGKNS13,
  author    = {Mads Dam and
               Roberto Guanciale and
               Narges Khakpour and
               Hamed Nemati and
               Oliver Schwarz},
  title     = {Formal verification of information flow security for a simple
               {ARM}-based separation kernel},
  booktitle = {ACM Conference on Computer and Communications Security},
  shortbooktitle = {CCS},
  year      = {2013},
  pages     = {223-234},
  ee        = {http://doi.acm.org/10.1145/2508859.2516702},
  publisher = {ACM},
  isbn      = {978-1-4503-2477-9},
  url = {http://prosper.sics.se/papers/ccs13_dam_prosper_kernel_verification.pdf},
}

- The final property they prove and want is trace equivalence
  between a concrete and an ideal system
- Their concrete system includes a Memory Management Unit (MMU)
- They use bisimulation for this proof
- They don't consider fine-grained timing channels
  + they count time at instruction level
  + in principle they could directly take advantage of
    instruction-level scheduling
- they only handle 2 partitions but claim that things can be
  easily extended to >2
- they split off two parts of this work:
  + the proofs about the ARMv7 ISA (aka ARM isolation lemmas)
    are detailed in the CPP 2013 paper
    - this ignores the problem of "underspecified"/"unpredictable"
      ARM instructions
  + their mostly-automated machine code verification framework
    (integrating HOL4 and BAP) is further explained in the TrustED
    2013 paper

*** PROSPER /Machine Assisted Proof of ARMv7 Instruction Level Isolation Properties/

  - [[reading:prosper-cpp2013.pdf][local copy]]

@inproceedings{KhakpourSD13,
  author    = {Narges Khakpour and
               Oliver Schwarz and
               Mads Dam},
  title     = {Machine Assisted Proof of {ARMv7} Instruction Level Isolation
               Properties},
  booktitle = {3rd International Conference on Certified Programs and Proofs},
  shortbooktitle = {CPP},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8307},
  year      = {2013},
  isbn      = {978-3-319-03544-4},
  pages     = {276-291},
  ee        = {http://dx.doi.org/10.1007/978-3-319-03545-1_18},
  url       = {http://soda.swedish-ict.se/5614/},
}

*** PROSPER /Machine code verification of a tiny ARM hypervisor/

  - [[reading:prosper-trusted2013.pdf][local copy]]

@inproceedings{DamGN13,
  author = {Mads Dam and Roberto Guanciale and Hamed Nemati},
  title = {Machine code verification of a tiny {ARM} hypervisor},
  booktitle = {International Workshop on Trustworthy Embedded Devices},
  shortbooktitle = {TrustED},
  year = {2013},
  url = {http://prosper.sics.se/},
  note = {To appear},
}

** Singularity

N.b.: Scott Doerrie and Jonathan Shapiro are sceptical about some aspects of
singularity.  In particular:

  - midori dropped all language work from Singularity and went with C#
    also linear types, because they are too hard
      there are data flow patterns in operating systems that just don't linearize
      e.g. cacheing data, duplicting file descriptors... ?

  - the "access control permissions" paper is a mess -- stay away!

*** Hunt, Larus /Singularity: Rethinking the software stack/

  - An excellent summary and retrospective on the Singularity experience.

  - This paper gives broad coverage of the mechanisms used in Singularity,
    primarily software isolated processes and contract-based channels. It's
    a bit of a hodgepodge, but maybe that just means there's something for
    everyone. There is some coverage of OS design principles and the Sing#
    language extensions, but also many incongruous low-level details.

  - [[reading:Singularity/singularity-rethinking-the-software-stack-SIGOPS-2007.pdf][local copy]]

@Article{hunt07:singularity_rethinking,
  author = 	 {Hunt, Galen C. and Larus, James R.},
  title = 	 {Singularity: rethinking the software stack},
  journal = 	 {ACM SIGOPS Operating Systems Review},
  year = 	 2007,
  volume = 	 41,
  number = 	 2,
  pages = 	 {37--49},
  month = 	 {April},
  url = {http://research.microsoft.com/pubs/69431/osr2007_rethinkingsoftwarestack.pdf}
}

*** Hunt, Hawblitzel, Hodson, Larus, Steensgaard, Wobber /Sealing OS processes to Improve dependability and safety/

  - A thorough analysis of the trade-offs and benefits of sealed processes.
    Seems very relevant to the CRASH/SAFE effort.

  - One sentence summary: processes should not allow self modifying code, dynamic
    loading, shared memory (implicit communication), or intrusive system call APIs.
    The paper has a notable focus on process-related invariants.

  - [[reading:Singularity/sealing-os-processes-EuroSys-2007.pdf][local copy]]

@InProceedings{hunt07:sealing_os_processes,
  author = 	 {Hunt, Galen and Hawblitzel, Chris and Hodson, Orion and Larus, James and Steensgaard, Bjarne and Wobber, Ted},
  title = 	 {Sealing OS Processes to Improve Dependability and Safety},
  booktitle = {Proceedings of the European Conference on Computer Systems (EuroSys)},
  year = 	 2007,
  address = 	 {Lisbon, Portugal},
  month = 	 {March},
  publisher = {ACM},
  url = {http://research.microsoft.com/pubs/62817/EuroSys2007_SealedProcesses.pdf}
}

*** Fahndrich, Aiken, Hawblitzel, Hodson, Hunt, Larus, Levi /Language support for fast and reliable message-based communication in Singularity OS/

  - This paper focuses on channels, contracts, tracking of ownership, and the underlying
    implementation of those abstractions. It is more narrowly focused than the "Software
    Stack" paper.

  - [[reading:Singularity/singsharp-EuroSys-2006.pdf][local copy]]

@InProceedings{fahndrich06:sing_sharp,
  author = 	 {F{\"a}hndrich, Manuel and Aiken, Mark and Hawblitzel, Chris and Hodson, Orion and Hunt, Galen and Larus, James R. and Levi, Steven},
  title = 	 {Language support for fast and reliable message-based communication in Singularity OS},
  booktitle = {Proceedings of EuroSys},
  year = 	 2006,
  address = 	 {Leuven, Belgium},
  month = 	 {April},
  publisher = {ACM},
  url = {http://research.microsoft.com/pubs/67482/singsharp.pdf}
}

*** Larus, Tarditi, Wobber /Broad new OS research: challenges and opportunities/

  - Short, high-level overview of Singularity, evenly split between motivation
    and overall design (i.e. only 3 pages on Singularity design). Perhaps the most
    interesting point here is the idea that the whole system should be
    self-describing in the same way that tagged memory is self-describing.

  - [[reading:Singularity/broad-new-os-research-HotOS-2005.pdf][local copy]]

@InProceedings{galen05:broad_new_os_research,
  author = 	 {Hunt, Galen C. and Larus, James R. and Tarditi, David and Wobber, Ted},
  title = 	 {Broad new OS research: challenges and opportunities},
  booktitle = {Proceedings of Tenth Workshop on Hot Topics in Operating Systems (HotOs)},
  year = 	 2005,
  month = 	 {June},
  publisher = {USENIX},
  url = {http://research.microsoft.com/pubs/54666/hotos%202005-%20broad%20new%20os%20research-%20challenges%20and%20opportunities.pdf}
}

*** Wobber, Yumerefendi, Abadi, Birrell, Simon /Authorizing applications in Singularity/
  - One sentence summary: Principals are immutable structured strings, and
    ACLs are pattern matchers (a subset of regexes).

  - [[reading:Singularity/authorizing-applications-in-singularity-EuroSys-2007.pdf][local copy]]

@InProceedings{wobber07:author_applic_singul,
  author = 	 {Wobber, Ted and Yumerefendi, Aydan and Abadi, Martin and Birrell, Andrew and Simon, Daniel R.},
  title = 	 {Authorizing Applications in Singularity},
  booktitle = {Proceedings of the Eurosys Conference},
  year = 	 2007,
  address = 	 {Lisbon, Portugal},
  month = 	 {March},
  publisher = {ACM},
  url = {http://research.microsoft.com/pubs/59976/eurosys2007_security.pdf}
}

*** Aiken, Fähndrich, Hawblitzel, Hunt, Larus /Deconstructing process isolation/
  - One sentence summary: comparison of MMU-based protection versus language-based
    protection for processes.

  - [[reading:Singularity/deconstructing-process-isolation-MSPC-2006.pdf][local copy]]

@InProceedings{aiken06:deconstr_process_isol,
  author = 	 {Aiken, Mark and Fähndrich, Manuel and Hawblitzel, Chris and Hunt, Galen and Larus, James R.},
  title = 	 {Deconstructing process isolation},
  booktitle = {Proceedings of the Workshop on Memory Systems Performance and Correctness},
  year = 	 2006,
  address = 	 {San Jose, CA},
  month = 	 {October},
  publisher = {ACM},
  url = {http://doi.acm.org/10.1145/1178597.1178599}
}

*** Spear, Roeder, Hodson, Hunt, Levi /Solving the starting problem: device drivers as self-describing artifacts/

  - One sentence summary: having "install" be a first-class operation on applications
    enables static reasoning about post-installation system stability.

  - [[reading:Singularity/solving-the-starting-problem-EuroSys-2006.pdf][local copy]]

@InProceedings{spear06:solving_starting_problem,
  author = 	 {Spear, Michael and Roeder, Tom and Hodson, Orion and Hunt, Galen C. and Levi, Steven},
  title = 	 {Solving the starting problem: device drivers as self-describing artifacts},
  booktitle = {Proceedings of the EuroSys Conference},
  year = 	 2006,
  month = 	 {April},
  publisher = {ACM},
  url = {http://research.microsoft.com/pubs/69432/eurosys2006_solvingthestartingproblem.pdf}
}

*** Porter, Boyd-Wickizer, Howell, Olinsky, Hunt /Rethinking the library OS from the top down/

  Not strictly connected to Singularity, but written by many of the
  same authors.
  Their definition of "Library OS" is somewhat restricted:
    "Drawbridge packages application services into the  library OS and
     leaves user and hardware services in the host OS (see Figure 2)".
  User and hardware services, in their definition, includes the
  kernel, device drivers, networking stacks, the shell, window
  manager... Application services, then, means Win32 and associated
  DLLs.

@article{Porter:2011:RLO:1961296.1950399,
 author = {Porter, Donald E. and Boyd-Wickizer, Silas and Howell, Jon and Olinsky, Reuben and Hunt, Galen C.},
 title = {Rethinking the library OS from the top down},
 journal = {SIGPLAN Not.},
 issue_date = {March 2011},
 volume = {46},
 issue = {3},
 month = {March},
 year = {2011},
 issn = {0362-1340},
 pages = {291--304},
 numpages = {14},
 url = {http://0-portal.acm.org.millennium.lib.cyut.edu.tw/ft_gateway.cfm?id=1950399&type=pdf},
 doi = {http://doi.acm.org/10.1145/1961296.1950399},
 acmid = {1950399},
 publisher = {ACM},
 keywords = {drawbridge, libos, library os},
}

** House

*** Hallgren, Jones, Leslie, Tolmach /A principled approach to operating system construction in Haskell/

  - BRK: Like the title suggests, its focus is on bringing Haskell down to the
    hardware level. It's fun to read about bridging that gap, but there are some
    weak aspects of the paper: Their properties of H all rely on a stated implicit
    assumption that the hardware exposed through H is not "abused". Also, House
    relies on GHC's runtime for concurrency (!), and does not consider multiprocessors.

  - [[reading:house-icfp-2005.pdf][local copy]]

@InProceedings{hallgren05:house_os,
  author = 	 {Hallgren, Thomas and Jones, Mark P. and Leslie, Rebekah and Tolmach Andrew},
  title = 	 {A principled approach to operating system construction in Haskell},
  booktitle = {Proceedings of ICFP},
  year = 	 2005,
  address = 	 {Tallinn, Estonia},
  month = 	 {September},
  publisher = {ACM},
  url = {http://web.cecs.pdx.edu/~apt/icfp05.pdf}
}

*** More House papers

[From Mark Jones, via BCP...]

  For Habit: the language report (http://hasp.cs.pdx.edu/habit-report-Nov2010.pdf)
  or, for one of the more novel features of its type system, the instance chains
  paper (http://web.cecs.pdx.edu/~jgmorris/pubs/morris-icfp2010-instances.pdf)

  For HARTS: A certified framework for Compiling and Executing Garbage-collected
  languages (http://web.cecs.pdx.edu/~apt/icfp10.pdf)

  For formal reasoning (in addition to HARTS): Brian Huffman's PhD dissertation,
  which is expected in the Spring, possibly sooner.

  You'll also find some more background items at http://hasp.cs.pdx.edu/.  But
  we're not always as good as we might be at keeping our web presence up to date,
  so please don't hesitate to ask if you have any further questions.

** Java Operating Systems

Comment from Luke Zarko: I would start by looking at JX
(http://www.jxos.org/) and JavaOS (information about which seems to be
disappearing; I think I might have found a copy of the official book from
Sun on the project, which ought to be fun to read through). In general I am
most interested in implementations that integrate the JVM with the kernel in
some sense--just running HotSpot on an off-the-shelf microkernel can still
lead to interesting questions about API design and security architecture,
but aren't so compelling from a lower-level viewpoint.

*** JavaOS

Sun project, 1996ish - 1999

http://www.itmweb.com/f031098.htm

***  JX

Implemented at Erlangen; last release 2007.

Golm, Michael; Meik Felser, Christian Wawersich, and Jürgen Kleinöder (13
June 2002). "The JX Operating System". Proceedings of the 2002 USENIX Annual
Technical Conference. Monterey, CA: USENIX.

http://www4.informatik.uni-erlangen.de/Projects/JX/publications/jx-usenix.pdf
http://www4.informatik.uni-erlangen.de/Projects/JX/poster/jx-poster.pdf
http://www4.informatik.uni-erlangen.de/Projects/JX/publications/diss.pdf
http://www4.informatik.uni-erlangen.de/Projects/JX/publications/jx-sec.pdf

*** JNode

[From Wikipedia]

Ewout Prangsma started the first attempt in 1995 with the Java Bootable
System (JBS). The author was unhappy with the amount of C and assembly
language required and moved on to a new attempt called JBS2. JNode is the
third attempt, first introduced in 2003. JNode uses only two languages, Java
and assembly. This system currently understands the ext2, FAT, NTFS and ISO
9660 filesystems and the TCP/IP network protocol, and has a working graphic
user interface, including USB peripherals. JNode can be booted from a CD or
run in any popular emulator. JNode uses the GNU Classpath Java library and
(when completed) should run any Java programs.

After a couple of releases in 2008 and 2009, the development project now
appears more or less inactive, though not officially defunct.

** Capability-based operating systems

*** Lampson 1973 /A Note on the Confinement Problem/

    An early discussion and definition of Confinement.
    Gives various channels for leaking information, including one
    credited to A.G. Fraser that leaks a bit by either locking or not
    locking a designated file.

    Lampson claims: "A program to be confined must allow its caller to
    determine all its inputs into legitimate and covert channels. We
    say that the channels are masked by the caller."


@article{DBLP:journals/cacm/Lampson73,
  author    = {Butler W. Lampson},
  title     = {A Note on the Confinement Problem},
  journal   = {Commun. ACM},
  volume    = {16},
  number    = {10},
  year      = {1973},
  pages     = {613-615},
  ee        = {http://doi.acm.org/10.1145/362375.362389},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

  - [[reading:Lampson1973-ConfinementNote.pdf][local copy]]

@Article{bell_on_bell_lapadula_acsac2005,
  author = 	 {David Elliot Bell},
  title = 	 {Looking Back at the {Bell-La Padula} Model},
  journal = 	 {Proceedings of the Annual Computer Security Applications Conference},
  year = 	 2005,
  pages =	 {337--351}
}

@inproceedings{bell2006LBA,
  title={Looking Back: Addendum},
  author={Bell, David Elliott},
  booktitle={22nd Annual Computer Security Applications Conference, Miami, FL},
  year={2006}
}

@inproceedings{locktrek89,
 author = "O.S. Saydjari and J.M. Beckman and J.R. Leaman",
 title = "LOCK Trek: Navigating Uncharted Space",
 booktitle = "Proceedings of the 1989 IEEE Symposium on Security and
                  Privacy",
 city = "Oakland",
 state = "CA",
 year = "1989"
 }

@inproceedings{lockhistorical02,
 author = {O. Sami Saydjari},
 title = {LOCK: An Historical Perspective},
 booktitle = {ACSAC '02: Proceedings of the 18th Annual Computer Security Applications Conference},
 year = {2002},
 isbn = {0-7695-1828-1},
 pages = {96},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 url = {http://www.cyberdefenseagency.com/publications/LOCK-An_Historical_Perspective.pdf},
}

@article{lockcostprofile01,
 author = {Richard E. Smith},
 title = {Cost profile of a highly assured, secure operating system},
 journal = {ACM Trans. Inf. Syst. Secur.},
 volume = {4},
 number = {1},
 year = {2001},
 issn = {1094-9224},
 pages = {72--101},
 doi = {http://doi.acm.org/10.1145/383775.383778},
 publisher = {ACM},
 address = {New York, NY, USA},
 }


*** Shapiro et al  /EROS: a fast capability system/

@inproceedings{shapiro99:eros,
 author = {Shapiro, Jonathan S. and Smith, Jonathan M. and Farber, David J.},
 title = {EROS: a fast capability system},
 booktitle = {Proceedings of the Symposium on Operating Systems Principles},
 shortbooktitle = {SOSP},
 year = 1999,
 isbn = {1-58113-140-2},
 location = {Charleston, South Carolina, United States},
 pages = {170--185},
 numpages = 16,
 url = {http://www.eros-os.org/papers/sosp99-eros-preprint.ps},
 doi = {http://doi.acm.org/10.1145/319151.319163},
 acmid = 319163,
 publisher = {ACM},
}

  - [[reading:shapiro-eros.pdf][local copy]]

*** Shapiro & Weber /Verifying the EROS Confinement Mechanism/

(A somewhat formal argument that EROS's invariants are correctly
maintained.)

@article{shapiro00:verif_eros,
author = {Jonathan S. Shapiro and Sam Weber},
title = {Verifying the EROS Confinement Mechanism},
journal ={Proceedings of the Symposium on Security and Privacy},
volume = 0,
issn = {1540-7993},
year = 2000,
pages = 0166,
url = {https://wiki.smu.edu.sg/w/flyer/images/6/65/S%26P00_Shapiro.pdf},
doi = {http://doi.ieeecomputersociety.org/10.1109/SECPRI.2000.848454},
publisher = {IEEE Computer Society},
address = {Los Alamitos, CA, USA},
}

*** Watson et al   /Capsicum: practical capabilities for UNIX/

@InProceedings{watson10:capsicum,
  author =       {R. N. M. Watson and J. Anderson and B. Laurie and K. Kennaway},
  title =        {Capsicum: practical capabilities for {UNIX}},
  booktitle = {Proceedings of the 19th USENIX Security Symposium},
  year =      2010,
  address =   {Washington, DC},
  month =     {August},
  url = {http://www.cl.cam.ac.uk/research/security/capsicum/papers/2010usenix-security-capsicum-website.pdf}
}

  Their website:
  http://www.cl.cam.ac.uk/research/security/capsicum/

  BCP comments:
    - great paper: reworks classical ideas of capabilities into a form that
      applies very naturally in a conventional UNIX setting
    - the applications (including a compartmentalized version of Chrome) are
      impressive; the technology is slated for inclusion in FreeBSD 9
    - caveat: the paper, though well written, is quite UNIX-centric (lots of
      jargon, etc.)

*** Watson et al /A taste of Capsicum: practical capabilities for UNIX/

@article{WatsonALK12,
  author    = {Robert N. M. Watson and
               Jonathan Anderson and
               Ben Laurie and
               Kris Kennaway},
  title     = {A taste of {Capsicum}: practical capabilities for {UNIX}},
  journal   = {Communications of the ACM},
  volume    = {55},
  number    = {3},
  year      = {2012},
  pages     = {97-104},
  ee        = {http://doi.acm.org/10.1145/2093548.2093572},
}

See <safe-git>/reading/watson-cacm12.pdf for a copy

*** Harris et al /Declarative, Temporal, and Practical Programming with Capabilities/

@inproceedings{HarrisJRAW13,
  author    = {William R. Harris and
               Somesh Jha and
               Thomas W. Reps and
               Jonathan Anderson and
               Robert N. M. Watson},
  title     = {Declarative, Temporal, and Practical Programming with Capabilities},
  booktitle = {IEEE Symposium on Security and Privacy},
  year      = {2013},
  pages     = {18-32},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/SP.2013.11},
  publisher = {IEEE Computer Society},
  isbn      = {978-1-4673-6166-8},
  url       = {https://www.cl.cam.ac.uk/research/security/ctsrd/pdfs/201305-temporal-practical-capabilities.pdf},
}

*** Watson et al /Towards a theory of application compartmentalisation/

@misc{WatsonMGANL13,
  author = {Robert N. M. Watson and
            Steven J. Murdoch and
            Khilan Gudka and
            Jonathan Anderson and
            Peter G. Neumann and
            Ben Laurie},
  title = {Towards a theory of application compartmentalisation},
  howpublished = {Security Protocols Workshop},
  month = mar,
  year = {2013},
  url = {http://www.cl.cam.ac.uk/~kg365/pubs/2013spw-compartmentalisation.pdf},
}

*** Gudka et al /Exploring Compartmentalisation Hypotheses with SOAAP/

@inproceedings{GudkaWHLM12,
  author    = {Khilan Gudka and
               Robert N. M. Watson and
               Steven Hand and
               Ben Laurie and
               Anil Madhavapeddy},
  title     = {Exploring Compartmentalisation Hypotheses with {SOAAP}},
  booktitle = {AHANS Workshop},
  year      = {2012},
  pages     = {23-30},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/SASOW.2012.14},
  publisher = {IEEE Computer Society},
  isbn      = {978-1-4673-5153-9},
  url       = {http://www.cl.cam.ac.uk/~kg365/pubs/2012ahans-soaap.pdf},
}

*** Levy    /Capability Based Computer Systems/

This book was published by Digital Press in 1984. It is still the most
thorough survey and description of early capability-based and object-based
hardware and software systems.  PDF available on the web.

@book{Levy84,
author = {H. M. Levy},
title = {Capability Based Computer Systems},
publisher = {Digital Press},
year = {1984},
url = {http://www.cs.washington.edu/homes/levy/capabook/}
}


*** Miller, Yee, Shapiro /Capability Myths Demolished/

@Unpublished{miller03:caps_myths_demolished,
  author =       {Mark S. Miller and Ka-Ping Yee and Jonathan Shapiro},
  title =        {Capability Myths Demolished},
  note =         {Version submitted to Usenix Security 2003.},
  year =      2003,
  url = {http://srl.cs.jhu.edu/pubs/SRL2003-02.pdf},
}

*** (More background reading on capabilities)

  In no particular order:

  From Objects to Capabilities:
  http://www.erights.org/elib/capability/ode/ode-capabilities.html

  Shap's intro to capabilities:
  http://www.eros-os.org/essays/capintro.html

  ACLs Don't:
  http://waterken.sourceforge.net/aclsdont/

  Ben Laurie's reading list:
  http://www.links.org/?p=905

  -- Ben & Perry

@article{Fabry74,
  author    = {Robert S. Fabry},
  title     = {Capability-Based Addressing},
  journal   = {Commun. ACM},
  volume    = {17},
  number    = {7},
  year      = {1974},
  pages     = {403-412}
}

@article{Cox83,
title = {Interprocess Communication and Processor Dispatching on the Intel 432},
author = {George W. Cox and William M. Corwin and Konrad K. Lai and Fred J. Pollack},
journal = {ACM Transactions on Computer Systems},
volume = {1},
number = {1},
year = {1983},
month = {February},
pages = {45-66}
}

@inproceedings{Pollack81,
title = {The iMAX-432 Object Filing System},
author = {Fred J. Pollack and Kevin C. Kahn and Roy M. Wilkinson},
booktitle = {Proceedings, Symposium on Operating Systems Principles},
publisher = {Association for Computing Machinery},
year = {1981},
pages = {137-147}
}




** Other OS papers

*** Muir, Smith /An Operating System Architecture for Network Processors/

  - [[reading:piglet-architecture-ancs-2005.pdf][local copy]]

@inproceedings{Muir:2005:OSA:1095890.1095900,
	author		= {Muir, Steve and Smith, Jonathan},
	title		= {An operating system architecture for network processors},
	booktitle	= {Proceedings of the  Symposium on Architecture for Networking and Communications Systems},
	series		= {ANCS '05},
	year		= {2005},
	isbn		= {1-59593-082-5},
	location	= {Princeton, NJ, USA},
	pages		= {61--70},
	numpages	= {10},
	url		= {http://www.cis.upenn.edu/~sjmuir/papers/ancs05.pdf},
	doi		= {http://doi.acm.org/10.1145/1095890.1095900},
	acmid		= {1095900},
	publisher	= {ACM},
	keywords	= {network processors, operating systems},
}

*** Muir, Smith /Functional divisions in the Piglet multiprocessor operating system/

  - [[reading:piglet-overview-sigops_ew98.pdf][local copy]]

@inproceedings{Muir:1998:FDP:319195.319234,
	author		= {Muir, Steve and Smith, Jonathan},
	title		= {Functional divisions in the Piglet multiprocessor operating system},
	booktitle	= {Proceedings of the 8th  European Workshop on Support for Composing Distributed Applications},
	series		= {EW 8},
	year		= {1998},
	location	= {Sintra, Portugal},
	pages		= {255--260},
	numpages	= {6},
	url		= {http://www.cis.upenn.edu/~sjmuir/papers/sigops_ew98.pdf},
	doi		= {http://doi.acm.org/10.1145/319195.319234},
	acmid		= {319234},
	publisher	= {ACM},
}

@inproceedings{Ioannidis02,
  author = {Sotiris Ioannidis and Steven M. Bellovin and Jonathan
    Smith},
  booktitle = {SIGOPS European Workshop},
  month = {September},
  title = {Sub-Operating Systems: A New Approach to Application
    Security},
  url = {https://www.cs.columbia.edu/~smb/papers/subos.pdf},
  year = 2002
}

@inproceedings{Ioannidis01,
  author = {Sotiris Ioannidis and Steven M. Bellovin},
  booktitle = {Usenix Conference},
  month = {June},
  title = {Building a Secure Web Browser},
  url = {https://www.cs.columbia.edu/~smb/papers/sub-browser.pdf},
  year = 2001
}

@article{Ramakrishnan93,
  title = {Performance Considerations in Designing Network Interfaces},
  author = {K. K. Ramakrishnan},
  year = {1993},
  researchr = {http://researchr.org/publication/Ramakrishnan93},
  journal = {IEEE Journal on Selected Areas in Communications},
  volume = {11},
  number = {2},
  pages = {203-219},
}

@ARTICLE{SmithTraw,
  author={Smith, J.M. and Traw, C.B.S.},
  journal={Network, IEEE},
  title={Giving applications access to Gb/s networking},
  year={1993},
  month={jul},
  volume={7},
  number={4},
  pages={44 -52},
  doi={10.1109/65.224055},
  ISSN={0890-8044},
}

*** Smith and Traw /Giving Applications Access to Gb/s Networking/
@article{Smith93,
title = {Giving Applications Access to Gb/s Networking},
author = {Jonathan M. Smith and C. Brendan S. Traw},
journal = {IEEE Network},
volume = 7,
number = 4,
month = {July},
year = 1993,
pages = {44--52}
}

*** Aviram, Weng, Hu, Ford /Efficient System-Enforced Deterministic Parallelism/

@InProceedings{aviram10:determinator,
  author =       {Amittai Aviram and Shu-Chun Weng and Sen Hu and Bryan Ford},
  title =        {Efficient System-Enforced Deterministic Parallelism},
  booktitle = {Proceedings of the 9th USENIX Symposium on Operating Systems Design and Implementation (OSDI)},
  year =      2010,
  address =   {Vancouver, BC, Canada},
  month =     {October},
  url = {http://dedis.cs.yale.edu/2010/det/papers/osdi10.pdf}
}

*** Bershad et al /SPIN/

@inproceedings{bershad95:spin,
 author = {Bershad, B. N. and Savage, S. and Pardyak, P. and Sirer, E. G. and Fiuczynski, M. E. and Becker, D. and Chambers, C. and Eggers, S.},
 title = {Extensibility safety and performance in the SPIN operating system},
 booktitle = {Proceedings of the Symposium on Operating Systems Principles},
 series = {SOSP},
 shortbooktitle = {SOSP},
 year = 1995,
 isbn = {0-89791-715-4},
 location = {Copper Mountain, Colorado, United States},
 pages = {267--283},
 numpages = 17,
 url = {http://www-spin.cs.washington.edu/papers/SOSP95/sosp95.ps},
 doi = {http://doi.acm.org/10.1145/224056.224077},
 acmid = 224077,
 publisher = {ACM},
}

** Exokernels

*** Kaashoek, Engler, Ganger, Brice\~{n}o, Hector, Russel, Mazi\`{e}res, Pinckney, Grimm, Jannott, Mackenzie. /Application performance and flexibility on exokernel systems/.

@article{Kaashoek:1997:APF:269005.266644,
 author = {Kaashoek, M. Frans and Engler, Dawson R. and Ganger, Gregory R. and Brice\~{n}o, Hector M. and Hunt, Russell and Mazi\`{e}res, David and Pinckney, Thomas and Grimm, Robert and Jannotti, John and Mackenzie, Kenneth},
 title = {Application performance and flexibility on exokernel systems},
 journal = {SIGOPS Oper. Syst. Rev.},
 volume = {31},
 issue = {5},
 month = {October},
 year = {1997},
 issn = {0163-5980},
 pages = {52--65},
 numpages = {14},
 url = {http://doi.acm.org/10.1145/269005.266644},
 doi = {http://doi.acm.org/10.1145/269005.266644},
 acmid = {266644},
 publisher = {ACM},
}

** Persistent object systems and file systems

*** Napier88
*** Seventh International Workshop on Persistent Object Systems
  - http://www.cis.upenn.edu/~POS96/home.html

*** Atkinson, M.P., Jordan, M.J., Daynès, L. and Spence, S. /Design Issues for Persistent Java: a type-safe, object-oriented, orthogonally persistent system/

  - Design issues and principles:
    - Consistency
    - Transactionality (granularity, ease of use, power)
    - Orthogonality - persistence should be available for all types
      - Including code (classes for them, gates for us)
    - Persistence Independence - semantics of operations should be
      agnostic to whether data happens to be persistent
    - Persistence Identification - essentially, to preserve type
      safety, persistence must cover all reachable values.
    - Separation of policy and mechanism
      - Compromise between control and cost of fine-grained
        language-level mechanisms
      - Programmer control for custom recovery actions and
        "the form that transactions should take"
  - Performance

@MISC{Atkinson96designissues,
    author = {M.P. Atkinson and M.J. Jordan and L. Daynès and S. Spence},
    title = {Design Issues for Persistent Java: a type-safe, object-oriented, orthogonally persistent system},
    year = {1996}
}

*** Some other recommended readings from TK

Chapter 10 of the Organick's book "A Programmer's view of the Intel iAPX432
System" has a good description of their "file system".  They distinguish
"active" objects which are live in memory, and are lost on system crashes
from "passive" objects which are persistent across reboot.  Both types are
directly addressable, but there are special operations, similar to database
commits, that take active object and make them passive.  This chapter is
definitely worth a read.  There is some discussion of clumping small objects
for efficiency, and of naming issues.

These papers referenced may also be helpful, which I have not read:

Pollack FJ, Kahn KC, and Wilkinson RM, "The iMAX-432 object filing system"
Proc. 8th Symposium on on Operating Systems Principles, December 1981.

Kahn KC, and Pollack FJ "An Extensible Operating System for the Intel 432"
Proceedings Compcon Spring 1981 pp 398-404

Kahn KC, Corwin Wm, Dennis TD, D'Hooge H, Gifkins MR, Hutchins LA and
Pollack FJ, "iMAX: A multiprocessor operating system for an object-based
computer" Pro. 8th Symposium on Operating Systems Principles, December 1981.

Kahn KC, "A small-scale operating system foundation for microprocessor
appications, Proc. IEEE, V. 66. No. 2, February 1978.


* Tagged hardware
** Older

@article{Feustel73,
  author = {Edward A. Feustel},
  title = {On the Advantages of Tagged Architectures},
  journal = {IEEE Transactions on Computers},
  volume = {22},
  pages = {644-652},
  month = jul,
  year = 1973,
  url = {http://www.feustel.us/Feustel%20&%20Associates/Advantages.pdf},
}

@inproceedings{Feustel75,
  author    = {Edward A. Feustel},
  title     = {Tagged Architecture and Protection: Message Systems},
  booktitle = {4th Texas Conference on Computing Systems},
  year      = {1975},
  pages     = {147-150},
  publisher = {University of Texas},
  pages     = {2A.3- 1-3},
  url       = {http://www.feustel.us/Feustel%20&%20Associates/MessageSystems.pdf},
}

@inproceedings{Feustel76,
  author    = {Edward A. Feustel},
  title     = {Tagged Architecture and the Semantics of Programming Languages:
               Extensible Types},
  booktitle = {3rd Annual Symposium on Computer Architecture (ISCA)},
  year      = {1976},
  pages     = {147-150},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/800110.803572},
}
- CH: Title looks promising; beyond pay-wall though

@book{Organick1973,
title = {Computer System Organization: The B5700/B6700 Series},
author = {Elliott I. Organick},
publisher = {Academic Press},
year = {1973}
}

@book{Organick1983,
title = {{A Programmer's View of the Intel 432 System}},
author = {Elliott I. Organick},
publisher = {McGraw-Hill},
year = {1983}
}


@book{Organick1972,
title = {{The MULTICS System: An Examination of Its Structure}},
author = {Elliott I. Organick},
publisher = {MIT Press},
year = {1972}
}

@book{IBM1968,
author = {IBM},
title = {IBM System/360 Principles of Operation},
year = {1968}
}

@techreport{haley:1987,
	Address = {Fort Meade, MD},
	Author = {Cornelius J. Haley and Sheryl M. Luera and Mary D. Schanken and William B. Geer},
	Date-Added = {2006-11-08 14:18:39 -0500},
	Date-Modified = {2006-11-08 14:29:29 -0500},
	Institution = {National Computer Security Center},
	Keywords = {Tagged-Architecture; Operating-System},
	Local-Url = {burroughs-1987.pdf},
	Month = {August 5},
	Number = {CSC-EPL-871003, Library No. S-228,515},
	Title = {Final Evaluation Report UNISYS A Series MCP/AS Release 3.7},
	Url = {burroughs-1987.pdf},
	Year = {1987}}

@book{Wilkes1979,
title = {The Cambridge CAP Computer and Its Operating System},
author = {M. V. Wilkes and R. M. Needham},
publisher = {North Holland},
year = {1979}
}

** i432
*** Johnson /The Intel 432: A VLSI Architecture for Fault-Tolerant Computer Systems/

@article{johnson84:i432,
 author = {Johnson, D.},
 title = {{The Intel 432: A {VLSI} Architecture for Fault-Tolerant Computer Systems}},
 journal = {Computer},
 volume = 17,
 issue = 8,
 month = {August},
 year = 1984,
 issn = {0018-9162},
 pages = {40--48},
 numpages = 9,
 url = {http://portal.acm.org/citation.cfm?id=1319725.1320042},
 doi = {10.1109/MC.1984.1659216},
 acmid = 1320042,
 publisher = {IEEE Computer Society},
 address = {Los Alamitos, CA, USA},
}

*** Colwell /Performance effects of architectural complexity in the Intel 432/

@article{colwell88:perf_i432,
 author = {Colwell, Robert P. and Gehringer, Edward F. and Jensen, E. Douglas},
 title = {Performance effects of architectural complexity in the {Intel} 432},
 journal = {ACM Trans. Comput. Syst.},
 volume = 6,
 issue = 3,
 month = {August},
 year = 1988,
 issn = {0734-2071},
 pages = {296--339},
 numpages = 44,
 url = {http://doi.acm.org/10.1145/45059.214411},
 doi = {http://doi.acm.org/10.1145/45059.214411},
 acmid = 214411,
 publisher = {ACM},
}

@inproceedings{Gehringer1985,
title = {Tagged Architecture: How Compelling Are its Advantages?},
author = {Edward F. Gehringer and J. Leslie Keedy},
booktitle = {Proceedings of the 12th International Symposium on Computer Architecture},
city = {Boston},
state = {MA},
year={1985},
pages = {162--170}
}

** LISP Machine
*** Baker et al /Symbolics Ivory/

@inproceedings   {ivory_iccd1987,
author       =   {C. Baker and others},
title        =   {The {S}ymbolics {I}vory Processor: a 40 Bit Tagged
                  Architecture {LISP} Microprocessor},
booktitle    =   ICCD,
pages        =   {512--515},
year         =   1987
}


@article{Leung2006,
author = {F. Leung and G. Neiger and D. Rodgers and A. Santoni and R. Uhlig},
title = {Intel Virtualization Technology: Hardware Support for Efficient Processor Virtualization},
journal = {Intel Technology Journal},
month = {Aug.},
year = {2006},
 url = {http://www.intel.com/technology/itj/2006/v10i3/}
}

@book{ALPHA,
title = {{Alpha Architecture Handbook}},
publisher = {Digital Equipment Corporation},
city = {Maynard},
state = {MA},
year = {1992}
}

@article{Sites1992,
author = {Richard L. Sites},
title = {{Alpha AXP Architecture}},
journal = {{Digital Technical Journal}},
volume = {4},
number = {4},
note = {{Special Issue}},
year = {1992},
pages = {1--17}
}

 @book{hennessy1996,
author = {John L. Hennessy and David A. Patterson},
title = {Computer Architecture: A Quantitative Approach, 2nd Edition},
publisher = {Morgan Kaufmann},
year = {1996}
}

@BOOK{hennessy_patterson2003,
    AUTHOR = {John Hennessy and David Patterson},
    TITLE = {Computer Architecture a Quantitative Approach},
    PUBLISHER = {Morgan Kaufmann Publishers, Inc.},
    YEAR = {2003},
    edition = {3rd}
}

*** Steenkist, Hennessy /Tags and type checking in LISP: hardware and software approaches/

 - A mid-80's take on the arguments against tagged architectures.

@inproceedings   {Steenkiste:1987:TTC:36206.36183,
author       =   {Steenkiste, Peter and Hennessy, John},
title        =   {Tags and type checking in LISP: hardware and software approaches},
booktitle    =   {Proceedings of the second international conference on Architectual support for programming languages and operating systems},
series       =   {ASPLOS-II},
year         =   {1987},
isbn         =   {0-8186-0805-6},
location     =   {Palo Alto, California, United States},
pages        =   {50--59},
numpages     =   {10},
url          =   {http://dx.doi.org/10.1145/36206.36183},
doi          =   {http://dx.doi.org/10.1145/36206.36183},
acmid        =   {36183},
publisher    =   {IEEE Computer Society},
address      =   {Los Alamitos, CA, USA},
}

*** Moon /Architecture of the Symbolics 3600/

 - [[reading:moon-symbolics-3600.pdf][local copy]]

@inproceedings   {Moon:1985:AS:327010.327133,
author       =   {Moon, David A.},
title        =   {{Architecture of the Symbolics 3600}},
booktitle    =   {{Proceedings of the 12th Annual International
                  Symposium on Computer Architecture}},
series       =   {ISCA},
year         =   {1985},
isbn         =   {0-8186-0634-7},
location     =   {Boston, Massachusetts, United States},
pages        =   {76--83},
numpages     =   {8},
url          =   {http://dx.doi.org/10.1145/327010.327133},
doi          =   {http://dx.doi.org/10.1145/327010.327133},
acmid        =   {327133},
publisher    =   {IEEE Computer Society},
address      =   {Los Alamitos, CA, USA},
}

**

*** Bawden, Greenblatt, Holloway, Knight, Moon, and Weinreb /Lisp Machine/



@Article{bawden79:lisp_machine,
  author =       {A. Bawden and R. D. Greenblatt and J. Holloway  and T. F. Knight and D. Moon and D. Weinreb},
  title =        {Lisp Machine},
  journal =      {Artificial Intelligence},
  year =         1979,
  pages =     {343--373},
  note =      {Patrick Henry Winston, (ed.), v. 2, MIT Press, Cambridge}}


%% yes: Knight, Jr
@incollection{lispm,
	Author = {R.D. Greenblatt and T.F. {Knight, Jr.} and J. Holloway and D.A. Moon and D.L. Weinreb},
	Booktitle = {Interactive Programming Environments},
	City = {New York},
	Editors = {David Barstow and Howard Shrobe and Erik Sandewall},
	Publisher = {McGraw-Hill},
	Title = {The {LISP} Machine},
	Year = {1984}
}

** SPUR
@inproceedings{spur_isca1986,
 author = {Taylor, G. S. and Hilfinger, P. N. and Larus, J. R. and Patterson, D. A. and Zorn, B. G.},
 title = {Evaluation of the {SPUR} Lisp architecture},
 booktitle = {Proceedings of the 13th annual International Symposium on Computer architecture},
 series = {ISCA},
 year = {1986},
 pages = {444--452},
 url = {http://dl.acm.org/citation.cfm?id=17407.17379}
}

** Taint tracking
*** Suh et al /Secure Program Execution via Dynamic Information Flow Tracking/
@InProceedings{secure_flow_track_asplos2004,
  author = 	 {G. Edward Suh and Jae W. Lee and David Zhang and Srinivas Devadas},
  title = 	 {Secure Program Execution via Dynamic Information Flow Tracking},
  booktitle =	 {International Conference on Architectural Support for Programming Languages and Operating Systems},
  shortbooktitle = {ASPLOS},
  pages =	 {85--96},
  year =	 2004,
  url = {http://csg.csail.mit.edu/pubs/memos/Memo-467/memo-467.pdf},
}
- Hardware-based taint tracking
- Goal: preventing control hijacking,
        without preventing buffer overflows
- Input assumed malicious, protected program not
- They use taint tracking to prevent jumps to tainted addresses
  and execution of tainted instructions.
- Explicit flows
  + they correctly propagate taints for pointers (loads and stores)
- No implicit flows
  "Note that we do not track any form of control dependency in this
   work. We believe that control dependency is not essential to
   detecting attacks of the kind considered in this paper. This is
   because while control may decide what values are assigned to a
   variable, the authenticity/spuriousness of each value that is
   assigned is determined by tracking computation and copy dependency
   on other authentic/spurious values."
   + I probably buy this point; this is one more setting in which
     implicit flows make little to no sense for integrity?
   + I guess this argument depends on the protected program not
     being malicious and in a certain sense "reasonable"

*** Minos (2004-2006)

@inproceedings{CrandallC04,
  author    = {Jedidiah R. Crandall and
               Frederic T. Chong},
  title     = {{Minos}: Control Data Attack Prevention Orthogonal to Memory
               Model},
  booktitle = {37th Annual International Symposium on Microarchitecture (MICRO)},
  shortbooktitle = {MICRO},
  publisher = {IEEE Computer Society},
  year      = {2004},
  isbn      = {0-7695-2126-6},
  pages     = {221-232},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/MICRO.2004.26},
  url       = {http://www.cs.ucsb.edu/~chong/papers/micro2004.pdf},
}
- "A work _very similar_ to Minos was published in (Suh et al 2004)
  and was developed independently in parallel."
- every 32-bit word of memory is augmented with a single
  integrity bit at the physical memory level and the
  same for the general-purpose registers
- very vaguely based on a variant of
  "Biba's [1977] low water-mark integrity policy"
  + "The policies in Suh et al. [2004], Newsome and Song [2005], and
    Costa et al.  [2005] are different from Minos’ policy. Minos'
    policy has the benefit of having been tested against 27 attacks
    (21 for real vulnerabilities and 10 of those actual attacks on
    Minos honeypots), many of which gave us insights causing us to
    change the policy. More about this is discussed in Section 3.1."
    - so it seems like a very _heuristic_ thing: they implement the
      policy that prevented actual attacks, whatever that is
    - this is not quite taint-tracking, but what is it precisely?
      + it just seems they've been more careful about the 1000
        special cases, e.g. invilving 8- and 16-bit data
    - explicit flows: there are subtle differences to Suh et at 2004
    - no implicit flows / "control dependency"
      + they have some nonsense about an alleged exception: making
        "all 8- and 16-bit immediate values be low integrity"; which
        to me seems to have nothing to do with implicit flows
  + as opposed to Suh et al, they have a fixed policy
- they have an actual implementation of this

@article{crandall:2006,
	Author = {Jedidiah R. Crandall and Frederic T. Chong and S. Felix Wu},
	Journal = {ACM Transactions on Architecture and Code Optimization},
	Keywords = {Symbolics; Operating-System; Tagged-Architecture; Integrity},
	Month = {December},
	Title = {{Minos}: Architectural Support for Protecting Control Data},
	Volume = 5,
         Pages={359--389},
         Issue=4,
	Year = {2006},
  url = {http://agl.cs.unm.edu/~crandall/p359-crandall.pdf}
}
- "This is an extension of a paper presented at MICRO-37
   [Crandall and Chong 2004b]"
- "a new section on  noncontrol data attacks (Section 8.4)"
   + the summary of this is that they don't actually address it, but
     instead "other kinds of attacks can be addressed through good
     design principles"
   + this is very much related to pointer_taintedness_dsn2005,
     where they address noncontrol data attacks

*** Pointer Taintedness (2004-2005)

@inproceedings{pointer_taintedness_dsn2005,
  author={Chen, S. and Xu, J. and Nakka, N. and Kalbarczyk, Z. and Iyer, R.K.},
  booktitle={International Conference on Dependable Systems and Networks (DSN)},
  shortbooktitle={DSN},
  title={Defeating memory corruption attacks via pointer taintedness detection},
  year={2005},
  pages={378-387},
  doi={10.1109/DSN.2005.36},
  url={http://research.microsoft.com/apps/pubs/default.aspx?id=73105},
}
- architectural technique to defeat both control data
  and non-control data attacks based on the notion of
  pointer taintedness
- extends(?) protection against memory corruption attacks
  from control flow integrity only (Suh et al 2004 and Minos 2004)
  to also cover no-control data attacks
- prevent any sort of usage/dereference of tainted pointers,
  not just using them as code pointers
- the main idea was introduced in a previous paper: ChenPKI04

@inproceedings{ChenPKI04,
  author    = {Shuo Chen and
               Karthik Pattabiraman and
               Zbigniew Kalbarczyk and
               Ravishankar K. Iyer},
  title     = {Formal Reasoning of Various Categories of Widely Exploited
               Security Vulnerabilities by Pointer Taintedness Semantics},
  booktitle = {19th International Information Security Conference (SEC)},
  publisher = {Kluwer},
  year      = {2004},
  isbn      = {1-4020-8142-1},
  pages     = {83-100},
  url       = {http://research.microsoft.com/pubs/73108/sec2004-taintedness-chen.pdf},
}

*** SIFT (2011)
@inproceedings{sift_cf2011,
  author    = {Meltem Ozsoy and Dmitry Ponomarev and  Nael B. Abu-Ghazaleh and Tameesh Suri},
  title     = {{SIFT}: a low-overhead dynamic information flow tracking architecture for {SMT} processors},
  booktitle = {Conf. Computing Frontiers},
  year      = {2011},
  pages     = {37},
  ee        = {http://doi.acm.org/10.1145/2016604.2016650},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.cs.binghamton.edu/~dima/cf11.pdf}
}

*** SHIFT (2008)
@inproceedings{shift_isca2008,
 author = {Chen, Haibo and Wu, Xi and Yuan, Liwei and Zang, Binyu and Yew, Pen-chung and Chong, Frederic T.},
 title = {From Speculation to Security: Practical and Efficient Information Flow Tracking Using Speculative Hardware},
 booktitle = {Proceedings of the 35th Annual International Symposium on Computer Architecture},
 shortbooktitle = {ISCA},
 series = {ISCA '08},
 year = {2008},
 isbn = {978-0-7695-3174-8},
 pages = {401--412},
 numpages = {12},
 ee = {http://dx.doi.org/10.1109/ISCA.2008.18},
 doi = {10.1109/ISCA.2008.18},
 acmid = {1382156},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Dynamic Information Flow Tracking, Taint tracking, Speculative Execution, Deferred Exception},
 url = {https://www.cs.ucsb.edu/~chong/papers/isca2008.pdf},
}

** Capabilities

*** Dennis, Van Horn  /Programming Semantics for Multiprogrammed Computations/

Jack B. Dennis and Earl C. Van Horn.
Programming Semantics for Multiprogrammed Computations,
CACM 9, 3 (March 1966): 143-155.

@article{Dennis1966,
title = {Programming Semantics for Multiprogrammed Computations},
author = {Jack B. Dennis and Earl C. {Van Horn}},
 journal = {Communications of the ACM},
volume = {9},
number = {3},
month = {March},
year = {1966},
pages = {143--155}
}
   - Influential early paper on capabilities
   - [[reading:dennis-van-horn.pdf][local copy]]

** Fat pointers
*** Brown, Grossman, Huang, Knight /A capability representation with embedded address and nearly-exact object bounds/

   - [[reading:aries005.pdf][local copy]]

@TechReport{brown00:aries,
  author =       {J. Brown and J.P. Grossman and A. Huang and Thomas F. {Knight, Jr.}},
  title =        {A capability representation with embedded address and nearly-exact object bounds},
  institution =  {MIT AI Lab},
  year =         2000,
  number =    5,
  month =     {April},
  note =      {Aries Project},
  url = {http://www.ai.mit.edu/projects/aries/Documents/Memos/ARIES-05.pdf}
}

*** HardBound and SoftBound and Watchdog

@inproceedings{DeviettiBMZ08,
  author    = {Joe Devietti and
               Colin Blundell and
               Milo M. K. Martin and
               Steve Zdancewic},
  title     = {{HardBound}: Architectural Support for Spatial Safety of the
               {C} Programming Language},
  booktitle = {13th International Conference on Architectural
               Support for Programming Languages and Operating Systems},
  shortbooktitle = {ASPLOS},
  year      = {2008},
  pages     = {103-114},
  ee        = {http://doi.acm.org/10.1145/1346281.1346295},
  url       = {http://acg.cis.upenn.edu/papers/asplos08_hardbound.pdf},
}

@inproceedings{baggy_bounds_usenix_security2009,
 author = {Akritidis, Periklis and Costa, Manuel and Castro, Miguel and Hand, Steven},
 title = {Baggy bounds checking: an efficient and backwards-compatible defense against out-of-bounds errors},
 booktitle = {Proceedings of the 18th Conference on USENIX Security Symposium},
 year = {2009},
 pages = {51--66},
 url = {http://dl.acm.org/citation.cfm?id=1855768.1855772}
}

@inproceedings{paricheck_ccs2010,
 author = {Younan, Yves and Philippaerts, Pieter and Cavallaro, Lorenzo and Sekar, R. and Piessens, Frank and Joosen, Wouter},
 title = {PAriCheck: an efficient pointer arithmetic checker for {C} programs},
 booktitle = {Proceedings of the 5th ACM Symposium on Information, Computer and Communications Security},
 year = {2010},
 pages = {145--156},
 url = {http://doi.acm.org/10.1145/1755688.1755707},
 doi = {10.1145/1755688.1755707}
}

@inproceedings{lightweight_bounds_checking_cgo2012,
 author = {Niranjan Hasabnis and Ashish Misra and R. Sekar},
 title = {Light-weight bounds checking},
 booktitle = {Proceedings of the Tenth International Symposium on Code Generation and Optimization},
 year = {2012},
 pages = {135--144},
 url = {http://doi.acm.org/10.1145/2259016.2259034},
 doi = {10.1145/2259016.2259034}
}

@inproceedings{NagarakatteZMZ09,
  author    = {Santosh Nagarakatte and
               Jianzhou Zhao and
               Milo M. K. Martin and
               Steve Zdancewic},
  title     = {{SoftBound}: highly compatible and complete spatial memory
               safety for {C}},
  booktitle = {ACM SIGPLAN Conference on Programming
               Language Design and Implementation (PLDI)},
  shortbooktitle = {PLDI},
  publisher = {ACM},
  year      = {2009},
  isbn      = {978-1-60558-392-1},
  pages     = {245-258},
  ee        = {http://doi.acm.org/10.1145/1542476.1542504},
  url       = {http://repository.upenn.edu/cgi/viewcontent.cgi?article=1941&context=cis_reports},
}

@article{Nagarakatte2013,
title = {{Hardware-Enforced Comprehensive Memory Safety}},
author = {Santosh Nagarakatte and Milo M. K. Martin and Steve Zdancewic},
journal = {IEEE Micro},
volume = {33},
number = {3},
pages = {38-47},
month = {May-June},
year = {2013},
url = {http://acg.cis.upenn.edu/papers/ieeemicro13_comprehensive_safety.pdf}
}

@inproceedings{NagarakatteMZ14,
  author    = {Santosh Nagarakatte and
               Milo M. K. Martin and
               Steve Zdancewic},
  title     = {{WatchdogLite}: Hardware-Accelerated Compiler-Based Pointer
               Checking},
  booktitle = {12th Annual IEEE/ACM International Symposium on Code Generation
               and Optimization},
  shortbooktitle = {CGO},
  year      = {2014},
  pages     = {175},
  publisher = {ACM},
  isbn      = {978-1-4503-2670-4},
  ee        = {http://doi.acm.org/10.1145/2544137.2544147},
  url       = {http://acg.cis.upenn.edu/papers/cgo14_watchdoglite.pdf},
}


@PhdThesis{nagarakatte_phd2013,
  author = 	 {Santosh Nagarakatte},
  title = 	 {Practical Low-overhead Enforcement of Memory Safety for {C} Programs},
  school = 	 {University of Pennsylvania},
  year = 	 {2012},
  url={http://www.cis.upenn.edu/~milom/papers/santosh_nagarakatte_phd.pdf}
}

@article{intel_ptrchecker2012,
  title={Pointer Checker: Easily Catch Out-of-Bounds Memory Access},
  organization = {{Intel} Corporation},
  year = 	 2012,
  url = {http://download-software.intel.com/sites/products/parallelmag/singlearticles/issue11/7080_2_IN_ParallelMag_Issue11_Pointer_Checker.pdf}
}


@misc{intel_mpx2013,
	title = {Introduction to {Intel Memory Protection} extensions},
	key = {Intel Corporation},
	howpublished = {\url{http://software.intel.com/en-us/articles/introduction-to-intel-memory-protection-extensions}},
	note = {Accessed: 2014-05-24}
}

@inproceedings{Houdek1981,
author = {M. E. Houdek and F. G. Soltis and R. L. Hoffman},
title = {{IBM System/38 Support for Capability-based Addressing}},
booktitle = {Proceedings of the Eighth Annual Symposium on Computer Architecture},
motnh = {May},
year = {1981},
pages = {341--348},
city = {Minneapolis},
state = {MN}
}

** Monitoring / Parallel checking
*** FlexiCore (2010) and Harmoni (2012)

@inproceedings{deng_micro2010,
 author = {Deng, Daniel Y. and Lo, Daniel and Malysa, Greg and Schneider, Skyler and Suh, G. Edward},
 title = {Flexible and Efficient Instruction-Grained Run-Time Monitoring Using On-Chip Reconfigurable Fabric},
 booktitle = {Proceedings of the 2010 43rd Annual IEEE/ACM International Symposium on Microarchitecture},
 shortbooktitle = {MICRO},
 series = {MICRO '43},
 year = {2010},
 isbn = {978-0-7695-4299-7},
 pages = {137--148},
 numpages = {12},
 ee = {http://dx.doi.org/10.1109/MICRO.2010.17},
 doi = {10.1109/MICRO.2010.17},
 acmid = {1935018},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Coprocessing Architecture, Reconfigurability, Security, Reliability},
 url = {http://www.csl.cornell.edu/~dlo/papers/deng-flexcore-micro10.pdf}
}

}

@inproceedings{deng_dsn2012,
  author    = {Daniel Y. Deng and
               G. Edward Suh},
  title     = {High-performance parallel accelerator for flexible and efficient
               run-time monitoring},
  booktitle = {IEEE/IFIP International Conference on Dependable Systems
               and Networks (DSN)},
  shortbooktitle = {DSN},
  publisher = {IEEE Computer Society},
  year      = {2012},
  isbn      = {978-1-4673-1624-8},
  pages     = {1-12},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/DSN.2012.6263925},
  url       = {http://tsg.ece.cornell.edu/lib/exe/fetch.php?media=pubs:flex-dsn2012.pdf},
}

@inproceedings{DengS11,
  author    = {Daniel Y. Deng and
               G. Edward Suh},
  title     = {Precise exception support for decoupled run-time monitoring
               architectures},
  booktitle = {IEEE 29th International Conference on Computer Design (ICCD)},
  publisher = {IEEE},
  year      = {2011},
  isbn      = {978-1-4577-1953-0},
  pages     = {437-438},
  ee        = {http://dx.doi.org/10.1109/ICCD.2011.6081438},
}
- Behind pay-wall

*** Log-Based Architectures (LBA)

Link: http://www.cs.cmu.edu/~lba/

Just a tiny extended abstract at a workshop
@inproceedings{ChenFGKMTAFGLS06,
  author    = {Shimin Chen and
               Babak Falsafi and
               Phillip B. Gibbons and
               Michael Kozuch and
               Todd C. Mowry and
               Radu Teodorescu and
               Anastassia Ailamaki and
               Limor Fix and
               Gregory R. Ganger and
               Bin Lin and
               Steven W. Schlosser},
  title     = {Log-based architectures for general-purpose monitoring of
               deployed code},
  booktitle = {1st Workshop on Architectural and System
               Support for Improving Software Dependability (ASID)},
  publisher = {ACM},
  year      = {2006},
  isbn      = {1-59593-576-2},
  pages     = {63-65},
  ee        = {http://doi.acm.org/10.1145/1181309.1181319},
  url       = {http://www.cs.cmu.edu/~lba/papers/LBA_asid2006.pdf},
}

[Very much compressed] journal version below;
this is probably still the authoritative version
@inproceedings{ChenKSFGMRRRV08,
  author    = {Shimin Chen and
               Michael Kozuch and
               Theodoros Strigkos and
               Babak Falsafi and
               Phillip B. Gibbons and
               Todd C. Mowry and
               Vijaya Ramachandran and
               Olatunji Ruwase and
               Michael P. Ryan and
               Evangelos Vlachos},
  title     = {Flexible Hardware Acceleration for Instruction-Grain Program
               Monitoring},
  booktitle = {35th International Symposium on Computer Architecture (ISCA)},
  shortbooktitle = {ISCA},
  year      = {2008},
  pages     = {377-388},
  publisher = {IEEE},
  ee        = {http://dx.doi.org/10.1109/ISCA.2008.20},
  url       = {http://www.cs.cmu.edu/~lba/papers/LBA-isca08.pdf},
}

@article{ChenKGRSMRVFR09,
  author    = {Shimin Chen and
               Michael Kozuch and
               Phillip B. Gibbons and
               Michael P. Ryan and
               Theodoros Strigkos and
               Todd C. Mowry and
               Olatunji Ruwase and
               Evangelos Vlachos and
               Babak Falsafi and
               Vijaya Ramachandran},
  title     = {Flexible Hardware Acceleration for Instruction-Grain Lifeguards},
  journal   = {IEEE Micro},
  volume    = {29},
  number    = {1},
  year      = {2009},
  pages     = {62-72},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/MM.2009.6},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://infoscience.epfl.ch/record/142967/files/lba_toppicks09.pdf},
}
CH: their goal is to make Valgrind-like instrumentation fast
    by trading off (a lot of) power consumption
    + they give up [at least] a whole core for monitoring one other core
CH: AddrCheck - they only care about accessing unallocated data
    - so writing past the end of a region is just fine, as long
      as it overwrites some other allocated region(s)?
    - it seems like a dumb example of what you can do with a single bit
    - safety not security
CH: MemCheck - prevents unitialized values from being used as pointers,
    branched upon, or passed to system calls
    - seems like a naive form of taint tracking
    - safety not security
CH: TaintCheck - seems similar to DIFT architectures like Suh 2004, etc
CH: TaintCheck with detailed tracking - interesting, but not explained
CH: LockSet - interesting, see Savage et all, SOSP/TOCS 1997 paper
- Inheritance tracking for propagation-style metadata updates
  - CH: nice idea, but the restriction to the unary case is severe
    + they can only do the unary case fast
    + performance-security trade-off
  - "We assume that nonunary operations (those that combine more than
     one metadata source) propagate a ‘‘clean’’ result to the
     destination. Although at first thought this assumption might
     appear too liberal, we argue it is valid if
     1.  the lifeguard reports an error if a source of a nonunary
         operation is unclean, or
         [so adding tainted values is necessary an error]
     2.  the semantics underlying the metadata values imply that, for
         all practical purposes, the result of a nonunary operation is
         a clean value.
         [so adding tainted values returns an untainted value; wonderful]
     Perhaps surprisingly, both MemCheck and TaintCheck are candidates
     for unary inheritance tracking: MemCheck satisfies property 1,
     and TaintCheck satisfies property 2."
  - CH: MemCheck is a very unnatural policy to start from
  - CH: for TaintCheck they make strong assumptions
        (i.e. the attacker gets to respond and adapt to
	such imperfect defenses):
       "the literature on security reports that overwrite attacks
	(such as buffer overflow) rely almost exclusively on
	direct copying [...]  Finally, although there is always a
	concern that attackers can specifically work around
	unary-only propagation, TaintCheck identifies attacks
	before any attacking code executes. Thus, the attack is
	constrained to exploit the original application code, not
	any injected code, which is substantially more challenging
	to proceed[ha?] against. For these reasons, we believe
	that assuming taintedness does not propagate through
	nonunary operations represents a good performance/
	coverage trade-off."
        + the assumption is that DIFT is only used for preventing
          buffer overflow problems; so no SQL injection protection
          or anything like that
        + the argument that binary buffer overflows can't be found
          by the dumbest kind of fuzzing is ridiculous
  - CH: this assumption is probably true for the coloring-based
	memory safety "label model" in the TOS paper?
	(each pointer only has one associated region)
  - CH: the assumption is that the metadata of registers is always
        inherited from the metadata of a single memory address; so
        instead of tracking metadata for registers, they are tracking
        the single memory location from which they come
- Idempotent filters for metadata checks
  - CH: related to our idea of caching contracts using signatures
  - "many checks are idempotent (and thus redundant). For example,
     once AddrCheck checks that a memory location is allocated,
     subsequent loads and stores to the same address need not be
     checked until the next free event."
     + they do have to invalidate previous checks:
       "the ETCT specifies invalidation policies for the IF
        cache. Checks are only idempotent as long as the underlying
        metadata remain unmodified. If the relevant metadata changes,
        cached checks must be invalidated.
  - the lifeguard IF cache is a TMU-like cache for the allow part of rules
- Metadata-TLB for metadata mapping
  - this is about caching address -> metadata lookups;
    they don't have anything like a rule cache
- CH: Are they (also) cheating on the evaluation?
  + "We chose CPU-intensive SPEC2000 integer benchmarks to ‘‘stress
    test’’ instruction-grain monitoring."
    - this means that they have few system calls, which for them
      are the only places where the two cores need to synchronize
- CH: the monitors they write in this setting are short but quite
      tricky given all the optimizations; so maybe some verification
      would be useful here too
- CH: the experiments here are for one core monitoring one other core;
      however, in the "relaxed DIFT" paper below they use as much as
      9 monitoring cores (1 master + 8 workers)


@inproceedings{RuwaseGMRCKR08,
  author    = {Olatunji Ruwase and
               Phillip B. Gibbons and
               Todd C. Mowry and
               Vijaya Ramachandran and
               Shimin Chen and
               Michael Kozuch and
               Michael P. Ryan},
  title     = {Parallelizing dynamic information flow tracking},
  booktitle = {20th Annual ACM Symposium
               on Parallelism in Algorithms and Architectures (SPAA)},
  shortbooktitle = {SPAA},
  publisher = {ACM},
  year      = {2008},
  isbn      = {978-1-59593-973-9},
  pages     = {35-45},
  ee        = {http://doi.acm.org/10.1145/1378533.1378538},
  url       = {http://www.cs.cmu.edu/~lba/papers/LBA-spaa08.pdf},
}
- "we consider a variant of DIFT that tracks the information flow only
   through unary operations (relaxed DIFT)"
- parallel algorithm using symbolic inheritance tracking
  + "reduces the overhead to as low as 1.2X using 9 monitoring cores on
     a 16-core chip multiprocessor"
  + this is about paralleling on more than one monitoring core:
    9 cores monitor just the 1 core that runs the sequential app!
- master process splits up work + resolves "inheritance tables"
  + workers produce symbolic inheritance tables
  + for complicated labels (more than one bit of taint) the slaves
    compute symbolic expressions involving joins and the master
    performs the actual joins of concrete labels -- but aren't exactly
    the concrete joins on sophisticated lattices the bottleneck?
- relaxed DIFT
  + just that the main idea of this paper / the LBA work _not_ to
    compute any joins, but instead let L1 \/ L2 = bottom, for any L1
    and L2 ... WTF? very relaxed indeed
  + they do provide numbers for both (full) DIFT and relaxed DIFT


They have more recent papers on LBA at
http://www.cs.cmu.edu/~lba/

*** Speck

@inproceedings{NightingalePCF08,
  author    = {Edmund B. Nightingale and
               Daniel Peek and
               Peter M. Chen and
               Jason Flinn},
  title     = {Parallelizing security checks on commodity hardware},
  booktitle = { 13th International Conference on Architectural
               Support for Programming Languages and Operating Systems (ASPLOS)},
  publisher = {ACM},
  year      = {2008},
  isbn      = {978-1-59593-958-6},
  pages     = {308-318},
  ee        = {http://doi.acm.org/10.1145/1346281.1346321},
  url       = {http://research.microsoft.com/apps/pubs/default.aspx?id=75318},
}

** Gate level timing side channel prevention (Berkeley folks)
*** Tiwari et. al. /Complete information flow tracking from the gates up/
@inproceedings{Tiwari2009,
title = {{Complete information flow tracking from the gates up}},
author = {M. Tiwari and H. Wassel and B. Mazloom and S. Mysore and F. Chong and T. Sherwood},
booktitle = {Proc. 14th ASPLOS},
year = {2009},
pages = {109-120}
}

*** Tiwari et. al. /Crafting a usable microkernel, processor, and I/O system with strict and provable information flow security/
@inproceedings{tiwari11:crafting_usable_microkernel,
 author = {Tiwari, Mohit and Oberg, Jason K. and Li, Xun and Valamehr, Jonathan and Levin, Timothy and Hardekopf, Ben and Kastner, Ryan and Chong, Frederic T. and Sherwood, Timothy},
 title = {Crafting a usable microkernel, processor, and {I/O} system with strict and provable information flow security},
 booktitle = {Proceeding of the 38th annual international symposium on Computer architecture},
 series = {ISCA},
 year = 2011,
 isbn = {978-1-4503-0472-6},
 location = {San Jose, California, USA},
 pages = {189--200},
 numpages = 12,
 doi = {http://doi.acm.org/10.1145/2000064.2000087},
 acmid = 2000087,
 publisher = {ACM},
 keywords = {gate level information flow tracking, high assurance systems, non-interference},
 url = {http://www.cs.ucsb.edu/~chong/papers/111-glift-isca11.pdf}
}

*** Hu et. al. /Theoretical Fundamentals of Gate Level Information Flow Tracking/
@article{Hu2011,
title = {{Theoretical Fundamentals of Gate Level Information Flow Tracking}},
author = {Wei Hu and Jason Oberg and Ali Irturk and Mohit Tiwari and Timothy Sherwood and Dejun Mu and Ryan Kastner},
journal = {{IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems}},
year = {2011},
pages = {1128-1140},
volume = {30},
number = {8}
}

** Random stuff
*** Clause et al /Effective memory protection using dynamic tainting/

@inproceedings{ClauseDOP07,
  author    = {James A. Clause and
               Ioannis Doudalis and
               Alessandro Orso and
               Milos Prvulovic},
  title     = {Effective memory protection using dynamic tainting},
  booktitle = {22nd IEEE/ACM International Conference on Automated Software
               Engineering (ASE)},
  shortbooktitle = {ASE},
  publisher = {ACM},
  year      = {2007},
  isbn      = {978-1-59593-882-4 },
  pages     = {284-292},
  ee        = {http://doi.acm.org/10.1145/1321631.1321673},
  url       = {http://www.cc.gatech.edu/~orso/papers/clause.doudalis.orso.prvulovic.pdf},
}

***

@inproceedings{TiwariAMVS08,
  author    = {Mohit Tiwari and
               Banit Agrawal and
               Shashidhar Mysore and
               Jonathan Valamehr and
               Timothy Sherwood},
  title     = {A small cache of large ranges: Hardware methods for efficiently
               searching, storing, and updating big dataflow tags},
  booktitle = {41st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)},
  year      = {2008},
  pages     = {94-105},
  publisher = {IEEE Computer Society},
  ee        = {http://dx.doi.org/10.1109/MICRO.2008.4771782},
  url       = {http://www.cs.ucsb.edu/~tiwari/pubs/MICRO-08-rangecache.pdf},
}

*** Shioya et al /Low-Overhead Architecture for Security Tag/
@inproceedings{security_tag_prdc2009,
 author = {Shioya, Ryota and Kim, Daewung and Horio, Kazuo and Goshima, Masahiro and Sakai, Shuichi},
 title = {Low-Overhead Architecture for Security Tag},
 booktitle = {Proceedings of the 2009 15th IEEE Pacific Rim International Symposium on Dependable Computing},
 series = {PRDC '09},
 year = {2009},
 isbn = {978-0-7695-3849-5},
 pages = {135--142},
 numpages = {8},
 url = {http://dx.doi.org/10.1109/PRDC.2009.30},
 doi = {10.1109/PRDC.2009.30},
 acmid = {1684738},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 keywords = {Dependable Architecture, Tagged Architecture, Information security, DIFT, Multi-level table},
}

*** N. Zeldovich, H. Kannan, M. Dalton, and C. Kozyrakis. /Hardware enforcement of application security policies using tagged memory/. In OSDI, 2008.

  HW-level DIFC (coarse grained?)
  Loki project
  Lostar operating system (hardware-assist for HiStar)

@inproceedings{zeldovich08:loki,
 author = {Zeldovich, Nickolai and Kannan, Hari and Dalton, Michael and Kozyrakis, Christos},
 title = {Hardware enforcement of application security policies using tagged memory},
 booktitle = {{Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation}},
 shortbooktitle = {USENIX OSDI},
 series = {OSDI},
 year = 2008,
 location = {San Diego, California},
 pages = {225--240},
 numpages = 16,
 acmid = 1855757,
 publisher = {USENIX Association},
 url = {http://people.csail.mit.edu/nickolai/papers/zeldovich-loki.pdf},
}


  Overall, we were not that impressed.  Basically, they added hardware and
  slowed their system down.  The only net benefit we could tease out was the
  reduction of their TCB size by a few thousands lines of code.  Also, the
  exposition was terribly confusing.

  No IFC:
  \amd{Mondarian and Loki are
  really about having fine-grained tags, not about IFC.  There is no
  propagation going on here.}

*** Song and Alves-Foss /Security Tagging for a Zero-Kernel Operating System/

@inproceedings{song2013security,
  title={Security Tagging for a Zero-Kernel Operating System},
  author={Song, Jia and Alves-Foss, Jim},
  booktitle={System Sciences (HICSS), 2013 46th Hawaii International Conference on},
  pages={5049--5058},
  year={2013},
  organization={IEEE},
  url = {http://www.computer.org/csdl/proceedings/hicss/2013/4892/00/4892f049.pdf},
}
CH: seems like crappy paper
"We have chosen the RTEMS [1] run-time executive system
to implement a new security tagging scheme, since it
has been designed with almost no protection. Our tagging
scheme secures RTEMS by providing access control for code and data."

Section 2 (Background) is a short version of a MSc thesis that is
supposed to contain "a more detailed survey":
  [12] J. Song. Development and evaluation of a security tagging
  scheme for a real-time zero operating system kernel.
  Master's thesis, University of Idaho, 2012.
This thesis doesn't seem available though.
It's very much about the (very small) number of bits various schemes
use for tags (very often just 1 bit, sometimes 2, up to 4 bits).
- LOKI is an exception with its 32 bits tags,
  but then these tags are asigned to whole pages not individual values
- TIARA is also an exception? How many bits did TIARA have?
Some of these schemes target buffer overflows and the like,
while others target access control. None of the surveyed schemes seems
targeted at sound IFC / noninterference; RIFLE is not mentioned at all.

*** Chen-Jamkhedkar-Lee /A Software-Hardware Architecture for Self-Protecting Data/ (2012)
@inproceedings{ChenJL12,
  author    = {Yu-Yuan Chen and
               Pramod A. Jamkhedkar and
               Ruby B. Lee},
  title     = {A software-hardware architecture for self-protecting data},
  booktitle = {ACM Conference on Computer and Communications Security},
  shortbooktitle = {CCS},
  year      = {2012},
  pages     = {14-27},
  ee        = {http://doi.acm.org/10.1145/2382196.2382201},
  publisher = {ACM},
  isbn      = {978-1-4503-1651-4},
  url       = {http://palms.princeton.edu/system/files/chen_ccs12.pdf},
}


* Compilation, intermediate representations, runtime support

** SSA

*** Kelsey /A correspondence between continuation passing style and static single assignment form/

  - [[reading:kelsey-ssa-cps-1995.pdf][local copy]]

@InProceedings{kelsey95:CPS_SSA,
 author = {Kelsey, Richard A.},
 title = {A correspondence between continuation passing style and static single assignment form},
 booktitle = {Papers from the Workshop on Intermediate Representations},
 series = {IR},
 year = 1995,
 isbn = {0-89791-754-5},
 location = {San Francisco, California, United States},
 pages = {13--22},
 numpages = 10,
 url = {http://www.cs.purdue.edu/homes/suresh/502-Fall2008/papers/kelsey-ssa-cps.pdf},
 doi = {http://doi.acm.org/10.1145/202529.202532},
 acmid = 202532,
 publisher = {ACM},
}

** CFG

*** Shivers /The Anatomy of a Loop/

  - syntactic encoding of dominator structure

@InProceedings{shivers05:anatomy_loop,
  author =       {Shivers, Olin},
  title =        {The anatomy of a loop: a story of scope and control},
  booktitle = {Proceedings of ICFP},
  year =      2005,
  address =   {Tallinn, Estonia},
  month =     {September},
  publisher = {ACM},
  url = {http://www.ccs.neu.edu/home/shivers/papers/loop.pdf}
}

** Garbage Collection

*** McCreight, Chevalier, Tolmach  /A Certified Framework for Compiling and Executing Garbage-collected Languages/

  - Extends the CMinor intermediate language from CompCert with GC primitives;
    sufficiently flexible for free-list, semispace, and generational collectors.

@inproceedings{mccreight10:GC_verif,
 author = {McCreight, Andrew and Chevalier, Tim and Tolmach, Andrew},
 title = {A certified framework for compiling and executing garbage-collected languages},
 booktitle = {Proceedings of the 15th International Conference on Functional Programming},
 series = {ICFP},
 year = {2010},
 isbn = {978-1-60558-794-3},
 location = {Baltimore, Maryland, USA},
 pages = {273--284},
 numpages = {12},
 url = {http://web.cecs.pdx.edu/~apt/icfp10.pdf},
 doi = {http://doi.acm.org/10.1145/1863543.1863584},
 acmid = {1863584},
 publisher = {ACM},
 keywords = {certified compilation, garbage collection, haskell compilation, program proof, the coq theorem prover},
}


** Compiler Structure

*** D. Sarkar, O. Waddel, R. K. Dybvig /A nanopass framework for compiler education/

@article{SarkarWD05,
  author    = {Dipanwita Sarkar and
               Oscar Waddell and
               R. Kent Dybvig},
  title     = {Educational Pearl: A Nanopass framework for compiler education},
  journal   = {Journal of Functional Programming},
  volume    = {15},
  number    = {5},
  year      = {2005},
  pages     = {653-667},
  ee        = {http://dx.doi.org/10.1017/S0956796805005605},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


** Register Allocation

*** Wimmer, Mossenbock 2005 /Optimized Interval Splitting in a Linear Scan Register Allocator/

@inproceedings{Wimmer:2005,
 author = {Wimmer, Christian and M\"{o}ssenb\"{o}ck, Hanspeter},
 title = {Optimized Interval Splitting in a Linear Scan Register Allocator},
 booktitle = {Proceedings of the 1st ACM/USENIX International Conference on Virtual Execution Environments},
 series = {VEE '05},
 year = {2005},
 isbn = {1-59593-047-7},
 location = {Chicago, IL, USA},
 pages = {132--141},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/1064979.1064998},
 doi = {10.1145/1064979.1064998},
 acmid = {1064998},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {compilers, graph-coloring, java, just-in-time compilation, linear scan, optimization, register allocation},
} 

* Verification

** Coq reference manual

@manual{coq_manual,
 author      = {{The Coq Development Team}},
 title       = {The {Coq} Reference Manual, version 8.4},
 month       = Aug,
 year        = {2012},
 note        = {Available electronically at \url{http://coq.inria.fr/doc}}
}

** GYPSY project

*** Bevier, /Kit: a study in operating system verification/

BCP: This is a fantastic paper that we should all read!

Kit: a study in operating system verification
Bevier, W.R.
Software Engineering, IEEE Transactions, Nov 1989
Volume: 15, Issue:11
On page(s): 1382 - 1396
http://ieeexplore.ieee.org/xpl/freeabs_all.jsp?arnumber=41331

[[reading:bevierKit.pdf][local copy]]

*** Young, A Verified Code Generator for a Subset of Gypsy

A Verified Code Generator for a Subset of Gypsy
William D. Young
Technical Report 33
October 1988
Computational Logic Inc.

local copy]]

*** Misc papers

A grand Challenge Proposal for formal Methods: A Verified Stack
J Strother Moore

http://userweb.cs.utexas.edu/users/moore/publications/grand-challenge.pdf

A verified operating system kernel (KIT)
WR Bevier 1987
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.129.1767&rep=rep1&type=pdf

The "Piton book"
Piton: a mechanically verified assembly-level language
JS Moore 1996
http://books.google.com/books?hl=en&lr=&id=Y09c047gV10C&oi=fnd&pg=PR7&dq=piton+mechanically+verified+assembly+level+language&ots=yRIq7sXxVx&sig=LDeaIloV3ZTcvPeuuzVkREtEnC8

A mechanically verified language implementation (TR)
JS Moore 1989
http://www.cs.utexas.edu/users/boyer/ftp/cli-reports/030.pdf

A mechanically verified code generator
WD Young 1989
http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.128.6975&rep=rep1&type=pdf

@inproceedings{FlanaganSDF93,
  author    = {Cormac Flanagan and
               Amr Sabry and
               Bruce F. Duba and
               Matthias Felleisen},
  title     = {The Essence of Compiling with Continuations},
  booktitle = {Conference on Programming
               Language Design and Implementation (PLDI)},
  year      = {1993},
  pages     = {237-247},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/155090.155113},
  url       = {http://users.soe.ucsc.edu/~cormac/papers/pldi93.pdf},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@misc{ITSEC,
  author = {Commission of the European Communities},
  title = "Information Technology Security Evaluation Criteria
    ({ITSEC}). {Provisional} Harmonized Criteria: Version 1.2",
  howpublished = {Office for Official Publications of the
    European Communities},
  month = jun,
  year = {1991},
  url = {http://www.ssi.gouv.fr/site_documents/ITSEC/ITSEC-uk.pdf}
}

@techreport{Steele77,
  author = {Steele, Jr., Guy Lewis},
  title = {Debunking the 'Expensive Procedure Call' Myth, or,
    {Procedure} Call Implementations Considered Harmful, or, {Lambda}:
    The Ultimate {GOTO}"},
  institution = {MIT AI Lab},
  number = {AI Lab Memo AIM-443},
  month = oct,
  year = {1977},
  url = {http://repository.readscheme.org/ftp/papers/ai-lab-pubs/AIM-443.pdf}
}

@inproceedings{LattnerA04,
  author    = {Chris Lattner and
               Vikram S. Adve},
  title     = {{LLVM:} A Compilation Framework for Lifelong Program Analysis
               {\&} Transformation},
  booktitle = {2nd International Symposium on Code Generation
               and Optimization (CGO)},
  year      = {2004},
  pages     = {75-88},
  publisher = {IEEE Computer Society},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/CGO.2004.1281665},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://llvm.org/pubs/2004-01-30-CGO-LLVM.html}
}


@inproceedings{FindlerF02,
  author    = {Robert Bruce Findler and
               Matthias Felleisen},
  title     = {Contracts for higher-order functions},
  booktitle = {Proceedings of the 7th International Conference
               on Functional Programming},
  series = {ICFP},
  year      = {2002},
  pages     = {48-59},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/581478.581484},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.eecs.northwestern.edu/~robby/pubs/papers/ho-contracts-techreport.pdf}
}

@inproceedings{ClaessenH00,
  author    = {Koen Claessen and
               John Hughes},
  title     = {{QuickCheck}: a lightweight tool
               for random testing of {Haskell} programs},
  booktitle = {5th ACM SIGPLAN International Conference
               on Functional Programming (ICFP)},
  shortbooktitle = {ICFP},
  series    = {ICFP},
  publisher = {ACM},
  year      = {2000},
  pages     = {268-279},
  ee        = {http://doi.acm.org/10.1145/351240.351266},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.eecs.northwestern.edu/~robby/courses/395-495-2009-fall/quick.pdf}
}


** Compiler verification

*** Leroy  /Formal verification of a realistic compiler/

@article{leroy09:compcert,
  author = {Xavier Leroy},
  title = {Formal verification of a realistic compiler},
  journal = {Communications of the ACM},
  shortjournal = {CACM},
  year = 2009,
  volume = 52,
  number = 7,
  pages = {107--115},
  url = {http://gallium.inria.fr/~xleroy/publi/compcert-CACM.pdf},
}

@article{Leroy-Blazy-memory-model,
  author = {Xavier Leroy and Sandrine Blazy},
  title = {Formal verification of a {C}-like memory model
                         and its uses for verifying program transformations},
  journal = {Journal of Automated Reasoning},
  shortjournal = {JAR},
  year = {2008},
  volume = 41,
  number = 1,
  pages = {1--31},
  xtopic = {mechsem},
  urllocal = {http://gallium.inria.fr/~xleroy/publi/memory-model-journal.pdf},
  urlpublisher = {http://dx.doi.org/10.1007/s10817-008-9099-0},
  abstract = {
This article presents the formal verification, using the Coq proof
assistant, of a memory model for low-level imperative languages such
as C and compiler intermediate languages.  Beyond giving semantics
to pointer-based programs, this model supports reasoning over
transformations of such programs.  We show how the properties of the
memory model are used to prove semantic preservation for three passes
of the Compcert verified compiler.},
  url = {http://gallium.inria.fr/~xleroy/publi/memory-model-journal.pdf},
}

@techreport{Leroy-Appel-Blazy-Stewart-memory-v2,
  author = {Xavier Leroy and Andrew W. Appel and Sandrine Blazy and Gordon Stewart},
  title = {The {CompCert} Memory Model, Version 2},
  institution = {INRIA},
  type = {Research report},
  number = {RR-7987},
  year = {2012},
  month = jun,
  url = {http://hal.inria.fr/hal-00703441},
  xtopic = {compcert},
  abstract = {A memory model is an important component of the formal
                  semantics of imperative programming languages: it
                  specifies the behavior of operations over memory
                  states, such as reads and writes. The formally
                  verified CompCert C compiler uses a sophisticated
                  memory model that is shared between the semantics of
                  its source language (the CompCert subset of C) and
                  intermediate languages. The algebraic properties of
                  this memory model play an important role in the
                  proofs of semantic preservation for the
                  compiler. The initial design of the CompCert memory
                  model is described in an article by Leroy and Blazy
                  (J. Autom. Reasoning 2008). The present research
                  report describes version 2 of this memory model,
                  improving over the main limitations of version
                  1. The first improvement is to expose the
                  byte-level, in-memory representation of integers and
                  floats, while preserving desirable opaqueness
                  properties of pointer values. The second improvement
                  is the integration of a fine-grained mechanism of
                  permissions (access rights), which supports more
                  aggressive optimizations over read-only data, and
                  paves the way towards shared-memory, data-race-free
                  concurrency in the style of Appel's Verified
                  Software Toolchain project.}
}

** Random testing

*** Regehr et al papers

@inproceedings{regehr2012test,
  title={Test-case reduction for {C} compiler bugs},
  author={Regehr, J. and Chen, Y. and Cuoq, P. and Eide, E. and Ellison, C. and Yang, X.},
  booktitle={33rd ACM SIGPLAN conference on Programming Language Design and Implementation},
  pages={335--346},
  year={2012},
  organization={ACM},
  url = {http://www.cs.utah.edu/~regehr/papers/pldi12-preprint.pdf},
}

@inproceedings{YangCER11,
  author    = {Xuejun Yang and
               Yang Chen and
               Eric Eide and
               John Regehr},
  title     = {Finding and understanding bugs in {C} compilers},
  booktitle = {ACM SIGPLAN Conference on Programming
               Language Design and Implementation},
  series    = {PLDI},
  year      = {2011},
  pages     = {283-294},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/1993498.1993532},
  url       = {http://www.cs.utah.edu/~regehr/papers/pldi11-preprint.pdf}
}

*** Palka et al, /Testing an optimising compiler by generating random lambda terms/

@inproceedings{palka2011testing,
  title={Testing an optimising compiler by generating random lambda terms},
  author={Pa{\l}ka, M.H. and Claessen, K. and Russo, A. and Hughes, J.},
  booktitle={Proceedings of the 6th International Workshop on Automation of Software Test},
  pages={91--97},
  year={2011},
  organization={ACM}
}

*** Reich et al, /Lazy Generation of Canonical Test Programs/

@article{reichlazy,
  title={Lazy Generation of Canonical Test Programs},
  Author={Reich, J.S. and Naylor, M. and Runciman, C.}
}


* Security

** Vulnerability Ontologies, Weakness Enumeration, etc.

@MISC{CWE_MITRE_URL,
author = {MITRE},
title = {Common Weakness Enumeration},
year = {2013},
howpublished={\url{http://cwe.mitre.org/}}
}

@MISC{CWE25_MITRE_URL,
author = {MITRE},
title = {Top 25 Common Weakness Enumeration},
year = {2013},
howpublished={\url{https://cwe.mitre.org/top25/}}
}

** Eternal War in Memory

@inproceedings{Szekeres2013,
  author    = {Laszlo Szekeres and
               Mathias Payer and
               Tao Wei and
               Dawn Song},
  title     = {{SoK}: Eternal War in Memory},
  booktitle = {IEEE Symposium on Security and Privacy},
  shortbooktitle = {IEEE S\&P},
  publisher = {IEEE Computer Society},
  year      = {2013},
  isbn      = {978-1-4673-6166-8},
  pages     = {48-62},
  ee        = {http://doi.ieeecomputersociety.org/10.1109/SP.2013.13},
  url       = {http://lenx.100871.net/papers/War-oakland-CR.pdf},
}

** Control Flow Integrity

@inproceedings{Abadi2005,
  author    = {Mart\'{\i}n Abadi and
               Mihai Budiu and
               {\'U}lfar Erlingsson and
               Jay Ligatti},
  title     = {Control-flow integrity},
  booktitle = {12th ACM Conference on Computer and Communications Security},
  shortbooktitle = {ACM CCS},
  year      = {2005},
  pages     = {340-353},
  ee        = {http://doi.acm.org/10.1145/1102120.1102165},
  isbn      = {1-59593-226-7},
  publisher = {ACM},
  url       = {https://research.microsoft.com/apps/pubs/?id=69217},
}

@article{AbadiBEL09,
  author    = {Mart\'{\i}n Abadi and
               Mihai Budiu and
               {\'U}lfar Erlingsson and
               Jay Ligatti},
  title     = {Control-flow integrity principles, implementations, and
               applications},
  journal   = {ACM Transactions on Information System Security},
  shortjournal = {TISSEC},
  volume    = {13},
  number    = {1},
  year      = {2009},
  url       = {http://users.soe.ucsc.edu/~abadi/Papers/cfi-tissec-revised.pdf},
}

@inproceedings{ErlingssonAVBN06,
  author    = {{\'U}lfar Erlingsson and
               Mart\'{\i}n Abadi and
               Michael Vrable and
               Mihai Budiu and
               George C. Necula},
  title     = {{XFI}: Software Guards for System Address Spaces},
  booktitle = {7th Symposium on Operating Systems Design and Implementation},
  shortbooktitle = {OSDI},
  year      = {2006},
  pages     = {75-88},
  ee        = {http://www.usenix.org/events/osdi06/tech/erlingsson.html},
  publisher = {USENIX Association},
  isbn      = {1-931971-47-1},
  url       = {http://cseweb.ucsd.edu/~mvrable/papers/2006-osdi-xfi.pdf},
}

DUPLICATE
@inproceedings{Erlingsson2006,
author = {Ulfar Erlingsson and Martin Abadi and Michael Vrable and Mihai Budiu
and George C. Necula},
title = {{XFI: Software Guards for System Address Spaces}},
booktitle = {Proc. USENIX OSDI},
year = {2006},
pages = {75-88}
}

@inproceedings{Zhang2013,
title = {{Practical Control Flow Integrity \& Randomization for Binary Executables}},
author = {Chao Zhang and Tao Wei and Zhaofeng Chen and Lei Duan and Laszlo Szekeres and Stephen McCamant and Dawn Song and Wei Zou},
booktitle = {{IEEE Symposium on Security and Privacy}},
shortbooktitle = {IEEE S\&P},
year = {2013},
url = {http://bitblaze.cs.berkeley.edu/papers/CCFIR-oakland-CR.pdf},
}

@inproceedings{outofcontrol_ieeesp2014,
title = {Out Of Control: Overcoming Control-Flow Integrity},
author = {Enes G\"{o}kta\c{s} and Elias Athanasopoulos and Herbert Bos and Georgios Portokalidis},
booktitle = {{IEEE Symposium on Security and Privacy}},
shortbooktitle = {IEEE S\&P},
year = {2014},
url = {http://users.ics.forth.gr/~elathan/papers/oakland14.pdf},
}

@inproceedings{DaviSLM14,
  author    = {Lucas Davi and
               Ahmad{-}Reza Sadeghi and
               Daniel Lehmann and
               Fabian Monrose},
  title     = {Stitching the Gadgets: On the Ineffectiveness of Coarse-Grained Control-Flow
               Integrity Protection},
  booktitle = {23rd {USENIX} Security Symposium},
  shortbooktitle = {{USENIX} Security},
  year      = {2014},
  pages     = {401--416},
  url       = {https://www.usenix.org/conference/usenixsecurity14/technical-sessions/presentation/davi},
}

@inproceedings{DaviKS14,
  author    = {Lucas Davi and
               Patrick Koeberl and
               Ahmad-Reza Sadeghi},
  title     = {Hardware-Assisted Fine-Grained Control-Flow Integrity: Towards
               Efficient Protection of Embedded Systems Against Software
               Exploitation},
  booktitle = {51st Design Automation Conference},
  shortbooktitle = {DAC},
  year      = {2014},
  pages     = {1-6},
  ee        = {http://doi.acm.org/10.1145/2593069.2596656},
  publisher = {ACM},
  isbn      = {978-1-4503-2730-5},
  url       = {https://www.informatik.tu-darmstadt.de/fileadmin/user_upload/Group_TRUST/PubsPDF/hardware-assisted-cfi.pdf},
}

@misc{MashtizadehBMB14,
  title = {Cryptographically Enforced Control Flow Integrity},
  author = {Ali Jose Mashtizadeh and
            Andrea Bittau and
            David Mazi\'eres and
            Dan Boneh},
  howpublished = {arXiv:1408.145},
  url = {http://arxiv.org/abs/1408.1451},
}

@article{Smashing1996,
author = {{Aleph One}},
title = {{Smashing the Stack for Fun and Profit}},
journal = {Phrack},
volume = {7},
number = {49},
month = {November},
year = {1996}
}

@inproceedings{NiuT14,
  author    = {Ben Niu and
               Gang Tan},
  title     = {Modular control-flow integrity},
  booktitle = {ACM SIGPLAN Conference on Programming Language Design
                  and Implementation},
  shortbooktitle = {PLDI},
  year      = {2014},
  pages     = {58},
  publisher = {ACM},
  isbn      = {978-1-4503-2784-8},
  ee        = {http://doi.acm.org/10.1145/2594291.2594295},
  url       = {http://www.cse.lehigh.edu/~gtan/paper/mcfi.pdf},
}

@inproceedings{CriswellDA14,
  title = {{KCoFI}: Complete Control-Flow Integrity for Commodity
                  Operating System Kernels},
  author = {John Criswell and
            Nathan Dautenhahn and
            Vikram Adve},
  booktitle = {IEEE Security and Privacy Symposium},
  shortbooktitle = {IEEE S\&P},
  year = 2014,
  url = {http://sva.cs.illinois.edu/pubs/KCoFI-Oakland-2014.pdf},
}

@inproceedings{ZhaoLSR11,
  author    = {Lu Zhao and
               Guodong Li and
               Bjorn De Sutter and
               John Regehr},
  title     = {{ARMor}: fully verified software fault isolation},
  shortbooktitle = {EMSOFT},
  booktitle = {11th International Conference on Embedded Software},
  pages     = {289-298},
  ee        = {http://doi.acm.org/10.1145/2038642.2038687},
  publisher = {ACM},
  year      = {2011},
  isbn      = {978-1-4503-0714-7},
  url       = {http://www-new.cs.utah.edu/~regehr/papers/emsoft11.pdf},
}

** Return-oriented programming

@misc{Newsham1997,
author = {Tim Newsham},
title = {{Bugtraq: Re: Smashing the Stack: prevention?}},
month = {Apr.},
year = {1997},
url = {http://seclists.org/bugtraq/1997/Apr/129}
}

@misc{SolarDesigner1997,
author = {{Solar Designer}},
title = {{Bugtraq: Getting around non-executable stack (and fix)}},
month = {Aug.},
year = {1997},
url = {http://seclists.org/bugtraq/1997/63}
}

@misc{McDonald1999,
author = {John McDonald},
title = {{Bugtraq: Defeating Solaris/SPARC Non-Executable Stack Protection}},
month = {Mar.},
year = {1999},
url = {http://seclists.org/bugtraq/1999/Mar/4}
}

@inproceedings{Buchanan2008,
title = {{When Good Instructions Go Bad: Generalizing Return-Oriented Programming to RISC}},
author = {Erik Buchanan and Ryan Roemer and Hovav Shacham and Stefan Savage},
booktitle = {Proc. ACM CCS},
month = {Oct.},
year = {2008},
pages = {27-38}
}

@InProceedings{Checkoway2010,
  author =       {Stephen Checkoway and Lucas Davi and Alexandra
                  Dmitrienko and Ahmad-Reza Sadeghi and Hovav Shacham
                  and Marcel Winandy},
  title =        {{Return-Oriented Programming without Returns}},
  booktitle =    {Proceedings of CCS 2010},
  shortbooktitle =    {CCS},
  year =         2010,
  editor =       {Angelos Keromytis and Vitaly Shmatikov},
  month =        {Oct.},
  publisher =    {ACM Press},
  pages =        {559-72},
  url = {http://cseweb.ucsd.edu/~hovav/dist/noret-ccs.pdf},
}

@inproceedings{Shacham07,
  author    = {Hovav Shacham},
  title     = {The geometry of innocent flesh on the bone: return-into-libc
               without function calls (on the x86)},
  booktitle = {ACM Conference on Computer and Communications Security},
  shortbooktitle = {ACM CCS},
  year      = {2007},
  pages     = {552-561},
  publisher = {ACM},
  isbn      = {978-1-59593-703-2},
  ee        = {http://doi.acm.org/10.1145/1315245.1315313},
  url       = {http://cseweb.ucsd.edu/~hovav/dist/geometry.pdf},
}

@Article{Roemer2012,
  author =       {Ryan Roemer and Erik Buchanan and Hovav Shacham and
                  Stefan Savage},
  title =        {{Return-Oriented Programming: Systems, Languages, and
                  Applications}},
  journal =      {ACM Trans. Info. \& System Security},
  year =         2012,
  volume =       15,
  number =       1,
  month =        {Mar.}
}

@inproceedings{Onarlioglu2010,
author = {K. Onarlioglu and L. Bilge
 and A. Lanzi and D. Balzarotti and E. Kirda},
title = {{G-Free:
 Defeating return-oriented programming through gadget-less binaries}},
 booktitle = {Proc. ACSAC},
year = {2010},
pages = {49-58}
}

@inproceedings{Pappas2012,
author = {Vasilis Pappas and Michalis Polychronakis and Angelos Keromytis},
title = {{Smashing the Gadgets: Hindering Return-Oriented Programming Using In-Place Code Randomization}},
year = {2012},
booktitle = {{IEEE Symposium on Security and Privacy}},
pages = {601-615}
}

@inproceedings{Li2010,
title = {{Defeating Return-Oriented Rootkits with "Return-Less" Kernels}},
author = {Jinku Li and Zhi Wang and Xuxian Jiang and Michael Grace and Sina Bahram},
booktitle = {Proc. ACM EuroSys},
year = {2010},
pages = {195-208}
}

@inproceedings{Davi2009,
title = {{Dynamic integrity measurement and attestation:
Toward defense against return-oriented programming attacks}},
author = {L. Davi and A.-R. Sadeghi and M. Winandy},
editor = {N. Asokan and C. Nita-Rotaru and J.P. Seifert},
booktitle = {Proc. ACM STC},
month = {Nov.},
year = {2009},
pages = {49-54}
}

** Random stuff
*** Bell Lapadula

@TechReport{BellLaPadula,
  author =       {Bell, D.E. and {LaPadula}, L.J.},
  title =        {Secure Computer Systems: Mathematical Foundations},
  institution =  {Electronics Systems Divisions},
  year =         1973,
  number =    {AD770768},
  address =   {Bedford, MA},
  month =     {November},
  note =      {The Mitre Corporation},
  url =          {http://www.dtic.mil/cgi-bin/GetTRDoc?Location=U2&doc=GetTRDoc.pdf&AD=AD0770768}
}

*** Walter et al

@TechReport{WalterEtAl74,
  author =       {Walter, K. G. and Ogden, W. F. and Rounds, W. C. and Bradshaw,F. T. and Ames, S. R.},
  title =        {Primitive Models for Computer Security},
  institution =  {Case Western Reserve, University of Cleveland Ohio, Dept. of Computing and Information Sciences},
  year =         1974,
  number =    {AD0778467},
  month =     {January}}

*** J. Alex Halderman et al

@INPROCEEDINGS{Halderman08,
    author = {J. Alex Halderman and Seth D. Schoen and Nadia Heninger and William Clarkson and William Paul and Joseph A. Cal and Ariel J. Feldman and Edward W. Felten},
    title = {Lest we remember: Cold boot attacks on encryption keys},
    booktitle = {Proceedings of the 17th USENIX Security Symposium},
    year = {2008},
    url = {https://jhalderm.com/pub/papers/coldboot-sec08.pdf}
}


*** Bernstein /Some thoughts on security after ten years of qmail 1.0/

@inproceedings{Bernstein:2007:TSA:1314466.1314467,
 author = {Bernstein, Daniel J.},
 title = {Some thoughts on security after ten years of qmail 1.0},
 booktitle = {Proceedings of the  Workshop on Computer Security Architecture},
 series = {CSAW},
 year = {2007},
 isbn = {978-1-59593-890-9},
 location = {Fairfax, Virginia, USA},
 pages = {1--10},
 numpages = {10},
 url = {http://cr.yp.to/qmail/qmailsec-20071101.pdf},
 doi = {http://doi.acm.org/10.1145/1314466.1314467},
 acmid = {1314467},
 publisher = {ACM},
 keywords = {eliminating bugs, eliminating code, eliminating trusted code},
}

Comments (bcp): This was a fun read, especially the first few sections, but
it doesn't really deliver on its promises, and its ultimate conclusion
(don't write bugs) is not that helpful.

*** DoD Defense Science Board Task Force Report (Jan. 2013)

@techreport{DSB2013CyberThreat,
  title={Resilient Military Systems and the Advanced Cyber Threat},
  author={U.S. Department of Defense, Defense Science Board},
  year={2013},
  month={January},
  institution={Office of the Under Secretary of Defense for Acquisition,
  Technology and Logistics, Washington, D.C. 20301-3140},
  url={http://www.acq.osd.mil/dsb/reports/ResilientMilitarySystems.CyberThreat.pdf}
}



* Exception handling

@techreport{Mesa79,
  title = {{Mesa} Language Manual, Version 5.0},
  author = {James G. Mitchell and William Maybury and Richard Sweet},
  institution = {Xerox PARC},
  number = {CSL-79-3},
  month = apr,
  year = {1979},
  url = {http://research.microsoft.com/en-us/um/people/blampson/23a-MesaManual/23a-MesaManualAbstract.html}
}

@techreport{Cedar83,
  title = {A description of the {Cedar} language},
  author = {Butler Lampson},
  institution = {Xerox PARC},
  number = {CSL-83-15},
  month = dec,
  year = {1983},
  url = {http://research.microsoft.com/en-us/um/people/blampson/32a-cedarlang/32a-cedarlangabstract.htm}
}

@article{SwinehartZBH86,
  author    = {Daniel C. Swinehart and
               Polle Zellweger and
               Richard J. Beach and
               Robert Hagemann},
  title     = {A Structural View of the {Cedar} Programming Environment},
  journal   = {ACM Transactions on Programming Languages and Systems (TOPLAS)},
  volume    = {8},
  number    = {4},
  year      = {1986},
  pages     = {419-490},
  ee        = {http://doi.acm.org/10.1145/6465.6466},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://www.isr.uci.edu/~andre/ics228s2006/swinehartzellwegerbeachhagmann.pdf}
}

@book{Modula3Book,
  editor = {Greg Nelson},
  title = {System Programming with Modula-3},
  publisher = {Prentice Hall Series in Innovative Technology},
  year = {1991},
  url = {http://www.modula3.org/books/}
}

@article{Moggi91,
  author    = {Eugenio Moggi},
  title     = {Notions of Computation and Monads},
  journal   = {Information and Computation},
  volume    = {93},
  number    = {1},
  year      = {1991},
  pages     = {55-92},
  ee        = {http://dx.doi.org/10.1016/0890-5401(91)90052-4},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url      = {http://www.disi.unige.it/person/MoggiE/ftp/ic91.pdf}
}

@MANUAL{ieeefp,
       TITLE = {IEEE Standard for Binary Floating-Point Arithmetic},
       AUTHOR = {},
       ORGANIZATION = {IEEE},
       MONTH = Jul,
       YEAR = {1985},
       NOTE = {{ANSI}/{IEEE} Std 754-1985},
       url = {http://twins.ee.nctu.edu.tw/~tjlin/courses/co01/IEEE754.pdf}
}

@inproceedings{JonesRHHM99,
  author    = {Simon L. Peyton Jones and
               Alastair Reid and
               Fergus Henderson and
               C. A. R. Hoare and
               Simon Marlow},
  title     = {A Semantics for Imprecise Exceptions},
  booktitle = {ACM SIGPLAN Conference on Programming
               Language Design and Implementation},
  series    = {PLDI},
  year      = {1999},
  pages     = {25-36},
  publisher = {ACM},
  ee        = {http://doi.acm.org/10.1145/301618.301637},
  url       = {http://research.microsoft.com/en-us/um/people/simonpj/papers/imprecise-exn.htm},
}

* Other topics/papers to look at (needs to be merged with the rest)
** Future topics for TOS reading group
*** Chong / Vaughan, "Inference of expressive declassification policies"

"Inference of expressive declassification policies", by Jeffrey A. Vaughan
and Stephen Chong.  Oakland '11.

http://people.seas.harvard.edu/~chong/pubs/oakland11_inference.pdf

ABSTRACT: We explore the inference of expressive human-readable
declassification policies as a step towards providing practical tools and
techniques for strong language-based information security.  Security-type
systems can enforce expressive information-security policies, but can
require enormous programmer effort before any security benefit is
realized. To reduce the burden on the programmer, we focus on inference of
expressive yet intuitive information-security policies from programs with
few programmer annotations.  We define a novel security policy language that
can express what information a program may release, under what conditions
(or, when) such release may occur, and which procedures are involved with
the release (or, where in the code the release occur). We describe a
dataflow analysis for precisely inferring these policies, and build a tool
that instantiates this analysis for the Java programming language. We
validate the policies, analysis, and our implementation by applying the tool
to a collection of simple Java programs.

*** Roy thesis (Laminar)
http://www.cs.utexas.edu/~indrajit/pubs/roy-thesis.pdf

*** mark miller (e) -- promise-based computation model

   - Conventional access control ignores issues of temporal
     consistency; concurrency control ignores authorization.

   - Least authority depends on application structure: consider cp,
     which must resolve strings to files, vs cat, which receives
     open file descriptors from shell, and therefore needs no
     authority to the file system.  "Name centric" versus "key
     centric" system styles.

   - Dynamic POLA via per-request authorization, instead of
     overly-generous authority allocation from using statically
     configured sets of authoritized (policy files).

   - E-ORDER: stronger than FIFO, weaker than causal ordering.
   - Interesting and perhaps useful terminology:
     Authority, reliance, relevant authority, defensive correctness,
     defensive consistency, fail safe, fail stop.
   - Terminating a persistent vat (incarnation thereof)
     causes rollback, like aborting a transaction.
   - In the context of arbitrary misbehavior (Byzantine faults)
     tolerance and isolation are complementary techniques.
   - (... ongoing ...)

@TECHREPORT{Miller06robustcomposition:,
     author = {Mark Samuel Miller},
     title = {Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control},
     institution = {},
     year = {2006}
}

*** HiStar
*** Asbestos
*** Nemesis
    - also an exokernel (like Xok/ExOS)
    - focused on multimedia

*** Tahoe Least Authority Filesystem

    - They rely heavily on crypto for their decentralized access
      control, but they also have strong security guarantees related
      to POLA: an attacker controlling all the storage servers cannot
      violate the confidentiality or integrity of user files or
      directories. They give slightly weaker freshness guarantees, and
      give no support for multi-file transaction consistency. It's
      interesting to think about what a SAFE analgoue might guarantee...

@inproceedings{Wilcox-O'Hearn:2008:TLF:1456469.1456474,
 author = {Wilcox-O'Hearn, Zooko and Warner, Brian},
 title = {Tahoe: the least-authority filesystem},
 booktitle = {Proceedings of the 4th  International Workshop on Storage Security and Survivability},
 series = {StorageSS},
 year = {2008},
 isbn = {978-1-60558-299-3},
 location = {Alexandria, Virginia, USA},
 pages = {21--26},
 numpages = {6},
 url = {http://tahoe-lafs.org/~zooko/lafs.pdf},
 doi = {http://doi.acm.org/10.1145/1456469.1456474},
 acmid = {1456474},
 publisher = {ACM},
 keywords = {capabilities, fault-tolerance, open source, peer-to-peer},
}

*** Policy languages (e.g. Aura)
*** Scheduling (Piglet, Barrelfish)
*** chlipala POPL 10 paper  (about formalizing levels-of-abstraction proofs)
*** Flatt paper(s) on language structures for operating systems
*** PSOS (SRI)
*** XTS-400 security kernel

*** Verve OS
*** Raksha (ISCA07) -- hardware tagging

@InProceedings{raksha_isca2007,
  author = 	 {Michael Dalton and Hari Kannan  and Christos Kozyrakis 	 },
  title = 	 {Raksha: a flexible information flow architecture for software security},
  booktitle =	 {International Symposium on Computer Architecture (ISCA)},
  shortbooktitle = {ISCA},
  pages =	 {482--493},
  year =	 2007,
  url = {http://www.engr.uconn.edu/~zshi/course/cse5302/ref/dalton07raksha_isca.pdf},
}
- Flexible Specification of Security Policies
- "2.2 Hardware-based DIFT" gives a nice overview of previous systems
  such as Minos, Suh et al, Chen et al (and also RIFLE). In particular
  it points out the limitations of their policies.
- Lessons from Memory Corruption
  + it's still just a heuristic, and there are corner cases they
    cannot handle

@InProceedings{ddift_dsn2009,
  author = 	 {Hari Kannan and Michael Dalton and Christos Kozyrakis},
  title = 	 {Decoupling Dynamic Information Flow Tracking with a Dedicated Coprocessor},
  booktitle = {International Conference on Dependable Systems and Networks (DSN)},
  pages = 	 {105--114},
  year = 	 2009,
  url = {http://csl.stanford.edu/~christos/publications/2009.offcoreraksha.dsn.pdf},
}

@InProceedings{chung2008thread,
  title={Thread-safe dynamic binary translation using transactional memory},
  author={Chung, JaeWoong and Dalton, Michael and Kannan, Hari and Kozyrakis, Christos},
  booktitle={High Performance Computer Architecture, 2008. HPCA 2008. IEEE 14th International Symposium on},
  pages={279--289},
  year={2008},
  organization={IEEE}
}

*** Mondrian (ASPLOS02, SOSP05) -- OS with fine-grained memory protection
@inproceedings{mondrian_asplos2002,
 author = {Witchel, Emmett and Cates, Josh and Asanovi\'{c}, Krste},
 title = {Mondrian memory protection},
 booktitle = {{10th International Conference on Architectural Support for Programming Languages and Operating Systems}},
 shortbooktitle = {ASPLOS},
 series = {ASPLOS X},
 year = {2002},
 isbn = {1-58113-574-2},
 location = {San Jose, California},
 pages = {304--316},
 numpages = {13},
 url = {http://doi.acm.org/10.1145/605397.605429},
 doi = {10.1145/605397.605429},
 acmid = {605429},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@inproceedings{witchel:2002,
	Author = {Emmett Witchel and Josh Cates and Krste Asanovic},
	Booktitle = {10th International Conference on Architectural Support for Programming Languages and Operating Systems},
	shortbooktitle = {ASPLOS},
	Date-Added = {2006-11-19 07:43:15 -0500},
	Date-Modified = {2006-11-19 07:43:23 -0500},
	Keywords = {Security; Operating-System; Information-Flow},
	Location = {San Jose},
	Month = {October},
	Pages = {304-315},
	Rating = {1},
	Title = {Mondrian Memory Protection},
	Year = {2002},
  url = {http://www.cs.utexas.edu/~witchel/pubs/mmp-asplos2002.pdf}
}

No IFC:
\amd{Mondarian and Loki are
really about having fine-grained tags, not about IFC.  There is no
propagation going on here.}

*** Bedrock
      http://adam.chlipala.net/papers/BedrockPLDI11/

*** Jones and Liskov (Lang. Ext. for Expressing Constr on Data Access)

*** ACLs
*** Modular Verification of Preemptive OS Kernels
    - Alexey Gotsman, Hongseok Yang, ICFP 2011
*** User-Driven Access Control
    - Rethinking Permission Granting in Modern Operating Systems
    - Franziska Roesner, Tadayoshi Kohno, Alexander Moshchuk, Bryan Parno, Helen J. Wang, and Crispin Cowan
    - http://research.microsoft.com/apps/pubs/?id=152495

** High-security operating systems
*** Multics

    - classic description of Multics mechanisms including segments, ACLs,
      rings, and gates; also includes design principles

%% in Multics, user names were case sensitive -- Saltzer was his username
@Article{Saltzer74:multics_protection,
  author = 	 {Jerome H. Saltzer},
  title = 	 {Protection and the Control of Information Sharing in Multics},
  journal = 	 {Communications of the {ACM}},
  year = 	 1974,
  volume =	 17,
  number =	 7,
  pages =	 {388--402},
  month =	 {July}
}

% best explanation of (Multics) gates

@article{Schroeder1972,
author = {Michael D. Schroeder and Jerome H. Saltzer},
title = {A Hardware Architecture for Implementing Protection Rings},
journal = {Communications of the ACM},
year = {1972},
month = {March},
volume = {15},
number = 3,
pages = {157--170}
}

% at least one description of small kernel feasibility

@TechReport{multics_kernel_tr1977,
  author = 	 {M. D. Schroeder and D. D. Clark and J. H. Saltzer and D. H. Wells},
  title = 	 {Final Report of the Multics Kernel Design Project},
  institution =  {MIT},
  year = 	 1977,
  type =	 {LCS/TR},
  number =	 196,
  month =	 {June}
}

@article{saltzer_schroeder_protect_info_procieee1975,
	Author = {Jerry H. Saltzer and Mike D. Schroeder},
	Journal = {Proceedings of the IEEE},
	Month = {September},
	Number = {9},
	Pages = {1278--1308},
	Title = {The Protection of Information in Computer Systems},
	Volume = {63},
	Year = {1975}}


*** Clark and Wilson  /A comparison of commercial and military computer security policies/

@inproceedings{ClarkWilson1987,
author = {David D. Clark and David R. Wilson},
title = {A Comparison of Commercial and Military Computer Security Policies},
booktitle = {Proceedings of the Symposium on Research in Security and Privacy},
city = {Oakland},
year = {1987},
publisher = {IEEE Press},
pages = {184--193},
url = {http://www.codeguard.org/papers/ClarkWilson1987.pdf}
}

*** Multics Kernel Project
*** SELinux
*** Terra (SOSP03, Garfinkel et al.) -- remote attestation
*** Spestis (inf flow os)
*** Bryan Ford's work on Efficient System-Enforced Deterministic Parallelism
*** Synthesis
  Synthesis: An Efficient Implementation of Fundamental Operating Systems
  Services, Alexia Massalin
*** Barrelfish?
*** Fast Byte-Granularity Software Fault Isolation
  http://research.microsoft.com/en-us/um/people/mcastro/publications/bgi-sosp.pdf

** Verification of operating systems
*** MILS (multiple independent levels of security)
  Goldhill(?) -- embedded OS company (separation kernels)
*** Verve

** Language-based operating systems
*** Cedar-Mesa
*** Spin

@inproceedings{Bershad:1995:ESP:224056.224077,
 author = {Bershad, B. N. and Savage, S. and Pardyak, P. and Sirer, E. G. and Fiuczynski, M. E. and Becker, D. and Chambers, C. and Eggers, S.},
 title = {Extensibility safety and performance in the SPIN operating system},
 booktitle = {Proceedings of the Symposium on Operating Systems Principles},
 series = {SOSP},
 shortbooktitle = {SOSP},
 year = {1995},
 isbn = {0-89791-715-4},
 location = {Copper Mountain, Colorado, United States},
 pages = {267--283},
 numpages = {17},
 url = {http://www.cs.ucr.edu/~harsha/teaching/Winter2011/CS202/readings/spin.pdf},
 doi = {http://doi.acm.org/10.1145/224056.224077},
 acmid = {224077},
 publisher = {ACM},
}

*** Singularity
*** House
*** Hermes
*** IBM's Hermes
It wasn't exactly an OS but it was a platform that fits much the same
niche. It did typestate checking for security enforcement, all
processes were in one memory space because the language guaranteed
safety, etc.
http://www.research.ibm.com/people/d/dfb/hermes.html
*** Virtualization (Xen)

** Secure (in some respect) languages

*** Cyclone: A Safe Dialect of C (Jim, Morrisett, et al.) 2002

@inproceedings{cyclone2002,
  author    = {Trevor Jim and
               J. Gregory Morrisett and
               Dan Grossman and
               Michael W. Hicks and
               James Cheney and
               Yanling Wang},
  title     = {Cyclone: A Safe Dialect of C},
  booktitle = {Proceedings of the General Track: 2002 USENIX Annual Technical
               Conference, June 10-15, 2002, Monterey, California, USA},
  editor    = {Carla Schlatter Ellis},
  publisher = {USENIX},
  year      = {2002},
  pages     = {275-288},
  ee        = {http://www.usenix.org/publications/library/proceedings/usenix02/jim.html},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

** Architectural support for pl/security abstractions
*** Aries (for pointer-encoding scheme)
*** Hardbound (Milo's system)
*** IBM System S? (System 38?)  capability machine...
*** Lock (NSA effort at mandatory access control, etc., with some HW support)

** Other security topics
*** Hyperproperties

@article{ClarksonS10,
  author    = {Michael R. Clarkson and
               Fred B. Schneider},
  title     = {Hyperproperties},
  journal   = {Journal of Computer Security},
  volume    = {18},
  number    = {6},
  year      = {2010},
  pages     = {1157-1210},
  ee        = {http://dx.doi.org/10.3233/JCS-2009-0393},
  bibsource = {DBLP, http://dblp.uni-trier.de},
  url       = {http://faculty.cs.gwu.edu/~clarkson/papers/clarkson_hyperproperties_journal.pdf},
}

*** Marc Stiegler /An introduction to petname systems/
    - Phishing-resistant browsing

*** Knight, J. C. and Leveson, N. G. /An experimental evaluation of the assumption of independence in multiversion programming/

  This paper provides hard (but not conclusive) data suggesting that
  coordinated failure could be a risk for our project...

  From their conclusions section (p. 20):
    "Common faults may reflect inherently difficult semantic aspects of
     the problem or typical human misconceptions which are not easily
     detected through standard verification and validation efforts."

@article{Knight:1986:EEA:10677.10688,
 author = {Knight, J. C. and Leveson, N. G.},
 title = {An experimental evaluation of the assumption of independence in multiversion programming},
 journal = {IEEE Trans. Softw. Eng.},
 volume = {12},
 issue = {1},
 month = {January},
 year = {1986},
 issn = {0098-5589},
 pages = {96--109},
 numpages = {14},
 url = {http://sunnyday.mit.edu/papers/nver-tse.pdf},
 acmid = {10688},
 publisher = {IEEE Press},
 address = {Piscataway, NJ, USA},
}

@article{Ritchie1978,
author = {D.M. Ritchie and K.L. Thompson},
title = {{The UNIX Time-Sharing System}},
journal = {Bell System Technical Journal},
mont = {July-August},
year = {1978},
volume = {57},
pages = {1905-1930},
number = {6}
}

@article{vmware,
author = {M. Rosenblum and S. Herrod and E. Witchel and A. Gupta},
title = {Complete Computer System Simulation: The SimOS Approach},
journal = {IEEE Parallel and Distributed Technology},
year = {1995},
pages = {34-43}
}

@inproceedings{xen,
title = {Xen and the Art of Virtualization},
author = {P. Barham and B. Dragovic and K. Fraser and S. Hand and T. Harris and A. Ho and R. Neugebauer and I. Pratt and A. Warfield},
booktitle = {Proceedings of the Symposium on Operating Systems Principles},
series = {SOSP},
shortbooktitle = {SOSP},
month = {Oct.},
year = {2003}
}

@article{kvm,
author = {Amit Shah},
title = {Deep Virtue: Kernel-based virtualization with KVM},
journal = {Linux Magazine},
month = {Jan.},
year = {2008},
pages = {37-39}
}

@Article{Leslie96,
  title = "{The Design and Implementation of an Operating System to Support
Distributed Multimedia Applications}",
  author = {I. M. Leslie and  D. McAuley and R. Black and T. Roscoe and  P. Barham and D. Evers and  R. Fairbairns and E. Hyden},
  journal = {IEEE Journal on Selected Areas in Communications},
  month = {September},
  year = "1996",
  volume = 14,
  number = 7,
  pages = "1280--1297"
}

@InProceedings{SSLHAL99,
  author = {Ray Spencer and Stephen Smalley and Peter Loscocco and
            and Mike Hibler and Dave Andersen and Jay Lepreau},
  title = {{The Flask Security Architecture: System Support for Diverse Security Policies}},
  booktitle = {Proceedings of the $8^{th}$ USENIX Security Symposium},
  pages = {123-139},
  year = {1999},
  month = {August}
}

@InProceedings{Loscocco2001,
  author = {Peter Loscocco and Stephen Smalley},
  title = {{Integrating Flexible Support for Security Policies into the Linux Operating System}},
  booktitle = {Proceedings of the FREENIX Track: 2001 USENIX Annual Technical Conference (FREENIX '01)},
  year = {2001},
  month = {June}
}

@inproceedings{baumann09:barrelfish,
 author = {Baumann, Andrew and Barham, Paul and Dagand, Pierre-Evariste and Harris, Tim and Isaacs, Rebecca and Peter, Simon and Roscoe, Timothy and Sch\"{u}pbach, Adrian and Singhania, Akhilesh},
 title = {The multikernel: a new {OS} architecture for scalable multicore systems},
 booktitle = {Proceedings of the Symposium on Operating Systems Principles},
 series = {SOSP},
 shortbooktitle = {SOSP},
 year = {2009},
 location = {Big Sky, Montana, USA},
 pages = {29--44},
 numpages = {16},
 keywords = {message passing, multicore processors, scalability},
}

@INPROCEEDINGS{Schupbach08,
author = {Adrian Schupbach and Simon Peter
and Andrew Baumann and Timothy Roscoe and Paul Barham and Tim Harris
and Rebecca Isaacs},
 title = {Embracing diversity in the Barrelfish manycore operating
system},
    booktitle = {In Proceedings of the Workshop on Managed Many-Core Systems},
    year = {2008}
}

@inproceedings{flexitaint,
 author = "Guru Venkataramani and Ioannis Doudalis and Yan Solihin and Milos Prvulovic",
 title = {{FlexiTaint}: A Programmable Accelerator for Dynamic Taint Propagation},
 booktitle = {14th International Symposium on High Performance Computer Architecture (HPCA)},
 shortbooktitle = {HPCA},
 month = feb,
 year = "2008",
pages = {173--184},
 url = {http://www.cc.gatech.edu/~milos/venkataramani_hpca08.pdf},
 }

@Article{runtime_tag_trvlsi2007,
  author = 	 {Divya Arora and Srivaths Ravi and Anand Raghunathan and Niraj K. Jha},
  title = 	 {Architectural Support for Run-Time Validation of Program Data Properties},
  journal = 	 {{IEEE} Transactions on Very Large Scale Integration ({VLSI}) Systems},
  year = 	 2007,
  volume =	 15,
  number =	 5,
  pages =	 {546--559},
  month =	 {May}
}



@INPROCEEDINGS{Accetta86,
    author = {Mike Accetta and Robert Baron and William Bolosky
    and David Golub and Richard Rashid and Avadis Tevanian and Michael Young},
    title = {{Mach: A New Kernel Foundation for UNIX Development}},
    booktitle = {Proc. USENIX},
    year = {1986},
    pages = {93--112}
}

*** Xinshu Dong et al /A Quantitative Evaluation of Privilege Separation in Web Browser Designs/

@inproceedings{DongHSL13,
  author    = {Xinshu Dong and
               Hong Hu and
               Prateek Saxena and
               Zhenkai Liang},
  title     = {A Quantitative Evaluation of Privilege Separation in Web
               Browser Designs},
  booktitle = {18th European Symposium
               on Research in Computer Security (ESORICS)},
  pages     = {75-93},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8134},
  year      = {2013},
  isbn      = {978-3-642-40202-9},
  ee        = {http://dx.doi.org/10.1007/978-3-642-40203-6_5},
  url       = {http://www.comp.nus.edu.sg/~prateeks/papers/BrowserQuant.pdf},
}

Discussed this in TOS in June 2013

- They assume a fixed breakup into components;
  and a very high cost for isolation:
  - both in terms of huge overhead (each Linux process eats up
    120-140K of memory; IPC overhead it significant)
  - and in terms of huge refactoring effort (refactoring 3MLOC)
    + process-based sandboxing requires software redesign
    + some of these efforts are as significant as redesigning a new
      browser (Chrome did that)

- They don't look at more lightweight (for what they do) things like
  + SFI
  + micro VMs (extremely lightweight hypervisor)

- They don't look at isolating plugins;
  which is the most comonly used entry point
  - Firefox only isolates those

- What's PrivGauge?

- They validate their data against reality, a bit
  + things that don't bring security improvements
    in their model are still being done in practice?
  + how close is their (weak worst case) overhead estimate
    to the value people got in actual implementations?
    + not very close in some cases, since real solutions involve
    further "optimizations" (Chrome's per-site-instance; which trades
    security for performance; Chrome's GPU command buffers)
    + close in some cases, where people bailed out from refactorings
      after realising they are too costly (OP/OP2

*** Morrisset et al /RockSalt: better, faster, stronger {SFI} for the x86/

@inproceedings{MorrisettTTTG12,
  author    = {Greg Morrisett and
               Gang Tan and
               Joseph Tassarotti and
               Jean-Baptiste Tristan and
               Edward Gan},
  title     = {{RockSalt}: better, faster, stronger {SFI} for the x86},
  booktitle = {ACM SIGPLAN Conference on Programming Language Design and
               Implementation (PLDI)},
  shortbooktitle = {PLDI},
  publisher = {ACM},
  year      = {2012},
  isbn      = {978-1-4503-1205-9},
  pages     = {395-404},
  ee        = {http://doi.acm.org/10.1145/2254064.2254111},
  url       = {http://www.cse.lehigh.edu/~gtan/paper/rocksalt.pdf},
}

** typed assembly

@article{tal_toplas1999,
	Address = {New York, NY, USA},
	Author = {Greg Morrisett and David Walker and Karl Crary and Neal Glew},
	Issn = {0164-0925},
	Journal = {ACM Trans. Program. Lang. Syst.},
	Number = {3},
	Pages = {527--568},
	Pdf = {http://www.eecs.harvard.edu/~greg/papers/tal-toplas.pdf},
	Publisher = {ACM},
	Title = {From system {F} to typed assembly language},
	Volume = {21},
	Year = {1999}}


@TECHREPORT{ousterhout_os_scaling_wrl1989,
	AUTHOR = {John Ousterhout},
	TITLE = {Why Aren't Operating Systems Getting Faster As Fast As Hardware},
	INSTITUTION = {DEC WRL},
	YEAR = {1989},
	TYPE = {WRL TN},
	NUMBER = {11},
	ADDRESS = {Digital Western Research Laboratory, 100 Hamilton Avenue, Palo Alto, CA 94301},
	MONTH = {October}
}
%%        FTP = {\ftplink{gatekeeper.dec.com}{archive/pub/DEC/WRL/research-reports/WRL-TN-11.ps.Z}}

@inproceedings{mils_hicss2004,
 author = {Jim Alves-Foss and Carol Taylor and Paul Oman},
 title = {A Multi-Layered Approach to Security in High Assurance Systems},
 booktitle = {HICSS '04: Proceedings of the Proceedings of the 37th Annual Hawaii International Conference on System Sciences (HICSS'04) - Track 9},
 year = {2004},
 isbn = {0-7695-2056-1},
 pages = {90302.2},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
 }

@INPROCEEDINGS{reference_monitor_ifip1999,
    author = {Cynthia E. Irvine},
    title = {The Reference Monitor Concept as a Unifying Principle in Computer Security Education},
    booktitle = {In Proceedings of the IFIP TC11 WG 11.8 First World Conference on Information Security Education},
    year = {1999},
    pages = {27--37}
}

@InProceedings{separation_protection_profile_iwia2006,
  author = 	 {Thuy D. Nguyen and Timothy E. Levin and Cynthia E. Irvine},
  title = 	 {High Robustness Requirements in a Common Criteria Protection Profile},
  booktitle =	 {Proceedings of the IEEE International Workshop on Information Assurance},
  year =	 2006
}

@INPROCEEDINGS{arch_os_design_asplos1991,
	AUTHOR = {Thomas Anderson and Henry Levy and Brian Bershad and Edward Lazowska},
	TITLE = {The Interaction of Architectures and Operating System Design},
	BOOKTITLE = {Fourth International Conference on Architectural Support for Programming Languages},
	YEAR = {1991},
	PAGES = {108--120},
	MONTH = {April}
}


** Synchronization

*** Full/Empty Bits

    Possibly first introduction?


@InProceedings{hep_rtsp1981,
  author = 	 {Burton Smith},
  title = 	 {Architecture and Applications of the HEP Multiprocessor Computer System},
  booktitle =	 {Proceedings fo the Symposium on Real-Time Signal Processing},
  pages =	 {241--248},
  year =	 1981
}

*** I-Structures

    Uses full/empty-bit mechanism to have a functional data structure
    (array) one can fill in incrementally.  Partial inspriation for EMPTY tags.

@INPROCEEDINGS{i-structures_wgr1986,
	AUTHOR = {Arvind and R. S. Nikhil and K. K. Pingali},
	TITLE = {I-Structures:  Data Structures for Parallel Computing},
	BOOKTITLE = {Proceedings of the Workshop on Graph Reduction (Springer-Verlag Lecture Notes in Computer Science 279)},
	YEAR = {1986},
	MONTH = Sep
}



@inproceedings{capability_addressing_asplos1994,
 author = {Nicholas P. Carter  and Stephen W. Keckler and William J. Dally},
 title = {Hardware support for fast capability-based addressing},
 booktitle = {Proceedings of the international conference on Architectural support for programming languages and operating systems},
 series = {ASPLOS-VI},
 year = {1994},
 isbn = {0-89791-660-3},
 location = {San Jose, California, United States},
 pages = {319--327},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/195473.195579},
 doi = {10.1145/195473.195579},
 acmid = {195579}
}

@article{Wulf1974,
author = {W. Wulf and E. Cohen and W. Corwin
and A. Jones and R. Levin and C. Pierson and F. Pollack},
title = {HYDRA: The Kernel of a Multiprocessor Operating System},
journal = {Communications of the ACM},
year = {1974},
month = {June},
volume = {17},
number = {6},
pages = {337--345}
}

@book{HYDRA,
author = {William A. Wulf and Roy Levin and Samuel P. Harbison},
title = {HYDRA/C.mmp: An Experimental Computer System},
publisher = {McGraw-Hill},
year = {1981}
}


@article{i-structures_toplas1989,
 author = {Arvind and Rishiyur S. Nikhil  and  Keshav K. Pingali},
 title = {I-structures: data structures for parallel computing},
 journal = {ACM Trans. Program. Lang. Syst.},
 volume = {11},
 issue = {4},
 month = {October},
 year = {1989},
 pages = {598--632},
 numpages = {35},
 url = {http://doi.acm.org/10.1145/69558.69562},
 doi = {http://doi.acm.org/10.1145/69558.69562},
 publisher = {ACM},
}


** Nominal logic/freshness/equivariance

@TechReport{shinwell05:metaocaml,
  author =       {Mark R. Shinwell},
  title =        {The Fresh Approach: functional programming with names and binders},
  institution =  {University of Cambridge},
  year =         2005,
  number =    {UCAM-CL-TR-618},
  month =     {February},
  url = {https://www-test.cl.cam.ac.uk/techreports/UCAM-CL-TR-618.pdf}
}


@InProceedings{huffman10:proof_pearl_nominal_isabelle,
  author =       {Brian Huffman and Christian Urban},
  title =        {Proof Pearl: A New Foundation for Nominal Isabelle},
  booktitle = {1st Conference on Interactive Theorem Proving},
  year =      2010,
  volume =    6172,
  series =    {Lecture Notes in Computer Science},
  pages =     {35--50},
  publisher = {Springer Verlag},
  url = {http://www.inf.kcl.ac.uk/staff/urbanc/Publications/nominal-atoms.pdf}
}

** Formal frameworks dealing with encodings

@InProceedings{jaume12:semantic_comparison_AC_IF,
  author =       {Mathieu Jaume},
  title =        {Semantic comparison of security policies: from access control policies to flow properties},
  booktitle = {{IEEE} Workshop on Semantic Computing and Security, {WSCS'2012} {IEEE} {CS} Security and Privacy Workshops (SPW)},
  year =      2012,
  pages =     {60--67},
  publisher = {{IEEE} Computer Society Press},
  url = {http://www-spi.lip6.fr/~jaume/wscs2012.pdf}
}

** Dynamic race detection

@article{Savage1997,
title = {{Eraser: A dynamic race detector for multi-threaded programs}},
journal = {{ACM Transactions on Computer Systems}},
author = {S. Savage and M. Burrows and G. Nelson and P. Sobalvarro and T. Anderson},
volume = {15},
number = {4},
year = {1997},
url = {http://www.cs.duke.edu/courses/cps210/spring06/papers/eraser.pdf},
}

@inproceedings{Zhou2007,
title = {{HARD: Hardware-assisted lockset-based race recording}},
author = {P. Zhou and R. Teodorescu and Y. Zhou},
booktitle = {{Proc. HPCA}},
year = {2007}
}

* Hardware Description


@misc{bluespec,
	title = {Bluespec {S}ystem{V}erilog},
	author = {{Bluespec, Inc.}},
	url = {http://www.bluespec.com},
}

@inproceedings{bluespec_nikhil_2004,
  author    = {Rishiyur S. Nikhil},
  title     = {Bluespec System Verilog: efficient, correct RTL from high
               level specifications},
  booktitle = {2nd ACM {\&} IEEE International Conference on
               Formal Methods and Models for Co-Design (MEMOCODE 2004), 23-25
               June 2004, San Diego, California, USA, Proceedings},
  year      = {2004},
  pages     = {69-70},
  publisher = {IEEE},
  ee        = {http://dx.doi.org/10.1109/MEMCOD.2004.1459818},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}


@misc{ml605,
	title = {Virtex-6 {FPGA} {ML605} {E}valuation {K}it},
	author = {{Xilinx, Inc.}},
	url = {http://www.xilinx.com/products/boards-and-kits/EK-V6-ML605-G.htm},
	}


@article{selinux_jcs2005,
 author = {Joshua D. Guttman and Amy L. Herzog and John D. Ramsdell and Clement W. Skorupka},
 title = {Verifying information flow goals in security-enhanced Linux},
 journal = {J. Comput. Secur.},
 volume = {13},
 number = {1},
 year = {2005},
 issn = {0926-227X},
 pages = {115--134},
 publisher = {IOS Press},
 address = {Amsterdam, The Netherlands, The Netherlands},
 }

* Availability


@inproceedings{failure_oblivious_osdi2004,
  author={Martin Rinard and
          Cristian Cadar and
          Daniel Dumitran and
          Daniel M. Roy and
          Tudor Leu and
          William S. {Beebee, Jr.}},
  title={{Enhancing Server Availability and Security Through Failure-Oblivious Computing}},
  year=2004,
  month={December},
  booktitle  = {Proceedings of the Symposium on
                Operating Systems Design and Implementation (OSDI)},
  shortbooktitle    = {OSDI},
  url = {http://people.csail.mit.edu/rinard/paper/osdi04.pdf},
}

* Energy

@inproceedings{mcpat_micro2009,
 author = {Li, Sheng and Ahn, Jung Ho and Strong, Richard D. and Brockman, Jay B. and Tullsen, Dean M. and Jouppi, Norman P.},
 title = {{McPAT}: an integrated power, area, and timing modeling framework for multicore and manycore architectures},
 booktitle = {Proceedings of the IEEE/ACM International Symposium on Microarchitecture},
 series = {MICRO 42},
 year = {2009},
 pages = {469--480},
 url = {http://doi.acm.org/10.1145/1669112.1669172},
 doi = {10.1145/1669112.1669172}
}

@inproceedings{ccores_asplos2010,
 author = {Venkatesh, Ganesh and Sampson, Jack and Goulding, Nathan and Garcia, Saturnino and Bryksin, Vladyslav and Lugo-Martinez, Jose and Swanson, Steven and Taylor, Michael Bedford},
 title = {Conservation cores: reducing the energy of mature computations},
 booktitle = {Proceedings of the International Conference on Architectural Support for Programming Languages and Operating Systems},
 shortbooktitle = {ASPLOS},
 year = {2010},
 pages = {205--218},
 url = {http://doi.acm.org/10.1145/1736020.1736044},
 doi = {10.1145/1736020.1736044}
}

@inproceedings{dark_silicon_multicore_isca2011,
 author = {Hadi Esmaeilzadeh and Emily Blem and Rene St.~Amant and Karthikeyan Sankaralingam and Doug Burger},
 title = {Dark silicon and the end of multicore scaling},
 booktitle = {Proceedings of the International Symposium on Computer Architecture},
 shortbooktitle = {ISCA},
 year = 2011,
 pages = {365--376},
 url = {http://doi.acm.org/10.1145/2000064.2000108},
 doi = {10.1145/2000064.2000108}
}

@inproceedings{risc_isca1981,
 author = {Patterson, David A. and Sequin, Carlo H.},
 title = {{RISC I: A Reduced Instruction Set VLSI Computer}},
 booktitle = {Proceedings of the 8th Annual Symposium on Computer Architecture},
 series = {ISCA '81},
 year = {1981},
 pages = {443--457},
 url = {http://dl.acm.org/citation.cfm?id=800052.801895}
}


@TechReport{cacti_tr2008,
  author = 	 {Shyamkumar Thoziyoor and Naveen Muralimanohar and Jung Ho Ahn and Norman P. Jouppi},
  title = 	 {{CACTI} 5.1},
  institution =  {HP Labs},
  year = 	 {2008},
  type = 	 {HPL},
  number = 	 {2008-20},
  address = 	 {Palo Alto, CA},
  month = 	 {April},
  url={http://www.hpl.hp.com/techreports/2008/HPL-2008-20.html},
  note = 	 {Latest code release for {CACTI} 5 is 5.3}
}

@TechReport{cacti_tr2009,
  author = 	 {Naveen Muralimanohar and Rajeev Balasubramonian and Norman P. Jouppi},
  title = 	 {{CACTI} 6.0:  A Tool to Model Large Caches},
  institution =  {HP Labs},
  year = 	 {2009},
  type = 	 {HPL},
  number = 	 {2009-85},
  address = 	 {Palo Alto, CA},
  month = 	 {April},
  url={http://www.hpl.hp.com/techreports/2009/HPL-2009-85.html},
  note = 	 {Latest code release for {CACTI} 6 is 6.5}
}

@Article{bloom_filter_cacm1970,
  author = 	 {Burton H. Bloom},
  title = 	 {Space/Time Trade-offs in Hash Coding with Allowable Errors},
  journal = {Communications of the ACM},
  year = 	 1970,
  volume = 	 13,
  number = 	 7,
  pages = 	 {422--426},
  month = 	 {July}}

@Article{multihash_one_move_ieeeton2010,
  author = 	 {Adam Kirsch and Michael Mitzenmacher},
  title = 	 {The Power of One Move: Hashing Schemes for Hardware},
  journal = 	 {{IEEE/ACM} Transactions on Networking},
  year = 	 2010,
  volume = 	 18,
  number = 	 6,
  pages = 	 {1752--1765}}

@Article{perfect_hash_ipl1992,
  author = 	 {Zbigniew J. Czech and George Havas and Bohdan S. Majewski},
  title = 	 {An Optimal Algorithm for Generating Minimal Perfect Hash Functions},
  journal = 	 {Information Processing Letters},
  year = 	 1992,
  volume = 	 43,
  number = 	 5,
  pages = 	 {257--264}}


@Article{elm_computer2008,
  author = 	 {William J. Dally and James Balfour and David Black-Shaffer and James Chen and R. Curtis Harting and Vishal Parikh and Jongsoo Park and David Sheffield},
  title = 	 {Efficient Embedded Computing},
  journal = 	 {{IEEE} Computer},
  year = 	 2008,
  volume = 	 41,
  number = 	 7,
  pages = 	 {27--32},
  month = 	 {July}}

@article{boland2012juliet,
  title={Juliet 1.1 {C/C++} and {J}ava Test Suite},
  author={Boland, Tim and Black, Paul E},
  journal={Computer},
  pages={88--90},
  year={2012},
  publisher={IEEE Computer Society}
}

@misc{CWEMitre,
	title = {{CWE} -- Common Weakness Enumeration},
	author = {{The MITRE Corporation}},
	year={2013},
	url = {http://cwe.mitre.org/},
}

@misc{CWE843,
	title = {{CWE-843}: Access of Resource Using Incompatible Type (Type Confusion)},
	author = {{The MITRE Corporation}},
	year={2011},
	url = {http://cwe.mitre.org/data/definitions/843.html},
}

@misc{CWE416,
	title = {{CWE-416}: Use After Free},
	author = {{The MITRE Corporation}},
	year={2008},
	url = {http://cwe.mitre.org/data/definitions/416.html},
}

@misc{CWE122,
	title = {{CWE-122}: Heap-based Buffer Overflow},
	author = {{The MITRE Corporation}},
	year={2008},
	url = {http://cwe.mitre.org/data/definitions/122.html},
}

@misc{CWE78,
	title = {{CWE-78}: Improper Neutralization of Special Elements used in an OS Command (OS Command Injection)},
	author = {{The MITRE Corporation}},
	year={2008},
	url = {http://cwe.mitre.org/},
}

@article{dise_isca2003,
	author = {Corliss, Marc L. and Lewis, E. Christopher and Roth, Amir},
	title = {{DISE}: a programmable macro engine for customizing applications},
	journal = {SIGARCH Comput. Archit. News},
	issue_date = {May 2003},
	volume = {31},
	number = {2},
	month = may,
	year = {2003},
	issn = {0163-5964},
	pages = {362--373},
	numpages = {12},
	url = {http://doi.acm.org/10.1145/871656.859660},
	doi = {10.1145/871656.859660},
	acmid = {859660},
	publisher = {ACM},
	address = {New York, NY, USA},
}

@inproceedings{cheri2012,
author = {Robert N. M. Watson and Peter G. Neumann and Jonathan Woodruff and Jonathan Anderson and Ross Anderson and Nirav Dave and Ben Laurie and Simon W. Moore and Steven J. Murdoch and Philip Paeps and Michael Roe and Hassen Saidi},
title = {{CHERI}: a research platform deconflating hardware virtualization and protection},
booktitle = {Proc. RESoLVE},
month = {March},
year = {2012}
}



@InProceedings{sfi_sosp1993,
  author = 	 {Robert Wahbe and Steven Lucco and Thomas E. Anderson and
  Susan L. Graham},
  title = 	 {Efficient Software-Based Fault Isolation},
  pages = 	 {203--216},
  year = 	 {1993},
  booktitle = {Proceedings of the Symposium on Operating Systems Principles},
  series = {SOSP},
  shortbooktitle = {SOSP},
  url = {http://www.eecs.harvard.edu/~greg/cs255sp2004/wahbe93efficient.pdf},
}





@InProceedings{wedge_nsdi2008,
  author = 	 {Andrea Bittau and Petr Marchenko and Mark Handley and Brad Karp},
  title = 	 {Wedge: Splitting Applications into Reduced-Privilege Compartments},
  booktitle = {USENIX Symposium on Networked Systems Design and Implementation},
  pages = 	 {309--322},
  year = 	 {2008},
  url={http://www.usenix.org/legacy/events/nsdi08/tech/full_papers/bittau/bittau.pdf}
}

@INPROCEEDINGS{cheri_isca2014,
  author={Woodruff, Jonathan and Watson, Robert N.M. and Chisnall, David and Moore, Simon W. and Anderson, Jonathan and Davis, Brooks and Laurie, Ben and Neumann, Peter G. and Norton, Robert and Roe, Michael},
  booktitle={Proc. of the International Symposium on Computer Architecture (ISCA)},
  title={The {CHERI} capability model: Revisiting {RISC} in an age of risk},
  year=2014,
  month={June},
  pages={457--468},
  doi={10.1109/ISCA.2014.6853201},
}

@inproceedings{sgx_hasp2013,
 author = {McKeen, Frank and Alexandrovich, Ilya and Berenzon, Alex and Rozas, Carlos V. and Shafi, Hisham and Shanbhogue, Vedvyas and Savagaonkar, Uday R.},
 title = {Innovative Instructions and Software Model for Isolated Execution},
 booktitle = {Workshop on Hardware and Architectural Support for Security and Privacy},
 year = {2013},
 pages = {10:1--10:1},
 url = {http://doi.acm.org/10.1145/2487726.2488368},
 doi = {10.1145/2487726.2488368}
}

* Misc

@inproceedings{FrazierTRUST11,
  author    = {Gregory Frazier and
               Quang Duong and
               Michael P. Wellman and
               Edward Petersen},
  title     = {Incentivizing Responsible Networking via Introduction-Based Routing},
  booktitle = {Trust and Trustworthy Computing - 4th International Conference, {TRUST}
               2011, Pittsburgh, PA, USA, June 22-24, 2011. Proceedings},
  year      = {2011},
  pages     = {277--293},
  url       = {http://dx.doi.org/10.1007/978-3-642-21599-5_21},
  doi       = {10.1007/978-3-642-21599-5_21},
  timestamp = {Mon, 06 Oct 2014 20:41:07 +0200},
  biburl    = {http://dblp.uni-trier.de/rec/bib/conf/trust/FrazierDWP11},
  bibsource = {dblp computer science bibliography, http://dblp.org}
}

@article{YeeSDCMOONF10,
  author    = {Bennet Yee and
               David Sehr and
               Gregory Dardyk and
               J. Bradley Chen and
               Robert Muth and
               Tavis Ormandy and
               Shiki Okasaka and
               Neha Narula and
               Nicholas Fullagar},
  title     = {{Native Client}: a sandbox for portable, untrusted x86 native
               code},
  journal   = {Communications of the ACM},
  shortjournal = {CACM},
  volume    = {53},
  number    = {1},
  year      = {2010},
  pages     = {91-99},
  ee        = {http://doi.acm.org/10.1145/1629175.1629203},
  url       = {http://research.google.com/pubs/archive/34913.pdf},
}

@misc{NaClContest,
  author = {{Native Client Team}},
  title = {Native client security contest},
  howpublished = {\url{https://developer.chrome.com/native-client/community/security-contest}},
  year = {2009},
  note = {Accessed 2014-05-24},
}

@inproceedings{NagarakatteZMZ10,
  author    = {Santosh Nagarakatte and
               Jianzhou Zhao and
               Milo M. K. Martin and
               Steve Zdancewic},
  title     = {{CETS}: compiler enforced temporal safety for {C}},
  booktitle = {9th International Symposium on Memory Management},
  shortbooktitle = {ISMM},
  year      = {2010},
  pages     = {31-40},
  publisher = {ACM},
  isbn      = {978-1-4503-0054-4},
  ee        = {http://doi.acm.org/10.1145/1806651.1806657},
  url       = {http://acg.cis.upenn.edu/papers/ismm10_cets.pdf},
}

@inproceedings{BichhawatRGH14,
  author    = {Abhishek Bichhawat and
               Vineet Rajani and
               Deepak Garg and
               Christian Hammer},
  title     = {Information Flow Control in {WebKit's} {JavaScript} Bytecode},
  booktitle = {3rd International Conference on Principles of Security and Trust},
  shortbooktitle = {POST},
  year      = {2014},
  pages     = {159-178},
  ee        = {http://dx.doi.org/10.1007/978-3-642-54792-8_9},
  publisher = {Springer},
  series    = {Lecture Notes in Computer Science},
  volume    = {8414},
  isbn      = {978-3-642-54791-1},
  url       = {http://arxiv.org/abs/1401.4339},
}

@misc{BichhawatRGH14b,
  title = {Generalizing Permissive-Upgrade in Dynamic Information Flow Analysis},
  author = {Abhishek Bichhawat and
            Vineet Rajani and
            Deepak Garg and
            Christian Hammer},
  howpublished = {To appear at PLAS},
  year = {2014},
}

@article{spec_cpu2006,
	author = {Henning, John L.},
	title = {{SPEC} {CPU2006} benchmark descriptions},
	journal = {SIGARCH Comput. Archit. News},
	issue_date = {September 2006},
	volume = {34},
	number = {4},
	month = sep,
	year = {2006},
	issn = {0163-5964},
	pages = {1--17},
	numpages = {17},
	url = {http://doi.acm.org/10.1145/1186736.1186737},
	doi = {10.1145/1186736.1186737},
	acmid = {1186737},
	publisher = {ACM},
	address = {New York, NY, USA},
} 

@inproceedings{FytrakiVKFG14,
  author    = {Sotiria Fytraki and
               Evangelos Vlachos and
               Yusuf Onur Ko{\c{c}}berber and
               Babak Falsafi and
               Boris Grot},
  title     = {{FADE:} {A} programmable filtering accelerator for instruction-grain
               monitoring},
  booktitle = {20th {IEEE} International Symposium on High Performance Computer Architecture},
  shortbooktitle = {HPCA},
  year      = {2014},
  pages     = {108--119},
  ee        = {http://dx.doi.org/10.1109/HPCA.2014.6835922},
  doi       = {10.1109/HPCA.2014.6835922},
  url       = {http://homepages.inf.ed.ac.uk/bgrot/pubs/FADE_HPCA14.pdf},
}

@inproceedings{decoupled_metadata_micro2009,
 author = {Kannan, Hari},
 title = {Ordering Decoupled Metadata Accesses in Multiprocessors},
 booktitle = {Proceedings of IEEE/ACM International Symposium on Microarchitecture},
 series = {MICRO 42},
 year = {2009},
 pages = {381--390},
 url = {http://doi.acm.org/10.1145/1669112.1669161},
 doi = {10.1145/1669112.1669161}
} 


@InProceedings{dmhc_fpga2013,
  author = 	 {Udit Dhawan and Andr\'e DeHon},
  title = 	 {Area-Efficient Near-Associative Memories on {FPGAs}},
  booktitle = {Proceedings of the International Symposium on Field-Programmable Gate Arrays},
  pages={191--200},
  year = 	 2013,
  url={http://ic.ese.upenn.edu/abstracts/dmhc_fpga2013.html}
}

* Instructions for editing this file

Some notes on how to use org mode
  - see http://orgmode.org  and especially  http://orgmode.org/manual/index.html#Top
  - To add tags to a heading, use C-c C-c
    - To see what tags have already been used in this file, hit Tab
      for completion.
  - To search file for headings with a certain tag
    (e.g. "OS"), type: C-c / m OS <enter>
    and then M-g M-n to go to each match.
      - see http://orgmode.org/manual/Tag-searches.html#Tag-searches
	for more info
    - clear highlighting by C-c C-c
  - To similarly search for entries that have a search term anywhere
    (heading, tags, body), (e.g. "flume"), type: C-c / r flume <enter>
  - To cycle visibility of the whole file, use S-Tab (Shift key plus Tab key).
    With each repeated hit of S-Tab, will cycle through Overview ->
    Contents -> Show All.
  - To fold / unfold a given heading, hit Tab while on the heading.
  - To create an "agenda" view of just headlines matching a certain
    tag, such as "OS", do M-x org-agenda < m OS <enter>
    - GregS: I Recommend binding "C-c a" to org-agenda
      - see http://orgmode.org/worg/org-faq.html#setting-global-keybindings

  - note that org understands http url's, so clicking should "just work".

The following line allows for adding links to files under the
"reading" folder of our svn repo.  To add a link to the file foo.pdf
in the reading folder, enclose the following string in one extra pair
of []'s: [reading:foo.pdf][local copy]

#+LINK: reading file:reading/%s
#+STARTUP: showall

#+BEGIN_COMMENT
Local Variables:
mode: org
End:
#+END_COMMENT
